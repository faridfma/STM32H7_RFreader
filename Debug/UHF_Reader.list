
UHF_Reader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010a88  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000690  08010d58  08010d58  00020d58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080113e8  080113e8  000213e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080113f0  080113f0  000213f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080113f4  080113f4  000213f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001dc  24000000  080113f8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000033f8  240001dc  080115d4  000301dc  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240035d4  080115d4  000335d4  2**0
                  ALLOC
  9 .lwip_sec     00000100  30000000  30000000  00040000  2**0
                  ALLOC
 10 .RxRF_SRAMSection 00004700  30000100  30000100  00040000  2**2
                  ALLOC
 11 .LoRa_SRAMSection 00000800  30004800  30004800  00040000  2**2
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0003020a  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002ae90  00000000  00000000  0003024d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004cbe  00000000  00000000  0005b0dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001d00  00000000  00000000  0005fda0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001680  00000000  00000000  00061aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00038c2b  00000000  00000000  00063120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00027031  00000000  00000000  0009bd4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00169de5  00000000  00000000  000c2d7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00008b20  00000000  00000000  0022cb64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  00235684  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001dc 	.word	0x240001dc
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08010d40 	.word	0x08010d40

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001e0 	.word	0x240001e0
 800030c:	08010d40 	.word	0x08010d40

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b970 	b.w	80006b8 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9e08      	ldr	r6, [sp, #32]
 80003f6:	460d      	mov	r5, r1
 80003f8:	4604      	mov	r4, r0
 80003fa:	460f      	mov	r7, r1
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d14a      	bne.n	8000496 <__udivmoddi4+0xa6>
 8000400:	428a      	cmp	r2, r1
 8000402:	4694      	mov	ip, r2
 8000404:	d965      	bls.n	80004d2 <__udivmoddi4+0xe2>
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	b143      	cbz	r3, 800041e <__udivmoddi4+0x2e>
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	f1c3 0220 	rsb	r2, r3, #32
 8000414:	409f      	lsls	r7, r3
 8000416:	fa20 f202 	lsr.w	r2, r0, r2
 800041a:	4317      	orrs	r7, r2
 800041c:	409c      	lsls	r4, r3
 800041e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000422:	fa1f f58c 	uxth.w	r5, ip
 8000426:	fbb7 f1fe 	udiv	r1, r7, lr
 800042a:	0c22      	lsrs	r2, r4, #16
 800042c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000430:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000434:	fb01 f005 	mul.w	r0, r1, r5
 8000438:	4290      	cmp	r0, r2
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x62>
 800043c:	eb1c 0202 	adds.w	r2, ip, r2
 8000440:	f101 37ff 	add.w	r7, r1, #4294967295
 8000444:	f080 811c 	bcs.w	8000680 <__udivmoddi4+0x290>
 8000448:	4290      	cmp	r0, r2
 800044a:	f240 8119 	bls.w	8000680 <__udivmoddi4+0x290>
 800044e:	3902      	subs	r1, #2
 8000450:	4462      	add	r2, ip
 8000452:	1a12      	subs	r2, r2, r0
 8000454:	b2a4      	uxth	r4, r4
 8000456:	fbb2 f0fe 	udiv	r0, r2, lr
 800045a:	fb0e 2210 	mls	r2, lr, r0, r2
 800045e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000462:	fb00 f505 	mul.w	r5, r0, r5
 8000466:	42a5      	cmp	r5, r4
 8000468:	d90a      	bls.n	8000480 <__udivmoddi4+0x90>
 800046a:	eb1c 0404 	adds.w	r4, ip, r4
 800046e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000472:	f080 8107 	bcs.w	8000684 <__udivmoddi4+0x294>
 8000476:	42a5      	cmp	r5, r4
 8000478:	f240 8104 	bls.w	8000684 <__udivmoddi4+0x294>
 800047c:	4464      	add	r4, ip
 800047e:	3802      	subs	r0, #2
 8000480:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000484:	1b64      	subs	r4, r4, r5
 8000486:	2100      	movs	r1, #0
 8000488:	b11e      	cbz	r6, 8000492 <__udivmoddi4+0xa2>
 800048a:	40dc      	lsrs	r4, r3
 800048c:	2300      	movs	r3, #0
 800048e:	e9c6 4300 	strd	r4, r3, [r6]
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	428b      	cmp	r3, r1
 8000498:	d908      	bls.n	80004ac <__udivmoddi4+0xbc>
 800049a:	2e00      	cmp	r6, #0
 800049c:	f000 80ed 	beq.w	800067a <__udivmoddi4+0x28a>
 80004a0:	2100      	movs	r1, #0
 80004a2:	e9c6 0500 	strd	r0, r5, [r6]
 80004a6:	4608      	mov	r0, r1
 80004a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ac:	fab3 f183 	clz	r1, r3
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d149      	bne.n	8000548 <__udivmoddi4+0x158>
 80004b4:	42ab      	cmp	r3, r5
 80004b6:	d302      	bcc.n	80004be <__udivmoddi4+0xce>
 80004b8:	4282      	cmp	r2, r0
 80004ba:	f200 80f8 	bhi.w	80006ae <__udivmoddi4+0x2be>
 80004be:	1a84      	subs	r4, r0, r2
 80004c0:	eb65 0203 	sbc.w	r2, r5, r3
 80004c4:	2001      	movs	r0, #1
 80004c6:	4617      	mov	r7, r2
 80004c8:	2e00      	cmp	r6, #0
 80004ca:	d0e2      	beq.n	8000492 <__udivmoddi4+0xa2>
 80004cc:	e9c6 4700 	strd	r4, r7, [r6]
 80004d0:	e7df      	b.n	8000492 <__udivmoddi4+0xa2>
 80004d2:	b902      	cbnz	r2, 80004d6 <__udivmoddi4+0xe6>
 80004d4:	deff      	udf	#255	; 0xff
 80004d6:	fab2 f382 	clz	r3, r2
 80004da:	2b00      	cmp	r3, #0
 80004dc:	f040 8090 	bne.w	8000600 <__udivmoddi4+0x210>
 80004e0:	1a8a      	subs	r2, r1, r2
 80004e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e6:	fa1f fe8c 	uxth.w	lr, ip
 80004ea:	2101      	movs	r1, #1
 80004ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80004f0:	fb07 2015 	mls	r0, r7, r5, r2
 80004f4:	0c22      	lsrs	r2, r4, #16
 80004f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004fa:	fb0e f005 	mul.w	r0, lr, r5
 80004fe:	4290      	cmp	r0, r2
 8000500:	d908      	bls.n	8000514 <__udivmoddi4+0x124>
 8000502:	eb1c 0202 	adds.w	r2, ip, r2
 8000506:	f105 38ff 	add.w	r8, r5, #4294967295
 800050a:	d202      	bcs.n	8000512 <__udivmoddi4+0x122>
 800050c:	4290      	cmp	r0, r2
 800050e:	f200 80cb 	bhi.w	80006a8 <__udivmoddi4+0x2b8>
 8000512:	4645      	mov	r5, r8
 8000514:	1a12      	subs	r2, r2, r0
 8000516:	b2a4      	uxth	r4, r4
 8000518:	fbb2 f0f7 	udiv	r0, r2, r7
 800051c:	fb07 2210 	mls	r2, r7, r0, r2
 8000520:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000524:	fb0e fe00 	mul.w	lr, lr, r0
 8000528:	45a6      	cmp	lr, r4
 800052a:	d908      	bls.n	800053e <__udivmoddi4+0x14e>
 800052c:	eb1c 0404 	adds.w	r4, ip, r4
 8000530:	f100 32ff 	add.w	r2, r0, #4294967295
 8000534:	d202      	bcs.n	800053c <__udivmoddi4+0x14c>
 8000536:	45a6      	cmp	lr, r4
 8000538:	f200 80bb 	bhi.w	80006b2 <__udivmoddi4+0x2c2>
 800053c:	4610      	mov	r0, r2
 800053e:	eba4 040e 	sub.w	r4, r4, lr
 8000542:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000546:	e79f      	b.n	8000488 <__udivmoddi4+0x98>
 8000548:	f1c1 0720 	rsb	r7, r1, #32
 800054c:	408b      	lsls	r3, r1
 800054e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000552:	ea4c 0c03 	orr.w	ip, ip, r3
 8000556:	fa05 f401 	lsl.w	r4, r5, r1
 800055a:	fa20 f307 	lsr.w	r3, r0, r7
 800055e:	40fd      	lsrs	r5, r7
 8000560:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000564:	4323      	orrs	r3, r4
 8000566:	fbb5 f8f9 	udiv	r8, r5, r9
 800056a:	fa1f fe8c 	uxth.w	lr, ip
 800056e:	fb09 5518 	mls	r5, r9, r8, r5
 8000572:	0c1c      	lsrs	r4, r3, #16
 8000574:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000578:	fb08 f50e 	mul.w	r5, r8, lr
 800057c:	42a5      	cmp	r5, r4
 800057e:	fa02 f201 	lsl.w	r2, r2, r1
 8000582:	fa00 f001 	lsl.w	r0, r0, r1
 8000586:	d90b      	bls.n	80005a0 <__udivmoddi4+0x1b0>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000590:	f080 8088 	bcs.w	80006a4 <__udivmoddi4+0x2b4>
 8000594:	42a5      	cmp	r5, r4
 8000596:	f240 8085 	bls.w	80006a4 <__udivmoddi4+0x2b4>
 800059a:	f1a8 0802 	sub.w	r8, r8, #2
 800059e:	4464      	add	r4, ip
 80005a0:	1b64      	subs	r4, r4, r5
 80005a2:	b29d      	uxth	r5, r3
 80005a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80005a8:	fb09 4413 	mls	r4, r9, r3, r4
 80005ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80005b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80005b4:	45a6      	cmp	lr, r4
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x1da>
 80005b8:	eb1c 0404 	adds.w	r4, ip, r4
 80005bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80005c0:	d26c      	bcs.n	800069c <__udivmoddi4+0x2ac>
 80005c2:	45a6      	cmp	lr, r4
 80005c4:	d96a      	bls.n	800069c <__udivmoddi4+0x2ac>
 80005c6:	3b02      	subs	r3, #2
 80005c8:	4464      	add	r4, ip
 80005ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005ce:	fba3 9502 	umull	r9, r5, r3, r2
 80005d2:	eba4 040e 	sub.w	r4, r4, lr
 80005d6:	42ac      	cmp	r4, r5
 80005d8:	46c8      	mov	r8, r9
 80005da:	46ae      	mov	lr, r5
 80005dc:	d356      	bcc.n	800068c <__udivmoddi4+0x29c>
 80005de:	d053      	beq.n	8000688 <__udivmoddi4+0x298>
 80005e0:	b156      	cbz	r6, 80005f8 <__udivmoddi4+0x208>
 80005e2:	ebb0 0208 	subs.w	r2, r0, r8
 80005e6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ea:	fa04 f707 	lsl.w	r7, r4, r7
 80005ee:	40ca      	lsrs	r2, r1
 80005f0:	40cc      	lsrs	r4, r1
 80005f2:	4317      	orrs	r7, r2
 80005f4:	e9c6 7400 	strd	r7, r4, [r6]
 80005f8:	4618      	mov	r0, r3
 80005fa:	2100      	movs	r1, #0
 80005fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000600:	f1c3 0120 	rsb	r1, r3, #32
 8000604:	fa02 fc03 	lsl.w	ip, r2, r3
 8000608:	fa20 f201 	lsr.w	r2, r0, r1
 800060c:	fa25 f101 	lsr.w	r1, r5, r1
 8000610:	409d      	lsls	r5, r3
 8000612:	432a      	orrs	r2, r5
 8000614:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000618:	fa1f fe8c 	uxth.w	lr, ip
 800061c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000620:	fb07 1510 	mls	r5, r7, r0, r1
 8000624:	0c11      	lsrs	r1, r2, #16
 8000626:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800062a:	fb00 f50e 	mul.w	r5, r0, lr
 800062e:	428d      	cmp	r5, r1
 8000630:	fa04 f403 	lsl.w	r4, r4, r3
 8000634:	d908      	bls.n	8000648 <__udivmoddi4+0x258>
 8000636:	eb1c 0101 	adds.w	r1, ip, r1
 800063a:	f100 38ff 	add.w	r8, r0, #4294967295
 800063e:	d22f      	bcs.n	80006a0 <__udivmoddi4+0x2b0>
 8000640:	428d      	cmp	r5, r1
 8000642:	d92d      	bls.n	80006a0 <__udivmoddi4+0x2b0>
 8000644:	3802      	subs	r0, #2
 8000646:	4461      	add	r1, ip
 8000648:	1b49      	subs	r1, r1, r5
 800064a:	b292      	uxth	r2, r2
 800064c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000650:	fb07 1115 	mls	r1, r7, r5, r1
 8000654:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000658:	fb05 f10e 	mul.w	r1, r5, lr
 800065c:	4291      	cmp	r1, r2
 800065e:	d908      	bls.n	8000672 <__udivmoddi4+0x282>
 8000660:	eb1c 0202 	adds.w	r2, ip, r2
 8000664:	f105 38ff 	add.w	r8, r5, #4294967295
 8000668:	d216      	bcs.n	8000698 <__udivmoddi4+0x2a8>
 800066a:	4291      	cmp	r1, r2
 800066c:	d914      	bls.n	8000698 <__udivmoddi4+0x2a8>
 800066e:	3d02      	subs	r5, #2
 8000670:	4462      	add	r2, ip
 8000672:	1a52      	subs	r2, r2, r1
 8000674:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000678:	e738      	b.n	80004ec <__udivmoddi4+0xfc>
 800067a:	4631      	mov	r1, r6
 800067c:	4630      	mov	r0, r6
 800067e:	e708      	b.n	8000492 <__udivmoddi4+0xa2>
 8000680:	4639      	mov	r1, r7
 8000682:	e6e6      	b.n	8000452 <__udivmoddi4+0x62>
 8000684:	4610      	mov	r0, r2
 8000686:	e6fb      	b.n	8000480 <__udivmoddi4+0x90>
 8000688:	4548      	cmp	r0, r9
 800068a:	d2a9      	bcs.n	80005e0 <__udivmoddi4+0x1f0>
 800068c:	ebb9 0802 	subs.w	r8, r9, r2
 8000690:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000694:	3b01      	subs	r3, #1
 8000696:	e7a3      	b.n	80005e0 <__udivmoddi4+0x1f0>
 8000698:	4645      	mov	r5, r8
 800069a:	e7ea      	b.n	8000672 <__udivmoddi4+0x282>
 800069c:	462b      	mov	r3, r5
 800069e:	e794      	b.n	80005ca <__udivmoddi4+0x1da>
 80006a0:	4640      	mov	r0, r8
 80006a2:	e7d1      	b.n	8000648 <__udivmoddi4+0x258>
 80006a4:	46d0      	mov	r8, sl
 80006a6:	e77b      	b.n	80005a0 <__udivmoddi4+0x1b0>
 80006a8:	3d02      	subs	r5, #2
 80006aa:	4462      	add	r2, ip
 80006ac:	e732      	b.n	8000514 <__udivmoddi4+0x124>
 80006ae:	4608      	mov	r0, r1
 80006b0:	e70a      	b.n	80004c8 <__udivmoddi4+0xd8>
 80006b2:	4464      	add	r4, ip
 80006b4:	3802      	subs	r0, #2
 80006b6:	e742      	b.n	800053e <__udivmoddi4+0x14e>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
 80006c4:	6039      	str	r1, [r7, #0]
   /* ETH_CODE: add breakpoint when stack oveflow is detected by FreeRTOS.
	* Useful for debugging issues.
	*/
   __BKPT(0);
 80006c6:	be00      	bkpt	0x0000
}
 80006c8:	bf00      	nop
 80006ca:	370c      	adds	r7, #12
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr

080006d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006da:	4b44      	ldr	r3, [pc, #272]	; (80007ec <main+0x118>)
 80006dc:	695b      	ldr	r3, [r3, #20]
 80006de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d11b      	bne.n	800071e <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80006e6:	f3bf 8f4f 	dsb	sy
}
 80006ea:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006ec:	f3bf 8f6f 	isb	sy
}
 80006f0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80006f2:	4b3e      	ldr	r3, [pc, #248]	; (80007ec <main+0x118>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80006fa:	f3bf 8f4f 	dsb	sy
}
 80006fe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000700:	f3bf 8f6f 	isb	sy
}
 8000704:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000706:	4b39      	ldr	r3, [pc, #228]	; (80007ec <main+0x118>)
 8000708:	695b      	ldr	r3, [r3, #20]
 800070a:	4a38      	ldr	r2, [pc, #224]	; (80007ec <main+0x118>)
 800070c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000710:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000712:	f3bf 8f4f 	dsb	sy
}
 8000716:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000718:	f3bf 8f6f 	isb	sy
}
 800071c:	e000      	b.n	8000720 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800071e:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000720:	4b32      	ldr	r3, [pc, #200]	; (80007ec <main+0x118>)
 8000722:	695b      	ldr	r3, [r3, #20]
 8000724:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000728:	2b00      	cmp	r3, #0
 800072a:	d138      	bne.n	800079e <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800072c:	4b2f      	ldr	r3, [pc, #188]	; (80007ec <main+0x118>)
 800072e:	2200      	movs	r2, #0
 8000730:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000734:	f3bf 8f4f 	dsb	sy
}
 8000738:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800073a:	4b2c      	ldr	r3, [pc, #176]	; (80007ec <main+0x118>)
 800073c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000740:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	0b5b      	lsrs	r3, r3, #13
 8000746:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800074a:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	08db      	lsrs	r3, r3, #3
 8000750:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000754:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000756:	68bb      	ldr	r3, [r7, #8]
 8000758:	015a      	lsls	r2, r3, #5
 800075a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800075e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000760:	687a      	ldr	r2, [r7, #4]
 8000762:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000764:	4921      	ldr	r1, [pc, #132]	; (80007ec <main+0x118>)
 8000766:	4313      	orrs	r3, r2
 8000768:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	1e5a      	subs	r2, r3, #1
 8000770:	607a      	str	r2, [r7, #4]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d1ef      	bne.n	8000756 <main+0x82>
    } while(sets-- != 0U);
 8000776:	68bb      	ldr	r3, [r7, #8]
 8000778:	1e5a      	subs	r2, r3, #1
 800077a:	60ba      	str	r2, [r7, #8]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d1e5      	bne.n	800074c <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8000780:	f3bf 8f4f 	dsb	sy
}
 8000784:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000786:	4b19      	ldr	r3, [pc, #100]	; (80007ec <main+0x118>)
 8000788:	695b      	ldr	r3, [r3, #20]
 800078a:	4a18      	ldr	r2, [pc, #96]	; (80007ec <main+0x118>)
 800078c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000790:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000792:	f3bf 8f4f 	dsb	sy
}
 8000796:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000798:	f3bf 8f6f 	isb	sy
}
 800079c:	e000      	b.n	80007a0 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800079e:	bf00      	nop

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80007a0:	f000 fc34 	bl	800100c <MPU_Config>

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a4:	f001 faa6 	bl	8001cf4 <HAL_Init>


  /* Configure the system clock */
  SystemClock_Config();
 80007a8:	f000 f82e 	bl	8000808 <SystemClock_Config>


  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ac:	f000 f9b0 	bl	8000b10 <MX_GPIO_Init>
  MX_DMA_Init();
 80007b0:	f000 f976 	bl	8000aa0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80007b4:	f000 f942 	bl	8000a3c <MX_USART1_UART_Init>
  MX_UART5_Init();
 80007b8:	f000 f8f4 	bl	80009a4 <MX_UART5_Init>
  MX_UART4_Init();
 80007bc:	f000 f89e 	bl	80008fc <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80007c0:	f00a fe10 	bl	800b3e4 <osKernelInitialize>

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80007c4:	4a0a      	ldr	r2, [pc, #40]	; (80007f0 <main+0x11c>)
 80007c6:	2100      	movs	r1, #0
 80007c8:	480a      	ldr	r0, [pc, #40]	; (80007f4 <main+0x120>)
 80007ca:	f00a fe55 	bl	800b478 <osThreadNew>
 80007ce:	4603      	mov	r3, r0
 80007d0:	4a09      	ldr	r2, [pc, #36]	; (80007f8 <main+0x124>)
 80007d2:	6013      	str	r3, [r2, #0]

  /* creation of MainTask */
  MainTaskHandle = osThreadNew(MainTaskInit, NULL, &MainTask_attributes);
 80007d4:	4a09      	ldr	r2, [pc, #36]	; (80007fc <main+0x128>)
 80007d6:	2100      	movs	r1, #0
 80007d8:	4809      	ldr	r0, [pc, #36]	; (8000800 <main+0x12c>)
 80007da:	f00a fe4d 	bl	800b478 <osThreadNew>
 80007de:	4603      	mov	r3, r0
 80007e0:	4a08      	ldr	r2, [pc, #32]	; (8000804 <main+0x130>)
 80007e2:	6013      	str	r3, [r2, #0]

  /* Start scheduler */
  osKernelStart();
 80007e4:	f00a fe22 	bl	800b42c <osKernelStart>


  while (1)
 80007e8:	e7fe      	b.n	80007e8 <main+0x114>
 80007ea:	bf00      	nop
 80007ec:	e000ed00 	.word	0xe000ed00
 80007f0:	08010f9c 	.word	0x08010f9c
 80007f4:	08000dc9 	.word	0x08000dc9
 80007f8:	24000598 	.word	0x24000598
 80007fc:	08010fc0 	.word	0x08010fc0
 8000800:	08000e01 	.word	0x08000e01
 8000804:	2400059c 	.word	0x2400059c

08000808 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b09c      	sub	sp, #112	; 0x70
 800080c:	af00      	add	r7, sp, #0

	 RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000812:	224c      	movs	r2, #76	; 0x4c
 8000814:	2100      	movs	r1, #0
 8000816:	4618      	mov	r0, r3
 8000818:	f00e fb1e 	bl	800ee58 <memset>
	 RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800081c:	1d3b      	adds	r3, r7, #4
 800081e:	2220      	movs	r2, #32
 8000820:	2100      	movs	r1, #0
 8000822:	4618      	mov	r0, r3
 8000824:	f00e fb18 	bl	800ee58 <memset>

	 /** Supply configuration update enable */
	 HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000828:	2002      	movs	r0, #2
 800082a:	f005 f879 	bl	8005920 <HAL_PWREx_ConfigSupply>

	 /** Configure the main internal regulator output voltage */
	 __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800082e:	2300      	movs	r3, #0
 8000830:	603b      	str	r3, [r7, #0]
 8000832:	4b30      	ldr	r3, [pc, #192]	; (80008f4 <SystemClock_Config+0xec>)
 8000834:	699b      	ldr	r3, [r3, #24]
 8000836:	4a2f      	ldr	r2, [pc, #188]	; (80008f4 <SystemClock_Config+0xec>)
 8000838:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800083c:	6193      	str	r3, [r2, #24]
 800083e:	4b2d      	ldr	r3, [pc, #180]	; (80008f4 <SystemClock_Config+0xec>)
 8000840:	699b      	ldr	r3, [r3, #24]
 8000842:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000846:	603b      	str	r3, [r7, #0]
 8000848:	683b      	ldr	r3, [r7, #0]

	 /* Wait for the VOSRDY flag */
	 while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 800084a:	bf00      	nop
 800084c:	4b29      	ldr	r3, [pc, #164]	; (80008f4 <SystemClock_Config+0xec>)
 800084e:	699b      	ldr	r3, [r3, #24]
 8000850:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000854:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000858:	d1f8      	bne.n	800084c <SystemClock_Config+0x44>
	 {
	 }

	 /** Macro to configure the PLL clock source */
	 __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 800085a:	4b27      	ldr	r3, [pc, #156]	; (80008f8 <SystemClock_Config+0xf0>)
 800085c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800085e:	4a26      	ldr	r2, [pc, #152]	; (80008f8 <SystemClock_Config+0xf0>)
 8000860:	f023 0303 	bic.w	r3, r3, #3
 8000864:	6293      	str	r3, [r2, #40]	; 0x28

	 /** Initializes the RCC Oscillators according to the specified parameters in the RCC_OscInitTypeDef structure. */
	 RCC_OscInitStruct.OscillatorType = (RCC_OSCILLATORTYPE_HSI48 | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSI);
 8000866:	232a      	movs	r3, #42	; 0x2a
 8000868:	627b      	str	r3, [r7, #36]	; 0x24
	 RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800086a:	2301      	movs	r3, #1
 800086c:	633b      	str	r3, [r7, #48]	; 0x30

	/** INSTANTEL-FW-TEAM: Use a variable assignment here (rather than constant), to compensate for revisions. */
	RCC_OscInitStruct.HSICalibrationValue = 64;
 800086e:	2340      	movs	r3, #64	; 0x40
 8000870:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000872:	2301      	movs	r3, #1
 8000874:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000876:	2301      	movs	r3, #1
 8000878:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800087a:	2302      	movs	r3, #2
 800087c:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800087e:	2300      	movs	r3, #0
 8000880:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000882:	2304      	movs	r3, #4
 8000884:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 50;
 8000886:	2332      	movs	r3, #50	; 0x32
 8000888:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 800088a:	2302      	movs	r3, #2
 800088c:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 6;
 800088e:	2306      	movs	r3, #6
 8000890:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000892:	2302      	movs	r3, #2
 8000894:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000896:	230c      	movs	r3, #12
 8000898:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800089a:	2300      	movs	r3, #0
 800089c:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	66fb      	str	r3, [r7, #108]	; 0x6c

	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008a6:	4618      	mov	r0, r3
 80008a8:	f005 f874 	bl	8005994 <HAL_RCC_OscConfig>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <SystemClock_Config+0xae>
	{
		Error_Handler();
 80008b2:	f000 fc0b 	bl	80010cc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 |
 80008b6:	233f      	movs	r3, #63	; 0x3f
 80008b8:	607b      	str	r3, [r7, #4]
								   RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1 | RCC_CLOCKTYPE_D1PCLK1);
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ba:	2303      	movs	r3, #3
 80008bc:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008be:	2300      	movs	r3, #0
 80008c0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80008c2:	2308      	movs	r3, #8
 80008c4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008c6:	2340      	movs	r3, #64	; 0x40
 80008c8:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008ca:	2340      	movs	r3, #64	; 0x40
 80008cc:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008d2:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008d4:	2340      	movs	r3, #64	; 0x40
 80008d6:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008d8:	1d3b      	adds	r3, r7, #4
 80008da:	2102      	movs	r1, #2
 80008dc:	4618      	mov	r0, r3
 80008de:	f005 fc33 	bl	8006148 <HAL_RCC_ClockConfig>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <SystemClock_Config+0xe4>
	{
		Error_Handler();
 80008e8:	f000 fbf0 	bl	80010cc <Error_Handler>
	}

}
 80008ec:	bf00      	nop
 80008ee:	3770      	adds	r7, #112	; 0x70
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	58024800 	.word	0x58024800
 80008f8:	58024400 	.word	0x58024400

080008fc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
	  /* USER CODE END UART4_Init 1 */
	  huart4.Instance = UART4;
 8000900:	4b26      	ldr	r3, [pc, #152]	; (800099c <MX_UART4_Init+0xa0>)
 8000902:	4a27      	ldr	r2, [pc, #156]	; (80009a0 <MX_UART4_Init+0xa4>)
 8000904:	601a      	str	r2, [r3, #0]
	  huart4.Init.BaudRate = 19200;
 8000906:	4b25      	ldr	r3, [pc, #148]	; (800099c <MX_UART4_Init+0xa0>)
 8000908:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 800090c:	605a      	str	r2, [r3, #4]
	  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800090e:	4b23      	ldr	r3, [pc, #140]	; (800099c <MX_UART4_Init+0xa0>)
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
	  huart4.Init.StopBits = UART_STOPBITS_1;
 8000914:	4b21      	ldr	r3, [pc, #132]	; (800099c <MX_UART4_Init+0xa0>)
 8000916:	2200      	movs	r2, #0
 8000918:	60da      	str	r2, [r3, #12]
	  huart4.Init.Parity = UART_PARITY_NONE;
 800091a:	4b20      	ldr	r3, [pc, #128]	; (800099c <MX_UART4_Init+0xa0>)
 800091c:	2200      	movs	r2, #0
 800091e:	611a      	str	r2, [r3, #16]
	  huart4.Init.Mode = UART_MODE_TX_RX;
 8000920:	4b1e      	ldr	r3, [pc, #120]	; (800099c <MX_UART4_Init+0xa0>)
 8000922:	220c      	movs	r2, #12
 8000924:	615a      	str	r2, [r3, #20]
	  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000926:	4b1d      	ldr	r3, [pc, #116]	; (800099c <MX_UART4_Init+0xa0>)
 8000928:	2200      	movs	r2, #0
 800092a:	619a      	str	r2, [r3, #24]
	  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800092c:	4b1b      	ldr	r3, [pc, #108]	; (800099c <MX_UART4_Init+0xa0>)
 800092e:	2200      	movs	r2, #0
 8000930:	61da      	str	r2, [r3, #28]
	  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000932:	4b1a      	ldr	r3, [pc, #104]	; (800099c <MX_UART4_Init+0xa0>)
 8000934:	2200      	movs	r2, #0
 8000936:	621a      	str	r2, [r3, #32]
	  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000938:	4b18      	ldr	r3, [pc, #96]	; (800099c <MX_UART4_Init+0xa0>)
 800093a:	2200      	movs	r2, #0
 800093c:	625a      	str	r2, [r3, #36]	; 0x24
	  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800093e:	4b17      	ldr	r3, [pc, #92]	; (800099c <MX_UART4_Init+0xa0>)
 8000940:	2200      	movs	r2, #0
 8000942:	629a      	str	r2, [r3, #40]	; 0x28

	  if(HAL_UART_DeInit(&huart4) != HAL_OK)
 8000944:	4815      	ldr	r0, [pc, #84]	; (800099c <MX_UART4_Init+0xa0>)
 8000946:	f008 f8d3 	bl	8008af0 <HAL_UART_DeInit>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_UART4_Init+0x58>
	  {
	    Error_Handler();
 8000950:	f000 fbbc 	bl	80010cc <Error_Handler>
	  }

	  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000954:	4811      	ldr	r0, [pc, #68]	; (800099c <MX_UART4_Init+0xa0>)
 8000956:	f008 f87b 	bl	8008a50 <HAL_UART_Init>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_UART4_Init+0x68>
	  {
	    Error_Handler();
 8000960:	f000 fbb4 	bl	80010cc <Error_Handler>
	  }

	  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000964:	2100      	movs	r1, #0
 8000966:	480d      	ldr	r0, [pc, #52]	; (800099c <MX_UART4_Init+0xa0>)
 8000968:	f00a f944 	bl	800abf4 <HAL_UARTEx_SetTxFifoThreshold>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_UART4_Init+0x7a>
	  {
	    Error_Handler();
 8000972:	f000 fbab 	bl	80010cc <Error_Handler>
	  }
	  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000976:	2100      	movs	r1, #0
 8000978:	4808      	ldr	r0, [pc, #32]	; (800099c <MX_UART4_Init+0xa0>)
 800097a:	f00a f979 	bl	800ac70 <HAL_UARTEx_SetRxFifoThreshold>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_UART4_Init+0x8c>
	  {
	    Error_Handler();
 8000984:	f000 fba2 	bl	80010cc <Error_Handler>
	  }
	  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000988:	4804      	ldr	r0, [pc, #16]	; (800099c <MX_UART4_Init+0xa0>)
 800098a:	f00a f8fa 	bl	800ab82 <HAL_UARTEx_DisableFifoMode>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_UART4_Init+0x9c>
	  {
	    Error_Handler();
 8000994:	f000 fb9a 	bl	80010cc <Error_Handler>
	  }

	  /* USER CODE BEGIN UART4_Init 2 */
}
 8000998:	bf00      	nop
 800099a:	bd80      	pop	{r7, pc}
 800099c:	240001fc 	.word	0x240001fc
 80009a0:	40004c00 	.word	0x40004c00

080009a4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
	  /* USER CODE END UART5_Init 1 */
	  huart5.Instance = UART5;
 80009a8:	4b22      	ldr	r3, [pc, #136]	; (8000a34 <MX_UART5_Init+0x90>)
 80009aa:	4a23      	ldr	r2, [pc, #140]	; (8000a38 <MX_UART5_Init+0x94>)
 80009ac:	601a      	str	r2, [r3, #0]
	  huart5.Init.BaudRate = 921600;//115200;
 80009ae:	4b21      	ldr	r3, [pc, #132]	; (8000a34 <MX_UART5_Init+0x90>)
 80009b0:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80009b4:	605a      	str	r2, [r3, #4]
	  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80009b6:	4b1f      	ldr	r3, [pc, #124]	; (8000a34 <MX_UART5_Init+0x90>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]
	  huart5.Init.StopBits = UART_STOPBITS_1;
 80009bc:	4b1d      	ldr	r3, [pc, #116]	; (8000a34 <MX_UART5_Init+0x90>)
 80009be:	2200      	movs	r2, #0
 80009c0:	60da      	str	r2, [r3, #12]
	  huart5.Init.Parity = UART_PARITY_NONE;
 80009c2:	4b1c      	ldr	r3, [pc, #112]	; (8000a34 <MX_UART5_Init+0x90>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	611a      	str	r2, [r3, #16]
	  huart5.Init.Mode = UART_MODE_TX_RX;
 80009c8:	4b1a      	ldr	r3, [pc, #104]	; (8000a34 <MX_UART5_Init+0x90>)
 80009ca:	220c      	movs	r2, #12
 80009cc:	615a      	str	r2, [r3, #20]
	  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ce:	4b19      	ldr	r3, [pc, #100]	; (8000a34 <MX_UART5_Init+0x90>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	619a      	str	r2, [r3, #24]
	  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d4:	4b17      	ldr	r3, [pc, #92]	; (8000a34 <MX_UART5_Init+0x90>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	61da      	str	r2, [r3, #28]
	  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009da:	4b16      	ldr	r3, [pc, #88]	; (8000a34 <MX_UART5_Init+0x90>)
 80009dc:	2200      	movs	r2, #0
 80009de:	621a      	str	r2, [r3, #32]
	  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009e0:	4b14      	ldr	r3, [pc, #80]	; (8000a34 <MX_UART5_Init+0x90>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	625a      	str	r2, [r3, #36]	; 0x24
	  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009e6:	4b13      	ldr	r3, [pc, #76]	; (8000a34 <MX_UART5_Init+0x90>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	629a      	str	r2, [r3, #40]	; 0x28
	  if (HAL_UART_Init(&huart5) != HAL_OK)
 80009ec:	4811      	ldr	r0, [pc, #68]	; (8000a34 <MX_UART5_Init+0x90>)
 80009ee:	f008 f82f 	bl	8008a50 <HAL_UART_Init>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_UART5_Init+0x58>
	  {
	    Error_Handler();
 80009f8:	f000 fb68 	bl	80010cc <Error_Handler>
	  }
	  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009fc:	2100      	movs	r1, #0
 80009fe:	480d      	ldr	r0, [pc, #52]	; (8000a34 <MX_UART5_Init+0x90>)
 8000a00:	f00a f8f8 	bl	800abf4 <HAL_UARTEx_SetTxFifoThreshold>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_UART5_Init+0x6a>
	  {
	    Error_Handler();
 8000a0a:	f000 fb5f 	bl	80010cc <Error_Handler>
	  }
	  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a0e:	2100      	movs	r1, #0
 8000a10:	4808      	ldr	r0, [pc, #32]	; (8000a34 <MX_UART5_Init+0x90>)
 8000a12:	f00a f92d 	bl	800ac70 <HAL_UARTEx_SetRxFifoThreshold>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_UART5_Init+0x7c>
	  {
	    Error_Handler();
 8000a1c:	f000 fb56 	bl	80010cc <Error_Handler>
	  }
	  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8000a20:	4804      	ldr	r0, [pc, #16]	; (8000a34 <MX_UART5_Init+0x90>)
 8000a22:	f00a f8ae 	bl	800ab82 <HAL_UARTEx_DisableFifoMode>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_UART5_Init+0x8c>
	  {
	    Error_Handler();
 8000a2c:	f000 fb4e 	bl	80010cc <Error_Handler>
	  }

	  /* USER CODE BEGIN UART5_Init 2 */

}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	24000290 	.word	0x24000290
 8000a38:	40005000 	.word	0x40005000

08000a3c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 1 */

  huart1.Instance = USART1;
 8000a40:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <MX_USART1_UART_Init+0x5c>)
 8000a42:	4a16      	ldr	r2, [pc, #88]	; (8000a9c <MX_USART1_UART_Init+0x60>)
 8000a44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8000a46:	4b14      	ldr	r3, [pc, #80]	; (8000a98 <MX_USART1_UART_Init+0x5c>)
 8000a48:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8000a4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a4e:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <MX_USART1_UART_Init+0x5c>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a54:	4b10      	ldr	r3, [pc, #64]	; (8000a98 <MX_USART1_UART_Init+0x5c>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a5a:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <MX_USART1_UART_Init+0x5c>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a60:	4b0d      	ldr	r3, [pc, #52]	; (8000a98 <MX_USART1_UART_Init+0x5c>)
 8000a62:	220c      	movs	r2, #12
 8000a64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a66:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <MX_USART1_UART_Init+0x5c>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a6c:	4b0a      	ldr	r3, [pc, #40]	; (8000a98 <MX_USART1_UART_Init+0x5c>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a72:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <MX_USART1_UART_Init+0x5c>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a78:	4b07      	ldr	r3, [pc, #28]	; (8000a98 <MX_USART1_UART_Init+0x5c>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a7e:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <MX_USART1_UART_Init+0x5c>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a84:	4804      	ldr	r0, [pc, #16]	; (8000a98 <MX_USART1_UART_Init+0x5c>)
 8000a86:	f007 ffe3 	bl	8008a50 <HAL_UART_Init>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_USART1_UART_Init+0x58>
  {
	Error_Handler();
 8000a90:	f000 fb1c 	bl	80010cc <Error_Handler>
  }

  /* USER CODE END USART1_Init 2 */

}
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	24000324 	.word	0x24000324
 8000a9c:	40011000 	.word	0x40011000

08000aa0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000aa6:	4b19      	ldr	r3, [pc, #100]	; (8000b0c <MX_DMA_Init+0x6c>)
 8000aa8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000aac:	4a17      	ldr	r2, [pc, #92]	; (8000b0c <MX_DMA_Init+0x6c>)
 8000aae:	f043 0301 	orr.w	r3, r3, #1
 8000ab2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ab6:	4b15      	ldr	r3, [pc, #84]	; (8000b0c <MX_DMA_Init+0x6c>)
 8000ab8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000abc:	f003 0301 	and.w	r3, r3, #1
 8000ac0:	607b      	str	r3, [r7, #4]
 8000ac2:	687b      	ldr	r3, [r7, #4]

   /* DMA interrupt init */
   /* DMA1_Stream0_IRQn interrupt configuration */
   HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	200b      	movs	r0, #11
 8000aca:	f001 fa6f 	bl	8001fac <HAL_NVIC_SetPriority>
   HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000ace:	200b      	movs	r0, #11
 8000ad0:	f001 fa86 	bl	8001fe0 <HAL_NVIC_EnableIRQ>
   /* DMA1_Stream1_IRQn interrupt configuration */
   HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	200c      	movs	r0, #12
 8000ada:	f001 fa67 	bl	8001fac <HAL_NVIC_SetPriority>
   HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000ade:	200c      	movs	r0, #12
 8000ae0:	f001 fa7e 	bl	8001fe0 <HAL_NVIC_EnableIRQ>
   /* DMA1_Stream2_IRQn interrupt configuration */
   HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	200d      	movs	r0, #13
 8000aea:	f001 fa5f 	bl	8001fac <HAL_NVIC_SetPriority>
   HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000aee:	200d      	movs	r0, #13
 8000af0:	f001 fa76 	bl	8001fe0 <HAL_NVIC_EnableIRQ>
   /* DMA1_Stream3_IRQn interrupt configuration */
   HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000af4:	2200      	movs	r2, #0
 8000af6:	2100      	movs	r1, #0
 8000af8:	200e      	movs	r0, #14
 8000afa:	f001 fa57 	bl	8001fac <HAL_NVIC_SetPriority>
   HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000afe:	200e      	movs	r0, #14
 8000b00:	f001 fa6e 	bl	8001fe0 <HAL_NVIC_EnableIRQ>

}
 8000b04:	bf00      	nop
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	58024400 	.word	0x58024400

08000b10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08e      	sub	sp, #56	; 0x38
 8000b14:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	605a      	str	r2, [r3, #4]
 8000b20:	609a      	str	r2, [r3, #8]
 8000b22:	60da      	str	r2, [r3, #12]
 8000b24:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b26:	4ba0      	ldr	r3, [pc, #640]	; (8000da8 <MX_GPIO_Init+0x298>)
 8000b28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b2c:	4a9e      	ldr	r2, [pc, #632]	; (8000da8 <MX_GPIO_Init+0x298>)
 8000b2e:	f043 0310 	orr.w	r3, r3, #16
 8000b32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b36:	4b9c      	ldr	r3, [pc, #624]	; (8000da8 <MX_GPIO_Init+0x298>)
 8000b38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b3c:	f003 0310 	and.w	r3, r3, #16
 8000b40:	623b      	str	r3, [r7, #32]
 8000b42:	6a3b      	ldr	r3, [r7, #32]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b44:	4b98      	ldr	r3, [pc, #608]	; (8000da8 <MX_GPIO_Init+0x298>)
 8000b46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b4a:	4a97      	ldr	r2, [pc, #604]	; (8000da8 <MX_GPIO_Init+0x298>)
 8000b4c:	f043 0304 	orr.w	r3, r3, #4
 8000b50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b54:	4b94      	ldr	r3, [pc, #592]	; (8000da8 <MX_GPIO_Init+0x298>)
 8000b56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b5a:	f003 0304 	and.w	r3, r3, #4
 8000b5e:	61fb      	str	r3, [r7, #28]
 8000b60:	69fb      	ldr	r3, [r7, #28]
	  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b62:	4b91      	ldr	r3, [pc, #580]	; (8000da8 <MX_GPIO_Init+0x298>)
 8000b64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b68:	4a8f      	ldr	r2, [pc, #572]	; (8000da8 <MX_GPIO_Init+0x298>)
 8000b6a:	f043 0320 	orr.w	r3, r3, #32
 8000b6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b72:	4b8d      	ldr	r3, [pc, #564]	; (8000da8 <MX_GPIO_Init+0x298>)
 8000b74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b78:	f003 0320 	and.w	r3, r3, #32
 8000b7c:	61bb      	str	r3, [r7, #24]
 8000b7e:	69bb      	ldr	r3, [r7, #24]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b80:	4b89      	ldr	r3, [pc, #548]	; (8000da8 <MX_GPIO_Init+0x298>)
 8000b82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b86:	4a88      	ldr	r2, [pc, #544]	; (8000da8 <MX_GPIO_Init+0x298>)
 8000b88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b90:	4b85      	ldr	r3, [pc, #532]	; (8000da8 <MX_GPIO_Init+0x298>)
 8000b92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b9a:	617b      	str	r3, [r7, #20]
 8000b9c:	697b      	ldr	r3, [r7, #20]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9e:	4b82      	ldr	r3, [pc, #520]	; (8000da8 <MX_GPIO_Init+0x298>)
 8000ba0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba4:	4a80      	ldr	r2, [pc, #512]	; (8000da8 <MX_GPIO_Init+0x298>)
 8000ba6:	f043 0301 	orr.w	r3, r3, #1
 8000baa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bae:	4b7e      	ldr	r3, [pc, #504]	; (8000da8 <MX_GPIO_Init+0x298>)
 8000bb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb4:	f003 0301 	and.w	r3, r3, #1
 8000bb8:	613b      	str	r3, [r7, #16]
 8000bba:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bbc:	4b7a      	ldr	r3, [pc, #488]	; (8000da8 <MX_GPIO_Init+0x298>)
 8000bbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc2:	4a79      	ldr	r2, [pc, #484]	; (8000da8 <MX_GPIO_Init+0x298>)
 8000bc4:	f043 0302 	orr.w	r3, r3, #2
 8000bc8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bcc:	4b76      	ldr	r3, [pc, #472]	; (8000da8 <MX_GPIO_Init+0x298>)
 8000bce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd2:	f003 0302 	and.w	r3, r3, #2
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bda:	4b73      	ldr	r3, [pc, #460]	; (8000da8 <MX_GPIO_Init+0x298>)
 8000bdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be0:	4a71      	ldr	r2, [pc, #452]	; (8000da8 <MX_GPIO_Init+0x298>)
 8000be2:	f043 0308 	orr.w	r3, r3, #8
 8000be6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bea:	4b6f      	ldr	r3, [pc, #444]	; (8000da8 <MX_GPIO_Init+0x298>)
 8000bec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf0:	f003 0308 	and.w	r3, r3, #8
 8000bf4:	60bb      	str	r3, [r7, #8]
 8000bf6:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bf8:	4b6b      	ldr	r3, [pc, #428]	; (8000da8 <MX_GPIO_Init+0x298>)
 8000bfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bfe:	4a6a      	ldr	r2, [pc, #424]	; (8000da8 <MX_GPIO_Init+0x298>)
 8000c00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c08:	4b67      	ldr	r3, [pc, #412]	; (8000da8 <MX_GPIO_Init+0x298>)
 8000c0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c12:	607b      	str	r3, [r7, #4]
 8000c14:	687b      	ldr	r3, [r7, #4]


	  /*Configure GPIO pins : EN_RL3_MCU_Pin EN_RL4_MCU_Pin EN_RL5_MCU_Pin EN_RL6_MCU_Pin
	                           OPTO1_MCU_Pin EN_RL1_MCU_Pin EN_RL2_MCU_Pin */
	  GPIO_InitStruct.Pin = EN_RL1_MCU_Pin | EN_RL2_MCU_Pin | EN_RL3_MCU_Pin | EN_RL4_MCU_Pin | EN_RL5_MCU_Pin | EN_RL6_MCU_Pin | OPTO1_MCU_Pin;
 8000c16:	237f      	movs	r3, #127	; 0x7f
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	62bb      	str	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	62fb      	str	r3, [r7, #44]	; 0x2c
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c22:	2300      	movs	r3, #0
 8000c24:	633b      	str	r3, [r7, #48]	; 0x30
	  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	485f      	ldr	r0, [pc, #380]	; (8000dac <MX_GPIO_Init+0x29c>)
 8000c2e:	f004 fb99 	bl	8005364 <HAL_GPIO_Init>
//	  GPIO_InitStruct.Pull = GPIO_NOPULL;
//	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

	  /*Configure GPIO pins : MUX_SELECT_Pin*/
	  GPIO_InitStruct.Pin = MUX_SELECT_Pin;
 8000c32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c36:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	62bb      	str	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c40:	2300      	movs	r3, #0
 8000c42:	633b      	str	r3, [r7, #48]	; 0x30
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4859      	ldr	r0, [pc, #356]	; (8000db0 <MX_GPIO_Init+0x2a0>)
 8000c4c:	f004 fb8a 	bl	8005364 <HAL_GPIO_Init>

	  HAL_GPIO_WritePin(MUX_SELECT_GPIO_Port, MUX_SELECT_Pin, GPIO_PIN_RESET); //Dry contact board controls the relays
 8000c50:	2200      	movs	r2, #0
 8000c52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c56:	4856      	ldr	r0, [pc, #344]	; (8000db0 <MX_GPIO_Init+0x2a0>)
 8000c58:	f004 fe2e 	bl	80058b8 <HAL_GPIO_WritePin>

	  /*Configure GPIO pins : GREEN_LED2_CNTRL_Pin */
	  GPIO_InitStruct.Pin = GREEN_LED2_CNTRL_Pin;
 8000c5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c60:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c62:	2301      	movs	r3, #1
 8000c64:	62bb      	str	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	62fb      	str	r3, [r7, #44]	; 0x2c
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	633b      	str	r3, [r7, #48]	; 0x30
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c72:	4619      	mov	r1, r3
 8000c74:	484e      	ldr	r0, [pc, #312]	; (8000db0 <MX_GPIO_Init+0x2a0>)
 8000c76:	f004 fb75 	bl	8005364 <HAL_GPIO_Init>

	  /*Configure GPIO pins : TAG_READER_RESETn*/
	  GPIO_InitStruct.Pin = TAG_READER_RESETn_Pin;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	62bb      	str	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c82:	2301      	movs	r3, #1
 8000c84:	62fb      	str	r3, [r7, #44]	; 0x2c
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c86:	2300      	movs	r3, #0
 8000c88:	633b      	str	r3, [r7, #48]	; 0x30
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4847      	ldr	r0, [pc, #284]	; (8000db0 <MX_GPIO_Init+0x2a0>)
 8000c92:	f004 fb67 	bl	8005364 <HAL_GPIO_Init>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(TAG_READER_RESETn_GPIO_Port, TAG_READER_RESETn_Pin, GPIO_PIN_RESET);
 8000c96:	2200      	movs	r2, #0
 8000c98:	2101      	movs	r1, #1
 8000c9a:	4845      	ldr	r0, [pc, #276]	; (8000db0 <MX_GPIO_Init+0x2a0>)
 8000c9c:	f004 fe0c 	bl	80058b8 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8000ca0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ca4:	f001 f882 	bl	8001dac <HAL_Delay>
	  HAL_GPIO_WritePin(TAG_READER_RESETn_GPIO_Port, TAG_READER_RESETn_Pin, GPIO_PIN_SET);
 8000ca8:	2201      	movs	r2, #1
 8000caa:	2101      	movs	r1, #1
 8000cac:	4840      	ldr	r0, [pc, #256]	; (8000db0 <MX_GPIO_Init+0x2a0>)
 8000cae:	f004 fe03 	bl	80058b8 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8000cb2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cb6:	f001 f879 	bl	8001dac <HAL_Delay>

	  /*Configure GPIO pins : OPTO2_MCU_Pin OPTO3_MCU_Pin OPTO4_MCU_Pin EN_DCDC1_MCU_Pin
	                           EN_DCDC2_MCU_Pin */
	  GPIO_InitStruct.Pin = OPTO2_MCU_Pin|OPTO3_MCU_Pin|OPTO4_MCU_Pin|EN_DCDC1_MCU_Pin
 8000cba:	237c      	movs	r3, #124	; 0x7c
 8000cbc:	627b      	str	r3, [r7, #36]	; 0x24
	                          |EN_DCDC2_MCU_Pin;
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	62bb      	str	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	633b      	str	r3, [r7, #48]	; 0x30
	  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000cca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4838      	ldr	r0, [pc, #224]	; (8000db4 <MX_GPIO_Init+0x2a4>)
 8000cd2:	f004 fb47 	bl	8005364 <HAL_GPIO_Init>
//	  /*Configure GPIO pin Output Level */
//	  HAL_GPIO_WritePin(GPIOF, OPTO2_MCU_Pin|OPTO3_MCU_Pin|OPTO4_MCU_Pin|EN_DCDC1_MCU_Pin
//	 	                          |EN_DCDC2_MCU_Pin, GPIO_PIN_RESET);

	  /*Configure GPIO pin : RF_SW_CNTRL_Pin */
	  GPIO_InitStruct.Pin = RF_SW_CNTRL_Pin;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	62bb      	str	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	633b      	str	r3, [r7, #48]	; 0x30
	  HAL_GPIO_Init(RF_SW_CNTRL_GPIO_Port, &GPIO_InitStruct);
 8000ce6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cea:	4619      	mov	r1, r3
 8000cec:	4832      	ldr	r0, [pc, #200]	; (8000db8 <MX_GPIO_Init+0x2a8>)
 8000cee:	f004 fb39 	bl	8005364 <HAL_GPIO_Init>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(RF_SW_CNTRL_GPIO_Port, RF_SW_CNTRL_Pin, GPIO_PIN_RESET);  // RF swicth path is LoRA path when this this pin is high otherwise the path is for RFID Out
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2101      	movs	r1, #1
 8000cf6:	4830      	ldr	r0, [pc, #192]	; (8000db8 <MX_GPIO_Init+0x2a8>)
 8000cf8:	f004 fdde 	bl	80058b8 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin : LoRa_RESETn_Pin */
	  GPIO_InitStruct.Pin = LoRa_RESETn_Pin;
 8000cfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d00:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d02:	2301      	movs	r3, #1
 8000d04:	62bb      	str	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	62fb      	str	r3, [r7, #44]	; 0x2c
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	633b      	str	r3, [r7, #48]	; 0x30
	  HAL_GPIO_Init(LoRa_RESETn_GPIO_Port, &GPIO_InitStruct);
 8000d0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d12:	4619      	mov	r1, r3
 8000d14:	4829      	ldr	r0, [pc, #164]	; (8000dbc <MX_GPIO_Init+0x2ac>)
 8000d16:	f004 fb25 	bl	8005364 <HAL_GPIO_Init>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(LoRa_RESETn_GPIO_Port, LoRa_RESETn_Pin, GPIO_PIN_SET);
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d20:	4826      	ldr	r0, [pc, #152]	; (8000dbc <MX_GPIO_Init+0x2ac>)
 8000d22:	f004 fdc9 	bl	80058b8 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin : RED_LED_ALRM_Pin */
	  GPIO_InitStruct.Pin = RED_LED_ALRM_Pin;
 8000d26:	2320      	movs	r3, #32
 8000d28:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	62bb      	str	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	62fb      	str	r3, [r7, #44]	; 0x2c
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d32:	2300      	movs	r3, #0
 8000d34:	633b      	str	r3, [r7, #48]	; 0x30
	  HAL_GPIO_Init(RED_LED_ALRM_GPIO_Port, &GPIO_InitStruct);
 8000d36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4820      	ldr	r0, [pc, #128]	; (8000dc0 <MX_GPIO_Init+0x2b0>)
 8000d3e:	f004 fb11 	bl	8005364 <HAL_GPIO_Init>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(RED_LED_ALRM_GPIO_Port, RED_LED_ALRM_Pin, GPIO_PIN_RESET);
 8000d42:	2200      	movs	r2, #0
 8000d44:	2120      	movs	r1, #32
 8000d46:	481e      	ldr	r0, [pc, #120]	; (8000dc0 <MX_GPIO_Init+0x2b0>)
 8000d48:	f004 fdb6 	bl	80058b8 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin : GREEN_LED1_CNTRL_Pin */
	  GPIO_InitStruct.Pin = GREEN_LED1_CNTRL_Pin;
 8000d4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d50:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d52:	2301      	movs	r3, #1
 8000d54:	62bb      	str	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	62fb      	str	r3, [r7, #44]	; 0x2c
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	633b      	str	r3, [r7, #48]	; 0x30
	  HAL_GPIO_Init(GREEN_LED1_CNTRL_GPIO_Port, &GPIO_InitStruct);
 8000d5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d62:	4619      	mov	r1, r3
 8000d64:	4817      	ldr	r0, [pc, #92]	; (8000dc4 <MX_GPIO_Init+0x2b4>)
 8000d66:	f004 fafd 	bl	8005364 <HAL_GPIO_Init>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GREEN_LED1_CNTRL_GPIO_Port, GREEN_LED1_CNTRL_Pin, GPIO_PIN_RESET);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d70:	4814      	ldr	r0, [pc, #80]	; (8000dc4 <MX_GPIO_Init+0x2b4>)
 8000d72:	f004 fda1 	bl	80058b8 <HAL_GPIO_WritePin>

	  /*Configure GPIO pins : GREEN_LED2_CNTRL_Pin */
	  GPIO_InitStruct.Pin = GREEN_LED2_CNTRL_Pin;
 8000d76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d7a:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	62bb      	str	r3, [r7, #40]	; 0x28
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	62fb      	str	r3, [r7, #44]	; 0x2c
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d84:	2300      	movs	r3, #0
 8000d86:	633b      	str	r3, [r7, #48]	; 0x30
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4808      	ldr	r0, [pc, #32]	; (8000db0 <MX_GPIO_Init+0x2a0>)
 8000d90:	f004 fae8 	bl	8005364 <HAL_GPIO_Init>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GREEN_LED2_CNTRL_GPIO_Port, GREEN_LED2_CNTRL_Pin, GPIO_PIN_RESET);
 8000d94:	2200      	movs	r2, #0
 8000d96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d9a:	4805      	ldr	r0, [pc, #20]	; (8000db0 <MX_GPIO_Init+0x2a0>)
 8000d9c:	f004 fd8c 	bl	80058b8 <HAL_GPIO_WritePin>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
}
 8000da0:	bf00      	nop
 8000da2:	3738      	adds	r7, #56	; 0x38
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	58024400 	.word	0x58024400
 8000dac:	58021000 	.word	0x58021000
 8000db0:	58020800 	.word	0x58020800
 8000db4:	58021400 	.word	0x58021400
 8000db8:	58020400 	.word	0x58020400
 8000dbc:	58020c00 	.word	0x58020c00
 8000dc0:	58021800 	.word	0x58021800
 8000dc4:	58020000 	.word	0x58020000

08000dc8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
//  udp_connect(my_udp, &PC_IPADDR, 8);
//  struct pbuf* udp_buffer = NULL;
//  UNLOCK_TCPIP_CORE();


  osDelay(5000);
 8000dd0:	f241 3088 	movw	r0, #5000	; 0x1388
 8000dd4:	f00a fbe2 	bl	800b59c <osDelay>
  /* Infinite loop */
  for(;;)
  {

	HAL_GPIO_TogglePin(GREEN_LED1_CNTRL_GPIO_Port, GREEN_LED1_CNTRL_Pin);
 8000dd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ddc:	4806      	ldr	r0, [pc, #24]	; (8000df8 <StartDefaultTask+0x30>)
 8000dde:	f004 fd84 	bl	80058ea <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GREEN_LED2_CNTRL_GPIO_Port, GREEN_LED2_CNTRL_Pin);
 8000de2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000de6:	4805      	ldr	r0, [pc, #20]	; (8000dfc <StartDefaultTask+0x34>)
 8000de8:	f004 fd7f 	bl	80058ea <HAL_GPIO_TogglePin>
//		memcpy(udp_buffer->payload, message, strlen(message));
//		udp_send(my_udp, udp_buffer);
//		pbuf_free(udp_buffer);
//	 }

    osDelay(1000);
 8000dec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000df0:	f00a fbd4 	bl	800b59c <osDelay>
	HAL_GPIO_TogglePin(GREEN_LED1_CNTRL_GPIO_Port, GREEN_LED1_CNTRL_Pin);
 8000df4:	e7f0      	b.n	8000dd8 <StartDefaultTask+0x10>
 8000df6:	bf00      	nop
 8000df8:	58020000 	.word	0x58020000
 8000dfc:	58020800 	.word	0x58020800

08000e00 <MainTaskInit>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MainTaskInit */
void MainTaskInit(void *argument)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08c      	sub	sp, #48	; 0x30
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]

   volatile uint32_t odr;
   volatile uint32_t flag = false;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	60fb      	str	r3, [r7, #12]


	//request RFID Module info
  //   SetUpRFIDreader();

	status = HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *)aRxBuffer, RxBuf_SIZE);
 8000e0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e10:	4967      	ldr	r1, [pc, #412]	; (8000fb0 <MainTaskInit+0x1b0>)
 8000e12:	4868      	ldr	r0, [pc, #416]	; (8000fb4 <MainTaskInit+0x1b4>)
 8000e14:	f009 ff6a 	bl	800acec <HAL_UARTEx_ReceiveToIdle_DMA>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if(status!= HAL_OK)
 8000e1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d02a      	beq.n	8000e7c <MainTaskInit+0x7c>
	{

			if(huart1.ReceptionType != HAL_UART_RECEPTION_TOIDLE)
 8000e26:	4b63      	ldr	r3, [pc, #396]	; (8000fb4 <MainTaskInit+0x1b4>)
 8000e28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d023      	beq.n	8000e76 <MainTaskInit+0x76>
			{
				printf("huart1.ReceptionType is set to 0; it will be set to 1 \n\r");
 8000e2e:	4862      	ldr	r0, [pc, #392]	; (8000fb8 <MainTaskInit+0x1b8>)
 8000e30:	f00d fe4e 	bl	800ead0 <iprintf>

				huart1.ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8000e34:	4b5f      	ldr	r3, [pc, #380]	; (8000fb4 <MainTaskInit+0x1b4>)
 8000e36:	2201      	movs	r2, #1
 8000e38:	66da      	str	r2, [r3, #108]	; 0x6c
			    __HAL_UART_CLEAR_FLAG(&huart1, UART_CLEAR_IDLEF);
 8000e3a:	4b5e      	ldr	r3, [pc, #376]	; (8000fb4 <MainTaskInit+0x1b4>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	2210      	movs	r2, #16
 8000e40:	621a      	str	r2, [r3, #32]
			     ATOMIC_SET_BIT(huart1.Instance->CR1, USART_CR1_IDLEIE);
 8000e42:	4b5c      	ldr	r3, [pc, #368]	; (8000fb4 <MainTaskInit+0x1b4>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	e853 3f00 	ldrex	r3, [r3]
 8000e4e:	617b      	str	r3, [r7, #20]
   return(result);
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	f043 0310 	orr.w	r3, r3, #16
 8000e56:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e58:	4b56      	ldr	r3, [pc, #344]	; (8000fb4 <MainTaskInit+0x1b4>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e60:	627b      	str	r3, [r7, #36]	; 0x24
 8000e62:	623a      	str	r2, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000e64:	6a39      	ldr	r1, [r7, #32]
 8000e66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e68:	e841 2300 	strex	r3, r2, [r1]
 8000e6c:	61fb      	str	r3, [r7, #28]
   return(result);
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d1e6      	bne.n	8000e42 <MainTaskInit+0x42>
 8000e74:	e002      	b.n	8000e7c <MainTaskInit+0x7c>
			}
			else
			{
			  printf("DMA Error1 \n\r");
 8000e76:	4851      	ldr	r0, [pc, #324]	; (8000fbc <MainTaskInit+0x1bc>)
 8000e78:	f00d fe2a 	bl	800ead0 <iprintf>
			}
	}

	__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000e7c:	4b50      	ldr	r3, [pc, #320]	; (8000fc0 <MainTaskInit+0x1c0>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a50      	ldr	r2, [pc, #320]	; (8000fc4 <MainTaskInit+0x1c4>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d04a      	beq.n	8000f1c <MainTaskInit+0x11c>
 8000e86:	4b4e      	ldr	r3, [pc, #312]	; (8000fc0 <MainTaskInit+0x1c0>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a4f      	ldr	r2, [pc, #316]	; (8000fc8 <MainTaskInit+0x1c8>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d045      	beq.n	8000f1c <MainTaskInit+0x11c>
 8000e90:	4b4b      	ldr	r3, [pc, #300]	; (8000fc0 <MainTaskInit+0x1c0>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a4d      	ldr	r2, [pc, #308]	; (8000fcc <MainTaskInit+0x1cc>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d040      	beq.n	8000f1c <MainTaskInit+0x11c>
 8000e9a:	4b49      	ldr	r3, [pc, #292]	; (8000fc0 <MainTaskInit+0x1c0>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a4c      	ldr	r2, [pc, #304]	; (8000fd0 <MainTaskInit+0x1d0>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d03b      	beq.n	8000f1c <MainTaskInit+0x11c>
 8000ea4:	4b46      	ldr	r3, [pc, #280]	; (8000fc0 <MainTaskInit+0x1c0>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a4a      	ldr	r2, [pc, #296]	; (8000fd4 <MainTaskInit+0x1d4>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d036      	beq.n	8000f1c <MainTaskInit+0x11c>
 8000eae:	4b44      	ldr	r3, [pc, #272]	; (8000fc0 <MainTaskInit+0x1c0>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a49      	ldr	r2, [pc, #292]	; (8000fd8 <MainTaskInit+0x1d8>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d031      	beq.n	8000f1c <MainTaskInit+0x11c>
 8000eb8:	4b41      	ldr	r3, [pc, #260]	; (8000fc0 <MainTaskInit+0x1c0>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a47      	ldr	r2, [pc, #284]	; (8000fdc <MainTaskInit+0x1dc>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d02c      	beq.n	8000f1c <MainTaskInit+0x11c>
 8000ec2:	4b3f      	ldr	r3, [pc, #252]	; (8000fc0 <MainTaskInit+0x1c0>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a46      	ldr	r2, [pc, #280]	; (8000fe0 <MainTaskInit+0x1e0>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d027      	beq.n	8000f1c <MainTaskInit+0x11c>
 8000ecc:	4b3c      	ldr	r3, [pc, #240]	; (8000fc0 <MainTaskInit+0x1c0>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a44      	ldr	r2, [pc, #272]	; (8000fe4 <MainTaskInit+0x1e4>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d022      	beq.n	8000f1c <MainTaskInit+0x11c>
 8000ed6:	4b3a      	ldr	r3, [pc, #232]	; (8000fc0 <MainTaskInit+0x1c0>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a43      	ldr	r2, [pc, #268]	; (8000fe8 <MainTaskInit+0x1e8>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d01d      	beq.n	8000f1c <MainTaskInit+0x11c>
 8000ee0:	4b37      	ldr	r3, [pc, #220]	; (8000fc0 <MainTaskInit+0x1c0>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a41      	ldr	r2, [pc, #260]	; (8000fec <MainTaskInit+0x1ec>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d018      	beq.n	8000f1c <MainTaskInit+0x11c>
 8000eea:	4b35      	ldr	r3, [pc, #212]	; (8000fc0 <MainTaskInit+0x1c0>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a40      	ldr	r2, [pc, #256]	; (8000ff0 <MainTaskInit+0x1f0>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d013      	beq.n	8000f1c <MainTaskInit+0x11c>
 8000ef4:	4b32      	ldr	r3, [pc, #200]	; (8000fc0 <MainTaskInit+0x1c0>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a3e      	ldr	r2, [pc, #248]	; (8000ff4 <MainTaskInit+0x1f4>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d00e      	beq.n	8000f1c <MainTaskInit+0x11c>
 8000efe:	4b30      	ldr	r3, [pc, #192]	; (8000fc0 <MainTaskInit+0x1c0>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a3d      	ldr	r2, [pc, #244]	; (8000ff8 <MainTaskInit+0x1f8>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d009      	beq.n	8000f1c <MainTaskInit+0x11c>
 8000f08:	4b2d      	ldr	r3, [pc, #180]	; (8000fc0 <MainTaskInit+0x1c0>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a3b      	ldr	r2, [pc, #236]	; (8000ffc <MainTaskInit+0x1fc>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d004      	beq.n	8000f1c <MainTaskInit+0x11c>
 8000f12:	4b2b      	ldr	r3, [pc, #172]	; (8000fc0 <MainTaskInit+0x1c0>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a3a      	ldr	r2, [pc, #232]	; (8001000 <MainTaskInit+0x200>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d108      	bne.n	8000f2e <MainTaskInit+0x12e>
 8000f1c:	4b28      	ldr	r3, [pc, #160]	; (8000fc0 <MainTaskInit+0x1c0>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	4b27      	ldr	r3, [pc, #156]	; (8000fc0 <MainTaskInit+0x1c0>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f022 0208 	bic.w	r2, r2, #8
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	e007      	b.n	8000f3e <MainTaskInit+0x13e>
 8000f2e:	4b24      	ldr	r3, [pc, #144]	; (8000fc0 <MainTaskInit+0x1c0>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	4b22      	ldr	r3, [pc, #136]	; (8000fc0 <MainTaskInit+0x1c0>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f022 0204 	bic.w	r2, r2, #4
 8000f3c:	601a      	str	r2, [r3, #0]


   QueryLoRaModule();
 8000f3e:	f00a f995 	bl	800b26c <QueryLoRaModule>
  {


	do
	{
	   HAL_GPIO_WritePin(RF_SW_CNTRL_GPIO_Port, RF_SW_CNTRL_Pin, GPIO_PIN_RESET);
 8000f42:	2200      	movs	r2, #0
 8000f44:	2101      	movs	r1, #1
 8000f46:	482f      	ldr	r0, [pc, #188]	; (8001004 <MainTaskInit+0x204>)
 8000f48:	f004 fcb6 	bl	80058b8 <HAL_GPIO_WritePin>
	   odr = GPIOB->ODR;
 8000f4c:	4b2d      	ldr	r3, [pc, #180]	; (8001004 <MainTaskInit+0x204>)
 8000f4e:	695b      	ldr	r3, [r3, #20]
 8000f50:	613b      	str	r3, [r7, #16]
	   flag = (odr)& (0x00000001);
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	f003 0301 	and.w	r3, r3, #1
 8000f58:	60fb      	str	r3, [r7, #12]
	   HAL_Delay(100);
 8000f5a:	2064      	movs	r0, #100	; 0x64
 8000f5c:	f000 ff26 	bl	8001dac <HAL_Delay>
	}while(flag == 1);
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d0ed      	beq.n	8000f42 <MainTaskInit+0x142>


	RxTagsDataCompleted = false;
 8000f66:	4b28      	ldr	r3, [pc, #160]	; (8001008 <MainTaskInit+0x208>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	701a      	strb	r2, [r3, #0]
	//SetUpRFIDreader();
	ScanForTags();
 8000f6c:	f00c ffd0 	bl	800df10 <ScanForTags>

    osDelay(2000);
 8000f70:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f74:	f00a fb12 	bl	800b59c <osDelay>

	do
    {
	   HAL_GPIO_WritePin(RF_SW_CNTRL_GPIO_Port, RF_SW_CNTRL_Pin, GPIO_PIN_SET);
 8000f78:	2201      	movs	r2, #1
 8000f7a:	2101      	movs	r1, #1
 8000f7c:	4821      	ldr	r0, [pc, #132]	; (8001004 <MainTaskInit+0x204>)
 8000f7e:	f004 fc9b 	bl	80058b8 <HAL_GPIO_WritePin>
	   odr = GPIOB->ODR;
 8000f82:	4b20      	ldr	r3, [pc, #128]	; (8001004 <MainTaskInit+0x204>)
 8000f84:	695b      	ldr	r3, [r3, #20]
 8000f86:	613b      	str	r3, [r7, #16]
	   flag = (odr)& (0x00000001);
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	60fb      	str	r3, [r7, #12]
	   HAL_Delay(100);
 8000f90:	2064      	movs	r0, #100	; 0x64
 8000f92:	f000 ff0b 	bl	8001dac <HAL_Delay>
	}while(flag == 0);
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d0ed      	beq.n	8000f78 <MainTaskInit+0x178>

	ReadRcvMsgRRSI();
 8000f9c:	f00a f9a6 	bl	800b2ec <ReadRcvMsgRRSI>
	SendLoraMsg();
 8000fa0:	f00a f9b8 	bl	800b314 <SendLoraMsg>

    osDelay(2000);
 8000fa4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000fa8:	f00a faf8 	bl	800b59c <osDelay>
  for(;;)
 8000fac:	e7c9      	b.n	8000f42 <MainTaskInit+0x142>
 8000fae:	bf00      	nop
 8000fb0:	30004000 	.word	0x30004000
 8000fb4:	24000324 	.word	0x24000324
 8000fb8:	08010d70 	.word	0x08010d70
 8000fbc:	08010dac 	.word	0x08010dac
 8000fc0:	240003b8 	.word	0x240003b8
 8000fc4:	40020010 	.word	0x40020010
 8000fc8:	40020028 	.word	0x40020028
 8000fcc:	40020040 	.word	0x40020040
 8000fd0:	40020058 	.word	0x40020058
 8000fd4:	40020070 	.word	0x40020070
 8000fd8:	40020088 	.word	0x40020088
 8000fdc:	400200a0 	.word	0x400200a0
 8000fe0:	400200b8 	.word	0x400200b8
 8000fe4:	40020410 	.word	0x40020410
 8000fe8:	40020428 	.word	0x40020428
 8000fec:	40020440 	.word	0x40020440
 8000ff0:	40020458 	.word	0x40020458
 8000ff4:	40020470 	.word	0x40020470
 8000ff8:	40020488 	.word	0x40020488
 8000ffc:	400204a0 	.word	0x400204a0
 8001000:	400204b8 	.word	0x400204b8
 8001004:	58020400 	.word	0x58020400
 8001008:	24001479 	.word	0x24001479

0800100c <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
	  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001012:	463b      	mov	r3, r7
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]

	  /* Disables the MPU */
	  HAL_MPU_Disable();
 800101e:	f000 fffb 	bl	8002018 <HAL_MPU_Disable>

	  /** Initializes and configures the Region and the memory to be protected
	  */
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001022:	2301      	movs	r3, #1
 8001024:	703b      	strb	r3, [r7, #0]
	  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001026:	2300      	movs	r3, #0
 8001028:	707b      	strb	r3, [r7, #1]
	  MPU_InitStruct.BaseAddress = 0x0;
 800102a:	2300      	movs	r3, #0
 800102c:	607b      	str	r3, [r7, #4]
	  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800102e:	231f      	movs	r3, #31
 8001030:	723b      	strb	r3, [r7, #8]
	  MPU_InitStruct.SubRegionDisable = 0x87;
 8001032:	2387      	movs	r3, #135	; 0x87
 8001034:	727b      	strb	r3, [r7, #9]
	  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001036:	2300      	movs	r3, #0
 8001038:	72bb      	strb	r3, [r7, #10]
	  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800103a:	2300      	movs	r3, #0
 800103c:	72fb      	strb	r3, [r7, #11]
	  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800103e:	2301      	movs	r3, #1
 8001040:	733b      	strb	r3, [r7, #12]
	  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001042:	2301      	movs	r3, #1
 8001044:	737b      	strb	r3, [r7, #13]
	  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001046:	2300      	movs	r3, #0
 8001048:	73bb      	strb	r3, [r7, #14]
	  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800104a:	2300      	movs	r3, #0
 800104c:	73fb      	strb	r3, [r7, #15]

	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800104e:	463b      	mov	r3, r7
 8001050:	4618      	mov	r0, r3
 8001052:	f001 f819 	bl	8002088 <HAL_MPU_ConfigRegion>

	  /** Initializes and configures the Region and the memory to be protected
	  */
	  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8001056:	2301      	movs	r3, #1
 8001058:	707b      	strb	r3, [r7, #1]
	  MPU_InitStruct.BaseAddress = 0x30000000;
 800105a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800105e:	607b      	str	r3, [r7, #4]
	  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8001060:	230e      	movs	r3, #14
 8001062:	723b      	strb	r3, [r7, #8]
	  MPU_InitStruct.SubRegionDisable = 0x0;
 8001064:	2300      	movs	r3, #0
 8001066:	727b      	strb	r3, [r7, #9]
	  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8001068:	2301      	movs	r3, #1
 800106a:	72bb      	strb	r3, [r7, #10]
	  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800106c:	2303      	movs	r3, #3
 800106e:	72fb      	strb	r3, [r7, #11]
	  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8001070:	2300      	movs	r3, #0
 8001072:	737b      	strb	r3, [r7, #13]

	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001074:	463b      	mov	r3, r7
 8001076:	4618      	mov	r0, r3
 8001078:	f001 f806 	bl	8002088 <HAL_MPU_ConfigRegion>

	  /** Initializes and configures the Region and the memory to be protected
	  */
	  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 800107c:	2302      	movs	r3, #2
 800107e:	707b      	strb	r3, [r7, #1]
	  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 8001080:	2308      	movs	r3, #8
 8001082:	723b      	strb	r3, [r7, #8]
	  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001084:	2300      	movs	r3, #0
 8001086:	72bb      	strb	r3, [r7, #10]
	  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001088:	2301      	movs	r3, #1
 800108a:	737b      	strb	r3, [r7, #13]
	  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 800108c:	2301      	movs	r3, #1
 800108e:	73fb      	strb	r3, [r7, #15]

	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001090:	463b      	mov	r3, r7
 8001092:	4618      	mov	r0, r3
 8001094:	f000 fff8 	bl	8002088 <HAL_MPU_ConfigRegion>
	  /* Enables the MPU */
	  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001098:	2004      	movs	r0, #4
 800109a:	f000 ffd5 	bl	8002048 <HAL_MPU_Enable>

}
 800109e:	bf00      	nop
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
	...

080010a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a04      	ldr	r2, [pc, #16]	; (80010c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d101      	bne.n	80010be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80010ba:	f000 fe57 	bl	8001d6c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40001000 	.word	0x40001000

080010cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80010d0:	b672      	cpsid	i
}
 80010d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 80010d4:	e7fe      	b.n	80010d4 <Error_Handler+0x8>
	...

080010d8 <HAL_UART_TxCpltCallback>:
  * @note   This example shows a simple way to report end of DMA Tx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
	DataTransmitedFlag = true;
 80010e0:	4b04      	ldr	r3, [pc, #16]	; (80010f4 <HAL_UART_TxCpltCallback+0x1c>)
 80010e2:	2201      	movs	r2, #1
 80010e4:	701a      	strb	r2, [r3, #0]
}
 80010e6:	bf00      	nop
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	240001fa 	.word	0x240001fa

080010f8 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b08a      	sub	sp, #40	; 0x28
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	460b      	mov	r3, r1
 8001102:	807b      	strh	r3, [r7, #2]

	HAL_StatusTypeDef status;

	if (huart->Instance == USART1)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a5c      	ldr	r2, [pc, #368]	; (800127c <HAL_UARTEx_RxEventCallback+0x184>)
 800110a:	4293      	cmp	r3, r2
 800110c:	f040 80a4 	bne.w	8001258 <HAL_UARTEx_RxEventCallback+0x160>
	{

		 status = HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *)aRxBuffer, RxBuf_SIZE);
 8001110:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001114:	495a      	ldr	r1, [pc, #360]	; (8001280 <HAL_UARTEx_RxEventCallback+0x188>)
 8001116:	485b      	ldr	r0, [pc, #364]	; (8001284 <HAL_UARTEx_RxEventCallback+0x18c>)
 8001118:	f009 fde8 	bl	800acec <HAL_UARTEx_ReceiveToIdle_DMA>
 800111c:	4603      	mov	r3, r0
 800111e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		 if(status!= HAL_OK)
 8001122:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001126:	2b00      	cmp	r3, #0
 8001128:	d02a      	beq.n	8001180 <HAL_UARTEx_RxEventCallback+0x88>
		 {
			if(huart1.ReceptionType != HAL_UART_RECEPTION_TOIDLE)
 800112a:	4b56      	ldr	r3, [pc, #344]	; (8001284 <HAL_UARTEx_RxEventCallback+0x18c>)
 800112c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800112e:	2b01      	cmp	r3, #1
 8001130:	d023      	beq.n	800117a <HAL_UARTEx_RxEventCallback+0x82>
			{
				printf("huart1.ReceptionType is set to 0; it will be set to 1 \n\r");
 8001132:	4855      	ldr	r0, [pc, #340]	; (8001288 <HAL_UARTEx_RxEventCallback+0x190>)
 8001134:	f00d fccc 	bl	800ead0 <iprintf>

				huart1.ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8001138:	4b52      	ldr	r3, [pc, #328]	; (8001284 <HAL_UARTEx_RxEventCallback+0x18c>)
 800113a:	2201      	movs	r2, #1
 800113c:	66da      	str	r2, [r3, #108]	; 0x6c
				__HAL_UART_CLEAR_FLAG(&huart1, UART_CLEAR_IDLEF);
 800113e:	4b51      	ldr	r3, [pc, #324]	; (8001284 <HAL_UARTEx_RxEventCallback+0x18c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	2210      	movs	r2, #16
 8001144:	621a      	str	r2, [r3, #32]
				 ATOMIC_SET_BIT(huart1.Instance->CR1, USART_CR1_IDLEIE);
 8001146:	4b4f      	ldr	r3, [pc, #316]	; (8001284 <HAL_UARTEx_RxEventCallback+0x18c>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	e853 3f00 	ldrex	r3, [r3]
 8001152:	60fb      	str	r3, [r7, #12]
   return(result);
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	f043 0310 	orr.w	r3, r3, #16
 800115a:	623b      	str	r3, [r7, #32]
 800115c:	4b49      	ldr	r3, [pc, #292]	; (8001284 <HAL_UARTEx_RxEventCallback+0x18c>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	461a      	mov	r2, r3
 8001162:	6a3b      	ldr	r3, [r7, #32]
 8001164:	61fb      	str	r3, [r7, #28]
 8001166:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001168:	69b9      	ldr	r1, [r7, #24]
 800116a:	69fa      	ldr	r2, [r7, #28]
 800116c:	e841 2300 	strex	r3, r2, [r1]
 8001170:	617b      	str	r3, [r7, #20]
   return(result);
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d1e6      	bne.n	8001146 <HAL_UARTEx_RxEventCallback+0x4e>
 8001178:	e002      	b.n	8001180 <HAL_UARTEx_RxEventCallback+0x88>
			}
			else
			{
			  printf("DMA Error1 \n\r");
 800117a:	4844      	ldr	r0, [pc, #272]	; (800128c <HAL_UARTEx_RxEventCallback+0x194>)
 800117c:	f00d fca8 	bl	800ead0 <iprintf>
			}
		 }

		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001180:	4b43      	ldr	r3, [pc, #268]	; (8001290 <HAL_UARTEx_RxEventCallback+0x198>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a43      	ldr	r2, [pc, #268]	; (8001294 <HAL_UARTEx_RxEventCallback+0x19c>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d04a      	beq.n	8001220 <HAL_UARTEx_RxEventCallback+0x128>
 800118a:	4b41      	ldr	r3, [pc, #260]	; (8001290 <HAL_UARTEx_RxEventCallback+0x198>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a42      	ldr	r2, [pc, #264]	; (8001298 <HAL_UARTEx_RxEventCallback+0x1a0>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d045      	beq.n	8001220 <HAL_UARTEx_RxEventCallback+0x128>
 8001194:	4b3e      	ldr	r3, [pc, #248]	; (8001290 <HAL_UARTEx_RxEventCallback+0x198>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a40      	ldr	r2, [pc, #256]	; (800129c <HAL_UARTEx_RxEventCallback+0x1a4>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d040      	beq.n	8001220 <HAL_UARTEx_RxEventCallback+0x128>
 800119e:	4b3c      	ldr	r3, [pc, #240]	; (8001290 <HAL_UARTEx_RxEventCallback+0x198>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a3f      	ldr	r2, [pc, #252]	; (80012a0 <HAL_UARTEx_RxEventCallback+0x1a8>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d03b      	beq.n	8001220 <HAL_UARTEx_RxEventCallback+0x128>
 80011a8:	4b39      	ldr	r3, [pc, #228]	; (8001290 <HAL_UARTEx_RxEventCallback+0x198>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a3d      	ldr	r2, [pc, #244]	; (80012a4 <HAL_UARTEx_RxEventCallback+0x1ac>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d036      	beq.n	8001220 <HAL_UARTEx_RxEventCallback+0x128>
 80011b2:	4b37      	ldr	r3, [pc, #220]	; (8001290 <HAL_UARTEx_RxEventCallback+0x198>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a3c      	ldr	r2, [pc, #240]	; (80012a8 <HAL_UARTEx_RxEventCallback+0x1b0>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d031      	beq.n	8001220 <HAL_UARTEx_RxEventCallback+0x128>
 80011bc:	4b34      	ldr	r3, [pc, #208]	; (8001290 <HAL_UARTEx_RxEventCallback+0x198>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a3a      	ldr	r2, [pc, #232]	; (80012ac <HAL_UARTEx_RxEventCallback+0x1b4>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d02c      	beq.n	8001220 <HAL_UARTEx_RxEventCallback+0x128>
 80011c6:	4b32      	ldr	r3, [pc, #200]	; (8001290 <HAL_UARTEx_RxEventCallback+0x198>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a39      	ldr	r2, [pc, #228]	; (80012b0 <HAL_UARTEx_RxEventCallback+0x1b8>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d027      	beq.n	8001220 <HAL_UARTEx_RxEventCallback+0x128>
 80011d0:	4b2f      	ldr	r3, [pc, #188]	; (8001290 <HAL_UARTEx_RxEventCallback+0x198>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a37      	ldr	r2, [pc, #220]	; (80012b4 <HAL_UARTEx_RxEventCallback+0x1bc>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d022      	beq.n	8001220 <HAL_UARTEx_RxEventCallback+0x128>
 80011da:	4b2d      	ldr	r3, [pc, #180]	; (8001290 <HAL_UARTEx_RxEventCallback+0x198>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a36      	ldr	r2, [pc, #216]	; (80012b8 <HAL_UARTEx_RxEventCallback+0x1c0>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d01d      	beq.n	8001220 <HAL_UARTEx_RxEventCallback+0x128>
 80011e4:	4b2a      	ldr	r3, [pc, #168]	; (8001290 <HAL_UARTEx_RxEventCallback+0x198>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a34      	ldr	r2, [pc, #208]	; (80012bc <HAL_UARTEx_RxEventCallback+0x1c4>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d018      	beq.n	8001220 <HAL_UARTEx_RxEventCallback+0x128>
 80011ee:	4b28      	ldr	r3, [pc, #160]	; (8001290 <HAL_UARTEx_RxEventCallback+0x198>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a33      	ldr	r2, [pc, #204]	; (80012c0 <HAL_UARTEx_RxEventCallback+0x1c8>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d013      	beq.n	8001220 <HAL_UARTEx_RxEventCallback+0x128>
 80011f8:	4b25      	ldr	r3, [pc, #148]	; (8001290 <HAL_UARTEx_RxEventCallback+0x198>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a31      	ldr	r2, [pc, #196]	; (80012c4 <HAL_UARTEx_RxEventCallback+0x1cc>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d00e      	beq.n	8001220 <HAL_UARTEx_RxEventCallback+0x128>
 8001202:	4b23      	ldr	r3, [pc, #140]	; (8001290 <HAL_UARTEx_RxEventCallback+0x198>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a30      	ldr	r2, [pc, #192]	; (80012c8 <HAL_UARTEx_RxEventCallback+0x1d0>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d009      	beq.n	8001220 <HAL_UARTEx_RxEventCallback+0x128>
 800120c:	4b20      	ldr	r3, [pc, #128]	; (8001290 <HAL_UARTEx_RxEventCallback+0x198>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a2e      	ldr	r2, [pc, #184]	; (80012cc <HAL_UARTEx_RxEventCallback+0x1d4>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d004      	beq.n	8001220 <HAL_UARTEx_RxEventCallback+0x128>
 8001216:	4b1e      	ldr	r3, [pc, #120]	; (8001290 <HAL_UARTEx_RxEventCallback+0x198>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a2d      	ldr	r2, [pc, #180]	; (80012d0 <HAL_UARTEx_RxEventCallback+0x1d8>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d108      	bne.n	8001232 <HAL_UARTEx_RxEventCallback+0x13a>
 8001220:	4b1b      	ldr	r3, [pc, #108]	; (8001290 <HAL_UARTEx_RxEventCallback+0x198>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	4b1a      	ldr	r3, [pc, #104]	; (8001290 <HAL_UARTEx_RxEventCallback+0x198>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f022 0208 	bic.w	r2, r2, #8
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	e007      	b.n	8001242 <HAL_UARTEx_RxEventCallback+0x14a>
 8001232:	4b17      	ldr	r3, [pc, #92]	; (8001290 <HAL_UARTEx_RxEventCallback+0x198>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	4b15      	ldr	r3, [pc, #84]	; (8001290 <HAL_UARTEx_RxEventCallback+0x198>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f022 0204 	bic.w	r2, r2, #4
 8001240:	601a      	str	r2, [r3, #0]


		UpdateRxDataSize(&Size);
 8001242:	1cbb      	adds	r3, r7, #2
 8001244:	4618      	mov	r0, r3
 8001246:	f000 f84d 	bl	80012e4 <UpdateRxDataSize>

		ProcessReceivedData(Size);
 800124a:	887b      	ldrh	r3, [r7, #2]
 800124c:	4618      	mov	r0, r3
 800124e:	f00c fd5f 	bl	800dd10 <ProcessReceivedData>

		DataReceivedFlag = true;
 8001252:	4b20      	ldr	r3, [pc, #128]	; (80012d4 <HAL_UARTEx_RxEventCallback+0x1dc>)
 8001254:	2201      	movs	r2, #1
 8001256:	701a      	strb	r2, [r3, #0]
	}

	if (huart->Instance == UART4)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a1e      	ldr	r2, [pc, #120]	; (80012d8 <HAL_UARTEx_RxEventCallback+0x1e0>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d107      	bne.n	8001272 <HAL_UARTEx_RxEventCallback+0x17a>
	{
		LoRaDataReceivedFlag = true;
 8001262:	4b1e      	ldr	r3, [pc, #120]	; (80012dc <HAL_UARTEx_RxEventCallback+0x1e4>)
 8001264:	2201      	movs	r2, #1
 8001266:	701a      	strb	r2, [r3, #0]
		ProcessRxLoRaMsg((uint8_t*)LoRaRxBuffer, Size);
 8001268:	887b      	ldrh	r3, [r7, #2]
 800126a:	4619      	mov	r1, r3
 800126c:	481c      	ldr	r0, [pc, #112]	; (80012e0 <HAL_UARTEx_RxEventCallback+0x1e8>)
 800126e:	f009 ff71 	bl	800b154 <ProcessRxLoRaMsg>
	}

}
 8001272:	bf00      	nop
 8001274:	3728      	adds	r7, #40	; 0x28
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40011000 	.word	0x40011000
 8001280:	30004000 	.word	0x30004000
 8001284:	24000324 	.word	0x24000324
 8001288:	08010d70 	.word	0x08010d70
 800128c:	08010dac 	.word	0x08010dac
 8001290:	240003b8 	.word	0x240003b8
 8001294:	40020010 	.word	0x40020010
 8001298:	40020028 	.word	0x40020028
 800129c:	40020040 	.word	0x40020040
 80012a0:	40020058 	.word	0x40020058
 80012a4:	40020070 	.word	0x40020070
 80012a8:	40020088 	.word	0x40020088
 80012ac:	400200a0 	.word	0x400200a0
 80012b0:	400200b8 	.word	0x400200b8
 80012b4:	40020410 	.word	0x40020410
 80012b8:	40020428 	.word	0x40020428
 80012bc:	40020440 	.word	0x40020440
 80012c0:	40020458 	.word	0x40020458
 80012c4:	40020470 	.word	0x40020470
 80012c8:	40020488 	.word	0x40020488
 80012cc:	400204a0 	.word	0x400204a0
 80012d0:	400204b8 	.word	0x400204b8
 80012d4:	24001478 	.word	0x24001478
 80012d8:	40004c00 	.word	0x40004c00
 80012dc:	240001fb 	.word	0x240001fb
 80012e0:	30004800 	.word	0x30004800

080012e4 <UpdateRxDataSize>:



static void UpdateRxDataSize(volatile uint16_t *Size)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]

	RxDataSize = *Size;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	881b      	ldrh	r3, [r3, #0]
 80012f0:	b29a      	uxth	r2, r3
 80012f2:	4b04      	ldr	r3, [pc, #16]	; (8001304 <UpdateRxDataSize+0x20>)
 80012f4:	801a      	strh	r2, [r3, #0]

}
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	240001f8 	.word	0x240001f8

08001308 <__io_putchar>:
PUTCHAR_PROTOTYPE
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart5, (uint8_t *)&ch, 1, 0xFFFF);
 8001310:	1d39      	adds	r1, r7, #4
 8001312:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001316:	2201      	movs	r2, #1
 8001318:	4803      	ldr	r0, [pc, #12]	; (8001328 <__io_putchar+0x20>)
 800131a:	f007 fc28 	bl	8008b6e <HAL_UART_Transmit>

  return ch;
 800131e:	687b      	ldr	r3, [r7, #4]
}
 8001320:	4618      	mov	r0, r3
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	24000290 	.word	0x24000290

0800132c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001332:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <HAL_MspInit+0x38>)
 8001334:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001338:	4a0a      	ldr	r2, [pc, #40]	; (8001364 <HAL_MspInit+0x38>)
 800133a:	f043 0302 	orr.w	r3, r3, #2
 800133e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001342:	4b08      	ldr	r3, [pc, #32]	; (8001364 <HAL_MspInit+0x38>)
 8001344:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001348:	f003 0302 	and.w	r3, r3, #2
 800134c:	607b      	str	r3, [r7, #4]
 800134e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
	    /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001350:	2200      	movs	r2, #0
 8001352:	210f      	movs	r1, #15
 8001354:	f06f 0001 	mvn.w	r0, #1
 8001358:	f000 fe28 	bl	8001fac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800135c:	bf00      	nop
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	58024400 	.word	0x58024400

08001368 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b0be      	sub	sp, #248	; 0xf8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001370:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
 800137e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001380:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001384:	22b8      	movs	r2, #184	; 0xb8
 8001386:	2100      	movs	r1, #0
 8001388:	4618      	mov	r0, r3
 800138a:	f00d fd65 	bl	800ee58 <memset>
  if(huart->Instance==UART4)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a90      	ldr	r2, [pc, #576]	; (80015d4 <HAL_UART_MspInit+0x26c>)
 8001394:	4293      	cmp	r3, r2
 8001396:	f040 80ab 	bne.w	80014f0 <HAL_UART_MspInit+0x188>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800139a:	f04f 0202 	mov.w	r2, #2
 800139e:	f04f 0300 	mov.w	r3, #0
 80013a2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80013a6:	2300      	movs	r3, #0
 80013a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013b0:	4618      	mov	r0, r3
 80013b2:	f005 fa97 	bl	80068e4 <HAL_RCCEx_PeriphCLKConfig>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 80013bc:	f7ff fe86 	bl	80010cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80013c0:	4b85      	ldr	r3, [pc, #532]	; (80015d8 <HAL_UART_MspInit+0x270>)
 80013c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013c6:	4a84      	ldr	r2, [pc, #528]	; (80015d8 <HAL_UART_MspInit+0x270>)
 80013c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80013cc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80013d0:	4b81      	ldr	r3, [pc, #516]	; (80015d8 <HAL_UART_MspInit+0x270>)
 80013d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013da:	627b      	str	r3, [r7, #36]	; 0x24
 80013dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013de:	4b7e      	ldr	r3, [pc, #504]	; (80015d8 <HAL_UART_MspInit+0x270>)
 80013e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013e4:	4a7c      	ldr	r2, [pc, #496]	; (80015d8 <HAL_UART_MspInit+0x270>)
 80013e6:	f043 0302 	orr.w	r3, r3, #2
 80013ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013ee:	4b7a      	ldr	r3, [pc, #488]	; (80015d8 <HAL_UART_MspInit+0x270>)
 80013f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013f4:	f003 0302 	and.w	r3, r3, #2
 80013f8:	623b      	str	r3, [r7, #32]
 80013fa:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013fc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001400:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001404:	2302      	movs	r3, #2
 8001406:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001410:	2300      	movs	r3, #0
 8001412:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001416:	2308      	movs	r3, #8
 8001418:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800141c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001420:	4619      	mov	r1, r3
 8001422:	486e      	ldr	r0, [pc, #440]	; (80015dc <HAL_UART_MspInit+0x274>)
 8001424:	f003 ff9e 	bl	8005364 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001428:	4b6d      	ldr	r3, [pc, #436]	; (80015e0 <HAL_UART_MspInit+0x278>)
 800142a:	4a6e      	ldr	r2, [pc, #440]	; (80015e4 <HAL_UART_MspInit+0x27c>)
 800142c:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 800142e:	4b6c      	ldr	r3, [pc, #432]	; (80015e0 <HAL_UART_MspInit+0x278>)
 8001430:	223f      	movs	r2, #63	; 0x3f
 8001432:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001434:	4b6a      	ldr	r3, [pc, #424]	; (80015e0 <HAL_UART_MspInit+0x278>)
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800143a:	4b69      	ldr	r3, [pc, #420]	; (80015e0 <HAL_UART_MspInit+0x278>)
 800143c:	2200      	movs	r2, #0
 800143e:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001440:	4b67      	ldr	r3, [pc, #412]	; (80015e0 <HAL_UART_MspInit+0x278>)
 8001442:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001446:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001448:	4b65      	ldr	r3, [pc, #404]	; (80015e0 <HAL_UART_MspInit+0x278>)
 800144a:	2200      	movs	r2, #0
 800144c:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800144e:	4b64      	ldr	r3, [pc, #400]	; (80015e0 <HAL_UART_MspInit+0x278>)
 8001450:	2200      	movs	r2, #0
 8001452:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8001454:	4b62      	ldr	r3, [pc, #392]	; (80015e0 <HAL_UART_MspInit+0x278>)
 8001456:	2200      	movs	r2, #0
 8001458:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800145a:	4b61      	ldr	r3, [pc, #388]	; (80015e0 <HAL_UART_MspInit+0x278>)
 800145c:	2200      	movs	r2, #0
 800145e:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001460:	4b5f      	ldr	r3, [pc, #380]	; (80015e0 <HAL_UART_MspInit+0x278>)
 8001462:	2200      	movs	r2, #0
 8001464:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001466:	485e      	ldr	r0, [pc, #376]	; (80015e0 <HAL_UART_MspInit+0x278>)
 8001468:	f000 fe52 	bl	8002110 <HAL_DMA_Init>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8001472:	f7ff fe2b 	bl	80010cc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a59      	ldr	r2, [pc, #356]	; (80015e0 <HAL_UART_MspInit+0x278>)
 800147a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800147e:	4a58      	ldr	r2, [pc, #352]	; (80015e0 <HAL_UART_MspInit+0x278>)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream3;
 8001484:	4b58      	ldr	r3, [pc, #352]	; (80015e8 <HAL_UART_MspInit+0x280>)
 8001486:	4a59      	ldr	r2, [pc, #356]	; (80015ec <HAL_UART_MspInit+0x284>)
 8001488:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 800148a:	4b57      	ldr	r3, [pc, #348]	; (80015e8 <HAL_UART_MspInit+0x280>)
 800148c:	2240      	movs	r2, #64	; 0x40
 800148e:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001490:	4b55      	ldr	r3, [pc, #340]	; (80015e8 <HAL_UART_MspInit+0x280>)
 8001492:	2240      	movs	r2, #64	; 0x40
 8001494:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001496:	4b54      	ldr	r3, [pc, #336]	; (80015e8 <HAL_UART_MspInit+0x280>)
 8001498:	2200      	movs	r2, #0
 800149a:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800149c:	4b52      	ldr	r3, [pc, #328]	; (80015e8 <HAL_UART_MspInit+0x280>)
 800149e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014a2:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014a4:	4b50      	ldr	r3, [pc, #320]	; (80015e8 <HAL_UART_MspInit+0x280>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014aa:	4b4f      	ldr	r3, [pc, #316]	; (80015e8 <HAL_UART_MspInit+0x280>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 80014b0:	4b4d      	ldr	r3, [pc, #308]	; (80015e8 <HAL_UART_MspInit+0x280>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80014b6:	4b4c      	ldr	r3, [pc, #304]	; (80015e8 <HAL_UART_MspInit+0x280>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014bc:	4b4a      	ldr	r3, [pc, #296]	; (80015e8 <HAL_UART_MspInit+0x280>)
 80014be:	2200      	movs	r2, #0
 80014c0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80014c2:	4849      	ldr	r0, [pc, #292]	; (80015e8 <HAL_UART_MspInit+0x280>)
 80014c4:	f000 fe24 	bl	8002110 <HAL_DMA_Init>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 80014ce:	f7ff fdfd 	bl	80010cc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a44      	ldr	r2, [pc, #272]	; (80015e8 <HAL_UART_MspInit+0x280>)
 80014d6:	67da      	str	r2, [r3, #124]	; 0x7c
 80014d8:	4a43      	ldr	r2, [pc, #268]	; (80015e8 <HAL_UART_MspInit+0x280>)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80014de:	2200      	movs	r2, #0
 80014e0:	2100      	movs	r1, #0
 80014e2:	2034      	movs	r0, #52	; 0x34
 80014e4:	f000 fd62 	bl	8001fac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80014e8:	2034      	movs	r0, #52	; 0x34
 80014ea:	f000 fd79 	bl	8001fe0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80014ee:	e134      	b.n	800175a <HAL_UART_MspInit+0x3f2>
  else if(huart->Instance==UART5)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a3e      	ldr	r2, [pc, #248]	; (80015f0 <HAL_UART_MspInit+0x288>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	f040 8080 	bne.w	80015fc <HAL_UART_MspInit+0x294>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80014fc:	f04f 0202 	mov.w	r2, #2
 8001500:	f04f 0300 	mov.w	r3, #0
 8001504:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001508:	2300      	movs	r3, #0
 800150a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800150e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001512:	4618      	mov	r0, r3
 8001514:	f005 f9e6 	bl	80068e4 <HAL_RCCEx_PeriphCLKConfig>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <HAL_UART_MspInit+0x1ba>
      Error_Handler();
 800151e:	f7ff fdd5 	bl	80010cc <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001522:	4b2d      	ldr	r3, [pc, #180]	; (80015d8 <HAL_UART_MspInit+0x270>)
 8001524:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001528:	4a2b      	ldr	r2, [pc, #172]	; (80015d8 <HAL_UART_MspInit+0x270>)
 800152a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800152e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001532:	4b29      	ldr	r3, [pc, #164]	; (80015d8 <HAL_UART_MspInit+0x270>)
 8001534:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001538:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800153c:	61fb      	str	r3, [r7, #28]
 800153e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001540:	4b25      	ldr	r3, [pc, #148]	; (80015d8 <HAL_UART_MspInit+0x270>)
 8001542:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001546:	4a24      	ldr	r2, [pc, #144]	; (80015d8 <HAL_UART_MspInit+0x270>)
 8001548:	f043 0304 	orr.w	r3, r3, #4
 800154c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001550:	4b21      	ldr	r3, [pc, #132]	; (80015d8 <HAL_UART_MspInit+0x270>)
 8001552:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001556:	f003 0304 	and.w	r3, r3, #4
 800155a:	61bb      	str	r3, [r7, #24]
 800155c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800155e:	4b1e      	ldr	r3, [pc, #120]	; (80015d8 <HAL_UART_MspInit+0x270>)
 8001560:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001564:	4a1c      	ldr	r2, [pc, #112]	; (80015d8 <HAL_UART_MspInit+0x270>)
 8001566:	f043 0308 	orr.w	r3, r3, #8
 800156a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800156e:	4b1a      	ldr	r3, [pc, #104]	; (80015d8 <HAL_UART_MspInit+0x270>)
 8001570:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001574:	f003 0308 	and.w	r3, r3, #8
 8001578:	617b      	str	r3, [r7, #20]
 800157a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800157c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001580:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001584:	2302      	movs	r3, #2
 8001586:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001590:	2300      	movs	r3, #0
 8001592:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001596:	2308      	movs	r3, #8
 8001598:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800159c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80015a0:	4619      	mov	r1, r3
 80015a2:	4814      	ldr	r0, [pc, #80]	; (80015f4 <HAL_UART_MspInit+0x28c>)
 80015a4:	f003 fede 	bl	8005364 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015a8:	2304      	movs	r3, #4
 80015aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ae:	2302      	movs	r3, #2
 80015b0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ba:	2300      	movs	r3, #0
 80015bc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80015c0:	2308      	movs	r3, #8
 80015c2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015c6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80015ca:	4619      	mov	r1, r3
 80015cc:	480a      	ldr	r0, [pc, #40]	; (80015f8 <HAL_UART_MspInit+0x290>)
 80015ce:	f003 fec9 	bl	8005364 <HAL_GPIO_Init>
}
 80015d2:	e0c2      	b.n	800175a <HAL_UART_MspInit+0x3f2>
 80015d4:	40004c00 	.word	0x40004c00
 80015d8:	58024400 	.word	0x58024400
 80015dc:	58020400 	.word	0x58020400
 80015e0:	240004a8 	.word	0x240004a8
 80015e4:	40020040 	.word	0x40020040
 80015e8:	24000520 	.word	0x24000520
 80015ec:	40020058 	.word	0x40020058
 80015f0:	40005000 	.word	0x40005000
 80015f4:	58020800 	.word	0x58020800
 80015f8:	58020c00 	.word	0x58020c00
  else if(huart->Instance==USART1)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a58      	ldr	r2, [pc, #352]	; (8001764 <HAL_UART_MspInit+0x3fc>)
 8001602:	4293      	cmp	r3, r2
 8001604:	f040 80a9 	bne.w	800175a <HAL_UART_MspInit+0x3f2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001608:	f04f 0201 	mov.w	r2, #1
 800160c:	f04f 0300 	mov.w	r3, #0
 8001610:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8001614:	2300      	movs	r3, #0
 8001616:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800161a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800161e:	4618      	mov	r0, r3
 8001620:	f005 f960 	bl	80068e4 <HAL_RCCEx_PeriphCLKConfig>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <HAL_UART_MspInit+0x2c6>
      Error_Handler();
 800162a:	f7ff fd4f 	bl	80010cc <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800162e:	4b4e      	ldr	r3, [pc, #312]	; (8001768 <HAL_UART_MspInit+0x400>)
 8001630:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001634:	4a4c      	ldr	r2, [pc, #304]	; (8001768 <HAL_UART_MspInit+0x400>)
 8001636:	f043 0310 	orr.w	r3, r3, #16
 800163a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800163e:	4b4a      	ldr	r3, [pc, #296]	; (8001768 <HAL_UART_MspInit+0x400>)
 8001640:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001644:	f003 0310 	and.w	r3, r3, #16
 8001648:	613b      	str	r3, [r7, #16]
 800164a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800164c:	4b46      	ldr	r3, [pc, #280]	; (8001768 <HAL_UART_MspInit+0x400>)
 800164e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001652:	4a45      	ldr	r2, [pc, #276]	; (8001768 <HAL_UART_MspInit+0x400>)
 8001654:	f043 0302 	orr.w	r3, r3, #2
 8001658:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800165c:	4b42      	ldr	r3, [pc, #264]	; (8001768 <HAL_UART_MspInit+0x400>)
 800165e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800166a:	23c0      	movs	r3, #192	; 0xc0
 800166c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001670:	2302      	movs	r3, #2
 8001672:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167c:	2300      	movs	r3, #0
 800167e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001682:	2307      	movs	r3, #7
 8001684:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001688:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800168c:	4619      	mov	r1, r3
 800168e:	4837      	ldr	r0, [pc, #220]	; (800176c <HAL_UART_MspInit+0x404>)
 8001690:	f003 fe68 	bl	8005364 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8001694:	4b36      	ldr	r3, [pc, #216]	; (8001770 <HAL_UART_MspInit+0x408>)
 8001696:	4a37      	ldr	r2, [pc, #220]	; (8001774 <HAL_UART_MspInit+0x40c>)
 8001698:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800169a:	4b35      	ldr	r3, [pc, #212]	; (8001770 <HAL_UART_MspInit+0x408>)
 800169c:	2229      	movs	r2, #41	; 0x29
 800169e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016a0:	4b33      	ldr	r3, [pc, #204]	; (8001770 <HAL_UART_MspInit+0x408>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016a6:	4b32      	ldr	r3, [pc, #200]	; (8001770 <HAL_UART_MspInit+0x408>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016ac:	4b30      	ldr	r3, [pc, #192]	; (8001770 <HAL_UART_MspInit+0x408>)
 80016ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016b2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016b4:	4b2e      	ldr	r3, [pc, #184]	; (8001770 <HAL_UART_MspInit+0x408>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016ba:	4b2d      	ldr	r3, [pc, #180]	; (8001770 <HAL_UART_MspInit+0x408>)
 80016bc:	2200      	movs	r2, #0
 80016be:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80016c0:	4b2b      	ldr	r3, [pc, #172]	; (8001770 <HAL_UART_MspInit+0x408>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80016c6:	4b2a      	ldr	r3, [pc, #168]	; (8001770 <HAL_UART_MspInit+0x408>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016cc:	4b28      	ldr	r3, [pc, #160]	; (8001770 <HAL_UART_MspInit+0x408>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80016d2:	4827      	ldr	r0, [pc, #156]	; (8001770 <HAL_UART_MspInit+0x408>)
 80016d4:	f000 fd1c 	bl	8002110 <HAL_DMA_Init>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <HAL_UART_MspInit+0x37a>
      Error_Handler();
 80016de:	f7ff fcf5 	bl	80010cc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a22      	ldr	r2, [pc, #136]	; (8001770 <HAL_UART_MspInit+0x408>)
 80016e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80016ea:	4a21      	ldr	r2, [pc, #132]	; (8001770 <HAL_UART_MspInit+0x408>)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart1_tx.Instance = DMA1_Stream1;
 80016f0:	4b21      	ldr	r3, [pc, #132]	; (8001778 <HAL_UART_MspInit+0x410>)
 80016f2:	4a22      	ldr	r2, [pc, #136]	; (800177c <HAL_UART_MspInit+0x414>)
 80016f4:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80016f6:	4b20      	ldr	r3, [pc, #128]	; (8001778 <HAL_UART_MspInit+0x410>)
 80016f8:	222a      	movs	r2, #42	; 0x2a
 80016fa:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016fc:	4b1e      	ldr	r3, [pc, #120]	; (8001778 <HAL_UART_MspInit+0x410>)
 80016fe:	2240      	movs	r2, #64	; 0x40
 8001700:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001702:	4b1d      	ldr	r3, [pc, #116]	; (8001778 <HAL_UART_MspInit+0x410>)
 8001704:	2200      	movs	r2, #0
 8001706:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001708:	4b1b      	ldr	r3, [pc, #108]	; (8001778 <HAL_UART_MspInit+0x410>)
 800170a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800170e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001710:	4b19      	ldr	r3, [pc, #100]	; (8001778 <HAL_UART_MspInit+0x410>)
 8001712:	2200      	movs	r2, #0
 8001714:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001716:	4b18      	ldr	r3, [pc, #96]	; (8001778 <HAL_UART_MspInit+0x410>)
 8001718:	2200      	movs	r2, #0
 800171a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800171c:	4b16      	ldr	r3, [pc, #88]	; (8001778 <HAL_UART_MspInit+0x410>)
 800171e:	2200      	movs	r2, #0
 8001720:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001722:	4b15      	ldr	r3, [pc, #84]	; (8001778 <HAL_UART_MspInit+0x410>)
 8001724:	2200      	movs	r2, #0
 8001726:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001728:	4b13      	ldr	r3, [pc, #76]	; (8001778 <HAL_UART_MspInit+0x410>)
 800172a:	2200      	movs	r2, #0
 800172c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800172e:	4812      	ldr	r0, [pc, #72]	; (8001778 <HAL_UART_MspInit+0x410>)
 8001730:	f000 fcee 	bl	8002110 <HAL_DMA_Init>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <HAL_UART_MspInit+0x3d6>
      Error_Handler();
 800173a:	f7ff fcc7 	bl	80010cc <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a0d      	ldr	r2, [pc, #52]	; (8001778 <HAL_UART_MspInit+0x410>)
 8001742:	67da      	str	r2, [r3, #124]	; 0x7c
 8001744:	4a0c      	ldr	r2, [pc, #48]	; (8001778 <HAL_UART_MspInit+0x410>)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800174a:	2200      	movs	r2, #0
 800174c:	2100      	movs	r1, #0
 800174e:	2025      	movs	r0, #37	; 0x25
 8001750:	f000 fc2c 	bl	8001fac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001754:	2025      	movs	r0, #37	; 0x25
 8001756:	f000 fc43 	bl	8001fe0 <HAL_NVIC_EnableIRQ>
}
 800175a:	bf00      	nop
 800175c:	37f8      	adds	r7, #248	; 0xf8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40011000 	.word	0x40011000
 8001768:	58024400 	.word	0x58024400
 800176c:	58020400 	.word	0x58020400
 8001770:	240003b8 	.word	0x240003b8
 8001774:	40020010 	.word	0x40020010
 8001778:	24000430 	.word	0x24000430
 800177c:	40020028 	.word	0x40020028

08001780 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  if(huart->Instance==UART4)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a2c      	ldr	r2, [pc, #176]	; (8001840 <HAL_UART_MspDeInit+0xc0>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d11b      	bne.n	80017ca <HAL_UART_MspDeInit+0x4a>
  {
  /* USER CODE BEGIN UART4_MspDeInit 0 */

  /* USER CODE END UART4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART4_CLK_DISABLE();
 8001792:	4b2c      	ldr	r3, [pc, #176]	; (8001844 <HAL_UART_MspDeInit+0xc4>)
 8001794:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001798:	4a2a      	ldr	r2, [pc, #168]	; (8001844 <HAL_UART_MspDeInit+0xc4>)
 800179a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800179e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8

    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 80017a2:	f44f 7140 	mov.w	r1, #768	; 0x300
 80017a6:	4828      	ldr	r0, [pc, #160]	; (8001848 <HAL_UART_MspDeInit+0xc8>)
 80017a8:	f003 ff84 	bl	80056b4 <HAL_GPIO_DeInit>

    /* UART4 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80017b2:	4618      	mov	r0, r3
 80017b4:	f001 f804 	bl	80027c0 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80017bc:	4618      	mov	r0, r3
 80017be:	f000 ffff 	bl	80027c0 <HAL_DMA_DeInit>

    /* UART4 interrupt DeInit */
    HAL_NVIC_DisableIRQ(UART4_IRQn);
 80017c2:	2034      	movs	r0, #52	; 0x34
 80017c4:	f000 fc1a 	bl	8001ffc <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 80017c8:	e035      	b.n	8001836 <HAL_UART_MspDeInit+0xb6>
  else if(huart->Instance==UART5)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a1f      	ldr	r2, [pc, #124]	; (800184c <HAL_UART_MspDeInit+0xcc>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d111      	bne.n	80017f8 <HAL_UART_MspDeInit+0x78>
    __HAL_RCC_UART5_CLK_DISABLE();
 80017d4:	4b1b      	ldr	r3, [pc, #108]	; (8001844 <HAL_UART_MspDeInit+0xc4>)
 80017d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017da:	4a1a      	ldr	r2, [pc, #104]	; (8001844 <HAL_UART_MspDeInit+0xc4>)
 80017dc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80017e0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_12);
 80017e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017e8:	4819      	ldr	r0, [pc, #100]	; (8001850 <HAL_UART_MspDeInit+0xd0>)
 80017ea:	f003 ff63 	bl	80056b4 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_2);
 80017ee:	2104      	movs	r1, #4
 80017f0:	4818      	ldr	r0, [pc, #96]	; (8001854 <HAL_UART_MspDeInit+0xd4>)
 80017f2:	f003 ff5f 	bl	80056b4 <HAL_GPIO_DeInit>
}
 80017f6:	e01e      	b.n	8001836 <HAL_UART_MspDeInit+0xb6>
  else if(huart->Instance==USART1)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a16      	ldr	r2, [pc, #88]	; (8001858 <HAL_UART_MspDeInit+0xd8>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d119      	bne.n	8001836 <HAL_UART_MspDeInit+0xb6>
    __HAL_RCC_USART1_CLK_DISABLE();
 8001802:	4b10      	ldr	r3, [pc, #64]	; (8001844 <HAL_UART_MspDeInit+0xc4>)
 8001804:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001808:	4a0e      	ldr	r2, [pc, #56]	; (8001844 <HAL_UART_MspDeInit+0xc4>)
 800180a:	f023 0310 	bic.w	r3, r3, #16
 800180e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_7);
 8001812:	21c0      	movs	r1, #192	; 0xc0
 8001814:	480c      	ldr	r0, [pc, #48]	; (8001848 <HAL_UART_MspDeInit+0xc8>)
 8001816:	f003 ff4d 	bl	80056b4 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001820:	4618      	mov	r0, r3
 8001822:	f000 ffcd 	bl	80027c0 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800182a:	4618      	mov	r0, r3
 800182c:	f000 ffc8 	bl	80027c0 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8001830:	2025      	movs	r0, #37	; 0x25
 8001832:	f000 fbe3 	bl	8001ffc <HAL_NVIC_DisableIRQ>
}
 8001836:	bf00      	nop
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40004c00 	.word	0x40004c00
 8001844:	58024400 	.word	0x58024400
 8001848:	58020400 	.word	0x58020400
 800184c:	40005000 	.word	0x40005000
 8001850:	58020800 	.word	0x58020800
 8001854:	58020c00 	.word	0x58020c00
 8001858:	40011000 	.word	0x40011000

0800185c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b090      	sub	sp, #64	; 0x40
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2b0f      	cmp	r3, #15
 8001868:	d827      	bhi.n	80018ba <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800186a:	2200      	movs	r2, #0
 800186c:	6879      	ldr	r1, [r7, #4]
 800186e:	2036      	movs	r0, #54	; 0x36
 8001870:	f000 fb9c 	bl	8001fac <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001874:	2036      	movs	r0, #54	; 0x36
 8001876:	f000 fbb3 	bl	8001fe0 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800187a:	4a29      	ldr	r2, [pc, #164]	; (8001920 <HAL_InitTick+0xc4>)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001880:	4b28      	ldr	r3, [pc, #160]	; (8001924 <HAL_InitTick+0xc8>)
 8001882:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001886:	4a27      	ldr	r2, [pc, #156]	; (8001924 <HAL_InitTick+0xc8>)
 8001888:	f043 0310 	orr.w	r3, r3, #16
 800188c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001890:	4b24      	ldr	r3, [pc, #144]	; (8001924 <HAL_InitTick+0xc8>)
 8001892:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001896:	f003 0310 	and.w	r3, r3, #16
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800189e:	f107 0210 	add.w	r2, r7, #16
 80018a2:	f107 0314 	add.w	r3, r7, #20
 80018a6:	4611      	mov	r1, r2
 80018a8:	4618      	mov	r0, r3
 80018aa:	f004 ffd9 	bl	8006860 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80018ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018b0:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80018b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d106      	bne.n	80018c6 <HAL_InitTick+0x6a>
 80018b8:	e001      	b.n	80018be <HAL_InitTick+0x62>
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e02b      	b.n	8001916 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80018be:	f004 ffa3 	bl	8006808 <HAL_RCC_GetPCLK1Freq>
 80018c2:	63f8      	str	r0, [r7, #60]	; 0x3c
 80018c4:	e004      	b.n	80018d0 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80018c6:	f004 ff9f 	bl	8006808 <HAL_RCC_GetPCLK1Freq>
 80018ca:	4603      	mov	r3, r0
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80018d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018d2:	4a15      	ldr	r2, [pc, #84]	; (8001928 <HAL_InitTick+0xcc>)
 80018d4:	fba2 2303 	umull	r2, r3, r2, r3
 80018d8:	0c9b      	lsrs	r3, r3, #18
 80018da:	3b01      	subs	r3, #1
 80018dc:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80018de:	4b13      	ldr	r3, [pc, #76]	; (800192c <HAL_InitTick+0xd0>)
 80018e0:	4a13      	ldr	r2, [pc, #76]	; (8001930 <HAL_InitTick+0xd4>)
 80018e2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80018e4:	4b11      	ldr	r3, [pc, #68]	; (800192c <HAL_InitTick+0xd0>)
 80018e6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018ea:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80018ec:	4a0f      	ldr	r2, [pc, #60]	; (800192c <HAL_InitTick+0xd0>)
 80018ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018f0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80018f2:	4b0e      	ldr	r3, [pc, #56]	; (800192c <HAL_InitTick+0xd0>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f8:	4b0c      	ldr	r3, [pc, #48]	; (800192c <HAL_InitTick+0xd0>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80018fe:	480b      	ldr	r0, [pc, #44]	; (800192c <HAL_InitTick+0xd0>)
 8001900:	f006 fdb2 	bl	8008468 <HAL_TIM_Base_Init>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d104      	bne.n	8001914 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800190a:	4808      	ldr	r0, [pc, #32]	; (800192c <HAL_InitTick+0xd0>)
 800190c:	f006 fe0e 	bl	800852c <HAL_TIM_Base_Start_IT>
 8001910:	4603      	mov	r3, r0
 8001912:	e000      	b.n	8001916 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
}
 8001916:	4618      	mov	r0, r3
 8001918:	3740      	adds	r7, #64	; 0x40
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	24000008 	.word	0x24000008
 8001924:	58024400 	.word	0x58024400
 8001928:	431bde83 	.word	0x431bde83
 800192c:	240005a0 	.word	0x240005a0
 8001930:	40001000 	.word	0x40001000

08001934 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001938:	e7fe      	b.n	8001938 <NMI_Handler+0x4>

0800193a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800193a:	b480      	push	{r7}
 800193c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800193e:	e7fe      	b.n	800193e <HardFault_Handler+0x4>

08001940 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001944:	e7fe      	b.n	8001944 <MemManage_Handler+0x4>

08001946 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001946:	b480      	push	{r7}
 8001948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800194a:	e7fe      	b.n	800194a <BusFault_Handler+0x4>

0800194c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001950:	e7fe      	b.n	8001950 <UsageFault_Handler+0x4>

08001952 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001952:	b480      	push	{r7}
 8001954:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001956:	bf00      	nop
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <DMA1_Stream0_IRQHandler>:
/* please refer to the startup file (startup_stm32h7xx.s).                    */
/******************************************************************************/


void DMA1_Stream0_IRQHandler(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001964:	4802      	ldr	r0, [pc, #8]	; (8001970 <DMA1_Stream0_IRQHandler+0x10>)
 8001966:	f002 f8af 	bl	8003ac8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800196a:	bf00      	nop
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	240003b8 	.word	0x240003b8

08001974 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001978:	4802      	ldr	r0, [pc, #8]	; (8001984 <DMA1_Stream1_IRQHandler+0x10>)
 800197a:	f002 f8a5 	bl	8003ac8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800197e:	bf00      	nop
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	24000430 	.word	0x24000430

08001988 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 800198c:	4802      	ldr	r0, [pc, #8]	; (8001998 <DMA1_Stream2_IRQHandler+0x10>)
 800198e:	f002 f89b 	bl	8003ac8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	240004a8 	.word	0x240004a8

0800199c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80019a0:	4802      	ldr	r0, [pc, #8]	; (80019ac <DMA1_Stream3_IRQHandler+0x10>)
 80019a2:	f002 f891 	bl	8003ac8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	24000520 	.word	0x24000520

080019b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80019b4:	4802      	ldr	r0, [pc, #8]	; (80019c0 <USART1_IRQHandler+0x10>)
 80019b6:	f007 f9e9 	bl	8008d8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80019ba:	bf00      	nop
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	24000324 	.word	0x24000324

080019c4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
uint8_t m= 1;
 80019ca:	2301      	movs	r3, #1
 80019cc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80019ce:	4807      	ldr	r0, [pc, #28]	; (80019ec <UART4_IRQHandler+0x28>)
 80019d0:	f007 f9dc 	bl	8008d8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  if(huart1.gState==1<<7){
 80019d4:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <UART4_IRQHandler+0x2c>)
 80019d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019da:	2b80      	cmp	r3, #128	; 0x80
 80019dc:	d101      	bne.n	80019e2 <UART4_IRQHandler+0x1e>
  m = 1; //IDLE STATE
 80019de:	2301      	movs	r3, #1
 80019e0:	71fb      	strb	r3, [r7, #7]
  }
  /* USER CODE END UART4_IRQn 1 */
}
 80019e2:	bf00      	nop
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	240001fc 	.word	0x240001fc
 80019f0:	24000324 	.word	0x24000324

080019f4 <TIM6_DAC_IRQHandler>:
/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80019f8:	4802      	ldr	r0, [pc, #8]	; (8001a04 <TIM6_DAC_IRQHandler+0x10>)
 80019fa:	f006 fe1d 	bl	8008638 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	240005a0 	.word	0x240005a0

08001a08 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001a0c:	4802      	ldr	r0, [pc, #8]	; (8001a18 <ETH_IRQHandler+0x10>)
 8001a0e:	f003 fb6d 	bl	80050ec <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	240005fc 	.word	0x240005fc

08001a1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
	return 1;
 8001a20:	2301      	movs	r3, #1
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <_kill>:

int _kill(int pid, int sig)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a36:	4b05      	ldr	r3, [pc, #20]	; (8001a4c <_kill+0x20>)
 8001a38:	2216      	movs	r2, #22
 8001a3a:	601a      	str	r2, [r3, #0]
	return -1;
 8001a3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr
 8001a4c:	240035cc 	.word	0x240035cc

08001a50 <_exit>:

void _exit (int status)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a58:	f04f 31ff 	mov.w	r1, #4294967295
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f7ff ffe5 	bl	8001a2c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a62:	e7fe      	b.n	8001a62 <_exit+0x12>

08001a64 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a70:	2300      	movs	r3, #0
 8001a72:	617b      	str	r3, [r7, #20]
 8001a74:	e00a      	b.n	8001a8c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a76:	f3af 8000 	nop.w
 8001a7a:	4601      	mov	r1, r0
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	1c5a      	adds	r2, r3, #1
 8001a80:	60ba      	str	r2, [r7, #8]
 8001a82:	b2ca      	uxtb	r2, r1
 8001a84:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	617b      	str	r3, [r7, #20]
 8001a8c:	697a      	ldr	r2, [r7, #20]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	dbf0      	blt.n	8001a76 <_read+0x12>
	}

return len;
 8001a94:	687b      	ldr	r3, [r7, #4]
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3718      	adds	r7, #24
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b086      	sub	sp, #24
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	60f8      	str	r0, [r7, #12]
 8001aa6:	60b9      	str	r1, [r7, #8]
 8001aa8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aaa:	2300      	movs	r3, #0
 8001aac:	617b      	str	r3, [r7, #20]
 8001aae:	e009      	b.n	8001ac4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	1c5a      	adds	r2, r3, #1
 8001ab4:	60ba      	str	r2, [r7, #8]
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff fc25 	bl	8001308 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	617b      	str	r3, [r7, #20]
 8001ac4:	697a      	ldr	r2, [r7, #20]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	dbf1      	blt.n	8001ab0 <_write+0x12>
	}
	return len;
 8001acc:	687b      	ldr	r3, [r7, #4]
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3718      	adds	r7, #24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <_close>:

int _close(int file)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
	return -1;
 8001ade:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr

08001aee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001aee:	b480      	push	{r7}
 8001af0:	b083      	sub	sp, #12
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
 8001af6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001afe:	605a      	str	r2, [r3, #4]
	return 0;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr

08001b0e <_isatty>:

int _isatty(int file)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	b083      	sub	sp, #12
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
	return 1;
 8001b16:	2301      	movs	r3, #1
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
	return 0;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3714      	adds	r7, #20
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
	...

08001b40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b087      	sub	sp, #28
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b48:	4a14      	ldr	r2, [pc, #80]	; (8001b9c <_sbrk+0x5c>)
 8001b4a:	4b15      	ldr	r3, [pc, #84]	; (8001ba0 <_sbrk+0x60>)
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b54:	4b13      	ldr	r3, [pc, #76]	; (8001ba4 <_sbrk+0x64>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d102      	bne.n	8001b62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b5c:	4b11      	ldr	r3, [pc, #68]	; (8001ba4 <_sbrk+0x64>)
 8001b5e:	4a12      	ldr	r2, [pc, #72]	; (8001ba8 <_sbrk+0x68>)
 8001b60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b62:	4b10      	ldr	r3, [pc, #64]	; (8001ba4 <_sbrk+0x64>)
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4413      	add	r3, r2
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d205      	bcs.n	8001b7c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001b70:	4b0e      	ldr	r3, [pc, #56]	; (8001bac <_sbrk+0x6c>)
 8001b72:	220c      	movs	r2, #12
 8001b74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b76:	f04f 33ff 	mov.w	r3, #4294967295
 8001b7a:	e009      	b.n	8001b90 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b7c:	4b09      	ldr	r3, [pc, #36]	; (8001ba4 <_sbrk+0x64>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b82:	4b08      	ldr	r3, [pc, #32]	; (8001ba4 <_sbrk+0x64>)
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4413      	add	r3, r2
 8001b8a:	4a06      	ldr	r2, [pc, #24]	; (8001ba4 <_sbrk+0x64>)
 8001b8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	371c      	adds	r7, #28
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	24050000 	.word	0x24050000
 8001ba0:	00000400 	.word	0x00000400
 8001ba4:	240005ec 	.word	0x240005ec
 8001ba8:	240035d8 	.word	0x240035d8
 8001bac:	240035cc 	.word	0x240035cc

08001bb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001bb4:	4b32      	ldr	r3, [pc, #200]	; (8001c80 <SystemInit+0xd0>)
 8001bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bba:	4a31      	ldr	r2, [pc, #196]	; (8001c80 <SystemInit+0xd0>)
 8001bbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001bc4:	4b2f      	ldr	r3, [pc, #188]	; (8001c84 <SystemInit+0xd4>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 030f 	and.w	r3, r3, #15
 8001bcc:	2b06      	cmp	r3, #6
 8001bce:	d807      	bhi.n	8001be0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001bd0:	4b2c      	ldr	r3, [pc, #176]	; (8001c84 <SystemInit+0xd4>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f023 030f 	bic.w	r3, r3, #15
 8001bd8:	4a2a      	ldr	r2, [pc, #168]	; (8001c84 <SystemInit+0xd4>)
 8001bda:	f043 0307 	orr.w	r3, r3, #7
 8001bde:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001be0:	4b29      	ldr	r3, [pc, #164]	; (8001c88 <SystemInit+0xd8>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a28      	ldr	r2, [pc, #160]	; (8001c88 <SystemInit+0xd8>)
 8001be6:	f043 0301 	orr.w	r3, r3, #1
 8001bea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001bec:	4b26      	ldr	r3, [pc, #152]	; (8001c88 <SystemInit+0xd8>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001bf2:	4b25      	ldr	r3, [pc, #148]	; (8001c88 <SystemInit+0xd8>)
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	4924      	ldr	r1, [pc, #144]	; (8001c88 <SystemInit+0xd8>)
 8001bf8:	4b24      	ldr	r3, [pc, #144]	; (8001c8c <SystemInit+0xdc>)
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001bfe:	4b21      	ldr	r3, [pc, #132]	; (8001c84 <SystemInit+0xd4>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0308 	and.w	r3, r3, #8
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d007      	beq.n	8001c1a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001c0a:	4b1e      	ldr	r3, [pc, #120]	; (8001c84 <SystemInit+0xd4>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f023 030f 	bic.w	r3, r3, #15
 8001c12:	4a1c      	ldr	r2, [pc, #112]	; (8001c84 <SystemInit+0xd4>)
 8001c14:	f043 0307 	orr.w	r3, r3, #7
 8001c18:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001c1a:	4b1b      	ldr	r3, [pc, #108]	; (8001c88 <SystemInit+0xd8>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001c20:	4b19      	ldr	r3, [pc, #100]	; (8001c88 <SystemInit+0xd8>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001c26:	4b18      	ldr	r3, [pc, #96]	; (8001c88 <SystemInit+0xd8>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001c2c:	4b16      	ldr	r3, [pc, #88]	; (8001c88 <SystemInit+0xd8>)
 8001c2e:	4a18      	ldr	r2, [pc, #96]	; (8001c90 <SystemInit+0xe0>)
 8001c30:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001c32:	4b15      	ldr	r3, [pc, #84]	; (8001c88 <SystemInit+0xd8>)
 8001c34:	4a17      	ldr	r2, [pc, #92]	; (8001c94 <SystemInit+0xe4>)
 8001c36:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001c38:	4b13      	ldr	r3, [pc, #76]	; (8001c88 <SystemInit+0xd8>)
 8001c3a:	4a17      	ldr	r2, [pc, #92]	; (8001c98 <SystemInit+0xe8>)
 8001c3c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001c3e:	4b12      	ldr	r3, [pc, #72]	; (8001c88 <SystemInit+0xd8>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001c44:	4b10      	ldr	r3, [pc, #64]	; (8001c88 <SystemInit+0xd8>)
 8001c46:	4a14      	ldr	r2, [pc, #80]	; (8001c98 <SystemInit+0xe8>)
 8001c48:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001c4a:	4b0f      	ldr	r3, [pc, #60]	; (8001c88 <SystemInit+0xd8>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001c50:	4b0d      	ldr	r3, [pc, #52]	; (8001c88 <SystemInit+0xd8>)
 8001c52:	4a11      	ldr	r2, [pc, #68]	; (8001c98 <SystemInit+0xe8>)
 8001c54:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001c56:	4b0c      	ldr	r3, [pc, #48]	; (8001c88 <SystemInit+0xd8>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c5c:	4b0a      	ldr	r3, [pc, #40]	; (8001c88 <SystemInit+0xd8>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a09      	ldr	r2, [pc, #36]	; (8001c88 <SystemInit+0xd8>)
 8001c62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c66:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001c68:	4b07      	ldr	r3, [pc, #28]	; (8001c88 <SystemInit+0xd8>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001c6e:	4b0b      	ldr	r3, [pc, #44]	; (8001c9c <SystemInit+0xec>)
 8001c70:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001c74:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001c76:	bf00      	nop
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	e000ed00 	.word	0xe000ed00
 8001c84:	52002000 	.word	0x52002000
 8001c88:	58024400 	.word	0x58024400
 8001c8c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001c90:	02020200 	.word	0x02020200
 8001c94:	01ff0000 	.word	0x01ff0000
 8001c98:	01010280 	.word	0x01010280
 8001c9c:	52004000 	.word	0x52004000

08001ca0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001ca0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cd8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ca4:	f7ff ff84 	bl	8001bb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ca8:	480c      	ldr	r0, [pc, #48]	; (8001cdc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001caa:	490d      	ldr	r1, [pc, #52]	; (8001ce0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cac:	4a0d      	ldr	r2, [pc, #52]	; (8001ce4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cb0:	e002      	b.n	8001cb8 <LoopCopyDataInit>

08001cb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cb6:	3304      	adds	r3, #4

08001cb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cbc:	d3f9      	bcc.n	8001cb2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cbe:	4a0a      	ldr	r2, [pc, #40]	; (8001ce8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001cc0:	4c0a      	ldr	r4, [pc, #40]	; (8001cec <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cc4:	e001      	b.n	8001cca <LoopFillZerobss>

08001cc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cc8:	3204      	adds	r2, #4

08001cca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ccc:	d3fb      	bcc.n	8001cc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cce:	f00d f98d 	bl	800efec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cd2:	f7fe fcff 	bl	80006d4 <main>
  bx  lr
 8001cd6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cd8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001cdc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001ce0:	240001dc 	.word	0x240001dc
  ldr r2, =_sidata
 8001ce4:	080113f8 	.word	0x080113f8
  ldr r2, =_sbss
 8001ce8:	240001dc 	.word	0x240001dc
  ldr r4, =_ebss
 8001cec:	240035d4 	.word	0x240035d4

08001cf0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cf0:	e7fe      	b.n	8001cf0 <ADC3_IRQHandler>
	...

08001cf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cfa:	2003      	movs	r0, #3
 8001cfc:	f000 f94b 	bl	8001f96 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001d00:	f004 fbd8 	bl	80064b4 <HAL_RCC_GetSysClockFreq>
 8001d04:	4602      	mov	r2, r0
 8001d06:	4b15      	ldr	r3, [pc, #84]	; (8001d5c <HAL_Init+0x68>)
 8001d08:	699b      	ldr	r3, [r3, #24]
 8001d0a:	0a1b      	lsrs	r3, r3, #8
 8001d0c:	f003 030f 	and.w	r3, r3, #15
 8001d10:	4913      	ldr	r1, [pc, #76]	; (8001d60 <HAL_Init+0x6c>)
 8001d12:	5ccb      	ldrb	r3, [r1, r3]
 8001d14:	f003 031f 	and.w	r3, r3, #31
 8001d18:	fa22 f303 	lsr.w	r3, r2, r3
 8001d1c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001d1e:	4b0f      	ldr	r3, [pc, #60]	; (8001d5c <HAL_Init+0x68>)
 8001d20:	699b      	ldr	r3, [r3, #24]
 8001d22:	f003 030f 	and.w	r3, r3, #15
 8001d26:	4a0e      	ldr	r2, [pc, #56]	; (8001d60 <HAL_Init+0x6c>)
 8001d28:	5cd3      	ldrb	r3, [r2, r3]
 8001d2a:	f003 031f 	and.w	r3, r3, #31
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	fa22 f303 	lsr.w	r3, r2, r3
 8001d34:	4a0b      	ldr	r2, [pc, #44]	; (8001d64 <HAL_Init+0x70>)
 8001d36:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001d38:	4a0b      	ldr	r2, [pc, #44]	; (8001d68 <HAL_Init+0x74>)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d3e:	200f      	movs	r0, #15
 8001d40:	f7ff fd8c 	bl	800185c <HAL_InitTick>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e002      	b.n	8001d54 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001d4e:	f7ff faed 	bl	800132c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d52:	2300      	movs	r3, #0
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3708      	adds	r7, #8
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	58024400 	.word	0x58024400
 8001d60:	08010fe4 	.word	0x08010fe4
 8001d64:	24000004 	.word	0x24000004
 8001d68:	24000000 	.word	0x24000000

08001d6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d70:	4b06      	ldr	r3, [pc, #24]	; (8001d8c <HAL_IncTick+0x20>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	461a      	mov	r2, r3
 8001d76:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <HAL_IncTick+0x24>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	4a04      	ldr	r2, [pc, #16]	; (8001d90 <HAL_IncTick+0x24>)
 8001d7e:	6013      	str	r3, [r2, #0]
}
 8001d80:	bf00      	nop
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	2400000c 	.word	0x2400000c
 8001d90:	240005f0 	.word	0x240005f0

08001d94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  return uwTick;
 8001d98:	4b03      	ldr	r3, [pc, #12]	; (8001da8 <HAL_GetTick+0x14>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	240005f0 	.word	0x240005f0

08001dac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001db4:	f7ff ffee 	bl	8001d94 <HAL_GetTick>
 8001db8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dc4:	d005      	beq.n	8001dd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dc6:	4b0a      	ldr	r3, [pc, #40]	; (8001df0 <HAL_Delay+0x44>)
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	461a      	mov	r2, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	4413      	add	r3, r2
 8001dd0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dd2:	bf00      	nop
 8001dd4:	f7ff ffde 	bl	8001d94 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	68fa      	ldr	r2, [r7, #12]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d8f7      	bhi.n	8001dd4 <HAL_Delay+0x28>
  {
  }
}
 8001de4:	bf00      	nop
 8001de6:	bf00      	nop
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	2400000c 	.word	0x2400000c

08001df4 <__NVIC_SetPriorityGrouping>:
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e04:	4b0b      	ldr	r3, [pc, #44]	; (8001e34 <__NVIC_SetPriorityGrouping+0x40>)
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e0a:	68ba      	ldr	r2, [r7, #8]
 8001e0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e10:	4013      	ands	r3, r2
 8001e12:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001e1c:	4b06      	ldr	r3, [pc, #24]	; (8001e38 <__NVIC_SetPriorityGrouping+0x44>)
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e22:	4a04      	ldr	r2, [pc, #16]	; (8001e34 <__NVIC_SetPriorityGrouping+0x40>)
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	60d3      	str	r3, [r2, #12]
}
 8001e28:	bf00      	nop
 8001e2a:	3714      	adds	r7, #20
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr
 8001e34:	e000ed00 	.word	0xe000ed00
 8001e38:	05fa0000 	.word	0x05fa0000

08001e3c <__NVIC_GetPriorityGrouping>:
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e40:	4b04      	ldr	r3, [pc, #16]	; (8001e54 <__NVIC_GetPriorityGrouping+0x18>)
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	0a1b      	lsrs	r3, r3, #8
 8001e46:	f003 0307 	and.w	r3, r3, #7
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr
 8001e54:	e000ed00 	.word	0xe000ed00

08001e58 <__NVIC_EnableIRQ>:
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	db0b      	blt.n	8001e82 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e6a:	88fb      	ldrh	r3, [r7, #6]
 8001e6c:	f003 021f 	and.w	r2, r3, #31
 8001e70:	4907      	ldr	r1, [pc, #28]	; (8001e90 <__NVIC_EnableIRQ+0x38>)
 8001e72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e76:	095b      	lsrs	r3, r3, #5
 8001e78:	2001      	movs	r0, #1
 8001e7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001e82:	bf00      	nop
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	e000e100 	.word	0xe000e100

08001e94 <__NVIC_DisableIRQ>:
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	db12      	blt.n	8001ecc <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ea6:	88fb      	ldrh	r3, [r7, #6]
 8001ea8:	f003 021f 	and.w	r2, r3, #31
 8001eac:	490a      	ldr	r1, [pc, #40]	; (8001ed8 <__NVIC_DisableIRQ+0x44>)
 8001eae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001eb2:	095b      	lsrs	r3, r3, #5
 8001eb4:	2001      	movs	r0, #1
 8001eb6:	fa00 f202 	lsl.w	r2, r0, r2
 8001eba:	3320      	adds	r3, #32
 8001ebc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001ec0:	f3bf 8f4f 	dsb	sy
}
 8001ec4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ec6:	f3bf 8f6f 	isb	sy
}
 8001eca:	bf00      	nop
}
 8001ecc:	bf00      	nop
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	e000e100 	.word	0xe000e100

08001edc <__NVIC_SetPriority>:
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	6039      	str	r1, [r7, #0]
 8001ee6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ee8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	db0a      	blt.n	8001f06 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	b2da      	uxtb	r2, r3
 8001ef4:	490c      	ldr	r1, [pc, #48]	; (8001f28 <__NVIC_SetPriority+0x4c>)
 8001ef6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001efa:	0112      	lsls	r2, r2, #4
 8001efc:	b2d2      	uxtb	r2, r2
 8001efe:	440b      	add	r3, r1
 8001f00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001f04:	e00a      	b.n	8001f1c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	b2da      	uxtb	r2, r3
 8001f0a:	4908      	ldr	r1, [pc, #32]	; (8001f2c <__NVIC_SetPriority+0x50>)
 8001f0c:	88fb      	ldrh	r3, [r7, #6]
 8001f0e:	f003 030f 	and.w	r3, r3, #15
 8001f12:	3b04      	subs	r3, #4
 8001f14:	0112      	lsls	r2, r2, #4
 8001f16:	b2d2      	uxtb	r2, r2
 8001f18:	440b      	add	r3, r1
 8001f1a:	761a      	strb	r2, [r3, #24]
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	e000e100 	.word	0xe000e100
 8001f2c:	e000ed00 	.word	0xe000ed00

08001f30 <NVIC_EncodePriority>:
{
 8001f30:	b480      	push	{r7}
 8001f32:	b089      	sub	sp, #36	; 0x24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f003 0307 	and.w	r3, r3, #7
 8001f42:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	f1c3 0307 	rsb	r3, r3, #7
 8001f4a:	2b04      	cmp	r3, #4
 8001f4c:	bf28      	it	cs
 8001f4e:	2304      	movcs	r3, #4
 8001f50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	3304      	adds	r3, #4
 8001f56:	2b06      	cmp	r3, #6
 8001f58:	d902      	bls.n	8001f60 <NVIC_EncodePriority+0x30>
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	3b03      	subs	r3, #3
 8001f5e:	e000      	b.n	8001f62 <NVIC_EncodePriority+0x32>
 8001f60:	2300      	movs	r3, #0
 8001f62:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f64:	f04f 32ff 	mov.w	r2, #4294967295
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	43da      	mvns	r2, r3
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	401a      	ands	r2, r3
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f78:	f04f 31ff 	mov.w	r1, #4294967295
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f82:	43d9      	mvns	r1, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f88:	4313      	orrs	r3, r2
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3724      	adds	r7, #36	; 0x24
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr

08001f96 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b082      	sub	sp, #8
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f7ff ff28 	bl	8001df4 <__NVIC_SetPriorityGrouping>
}
 8001fa4:	bf00      	nop
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	607a      	str	r2, [r7, #4]
 8001fb8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001fba:	f7ff ff3f 	bl	8001e3c <__NVIC_GetPriorityGrouping>
 8001fbe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	68b9      	ldr	r1, [r7, #8]
 8001fc4:	6978      	ldr	r0, [r7, #20]
 8001fc6:	f7ff ffb3 	bl	8001f30 <NVIC_EncodePriority>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001fd0:	4611      	mov	r1, r2
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7ff ff82 	bl	8001edc <__NVIC_SetPriority>
}
 8001fd8:	bf00      	nop
 8001fda:	3718      	adds	r7, #24
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff ff32 	bl	8001e58 <__NVIC_EnableIRQ>
}
 8001ff4:	bf00      	nop
 8001ff6:	3708      	adds	r7, #8
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	4603      	mov	r3, r0
 8002004:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002006:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800200a:	4618      	mov	r0, r3
 800200c:	f7ff ff42 	bl	8001e94 <__NVIC_DisableIRQ>
}
 8002010:	bf00      	nop
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 800201c:	f3bf 8f5f 	dmb	sy
}
 8002020:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002022:	4b07      	ldr	r3, [pc, #28]	; (8002040 <HAL_MPU_Disable+0x28>)
 8002024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002026:	4a06      	ldr	r2, [pc, #24]	; (8002040 <HAL_MPU_Disable+0x28>)
 8002028:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800202c:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800202e:	4b05      	ldr	r3, [pc, #20]	; (8002044 <HAL_MPU_Disable+0x2c>)
 8002030:	2200      	movs	r2, #0
 8002032:	605a      	str	r2, [r3, #4]
}
 8002034:	bf00      	nop
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	e000ed00 	.word	0xe000ed00
 8002044:	e000ed90 	.word	0xe000ed90

08002048 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002050:	4a0b      	ldr	r2, [pc, #44]	; (8002080 <HAL_MPU_Enable+0x38>)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f043 0301 	orr.w	r3, r3, #1
 8002058:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800205a:	4b0a      	ldr	r3, [pc, #40]	; (8002084 <HAL_MPU_Enable+0x3c>)
 800205c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205e:	4a09      	ldr	r2, [pc, #36]	; (8002084 <HAL_MPU_Enable+0x3c>)
 8002060:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002064:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002066:	f3bf 8f4f 	dsb	sy
}
 800206a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800206c:	f3bf 8f6f 	isb	sy
}
 8002070:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002072:	bf00      	nop
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	e000ed90 	.word	0xe000ed90
 8002084:	e000ed00 	.word	0xe000ed00

08002088 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	785a      	ldrb	r2, [r3, #1]
 8002094:	4b1d      	ldr	r3, [pc, #116]	; (800210c <HAL_MPU_ConfigRegion+0x84>)
 8002096:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d029      	beq.n	80020f4 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80020a0:	4a1a      	ldr	r2, [pc, #104]	; (800210c <HAL_MPU_ConfigRegion+0x84>)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	7b1b      	ldrb	r3, [r3, #12]
 80020ac:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	7adb      	ldrb	r3, [r3, #11]
 80020b2:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80020b4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	7a9b      	ldrb	r3, [r3, #10]
 80020ba:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80020bc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	7b5b      	ldrb	r3, [r3, #13]
 80020c2:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80020c4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	7b9b      	ldrb	r3, [r3, #14]
 80020ca:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80020cc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	7bdb      	ldrb	r3, [r3, #15]
 80020d2:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80020d4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	7a5b      	ldrb	r3, [r3, #9]
 80020da:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80020dc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	7a1b      	ldrb	r3, [r3, #8]
 80020e2:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80020e4:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	7812      	ldrb	r2, [r2, #0]
 80020ea:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80020ec:	4a07      	ldr	r2, [pc, #28]	; (800210c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80020ee:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80020f0:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80020f2:	e005      	b.n	8002100 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80020f4:	4b05      	ldr	r3, [pc, #20]	; (800210c <HAL_MPU_ConfigRegion+0x84>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80020fa:	4b04      	ldr	r3, [pc, #16]	; (800210c <HAL_MPU_ConfigRegion+0x84>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	611a      	str	r2, [r3, #16]
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr
 800210c:	e000ed90 	.word	0xe000ed90

08002110 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002118:	f7ff fe3c 	bl	8001d94 <HAL_GetTick>
 800211c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d101      	bne.n	8002128 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e312      	b.n	800274e <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a66      	ldr	r2, [pc, #408]	; (80022c8 <HAL_DMA_Init+0x1b8>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d04a      	beq.n	80021c8 <HAL_DMA_Init+0xb8>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a65      	ldr	r2, [pc, #404]	; (80022cc <HAL_DMA_Init+0x1bc>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d045      	beq.n	80021c8 <HAL_DMA_Init+0xb8>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a63      	ldr	r2, [pc, #396]	; (80022d0 <HAL_DMA_Init+0x1c0>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d040      	beq.n	80021c8 <HAL_DMA_Init+0xb8>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a62      	ldr	r2, [pc, #392]	; (80022d4 <HAL_DMA_Init+0x1c4>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d03b      	beq.n	80021c8 <HAL_DMA_Init+0xb8>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a60      	ldr	r2, [pc, #384]	; (80022d8 <HAL_DMA_Init+0x1c8>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d036      	beq.n	80021c8 <HAL_DMA_Init+0xb8>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a5f      	ldr	r2, [pc, #380]	; (80022dc <HAL_DMA_Init+0x1cc>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d031      	beq.n	80021c8 <HAL_DMA_Init+0xb8>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a5d      	ldr	r2, [pc, #372]	; (80022e0 <HAL_DMA_Init+0x1d0>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d02c      	beq.n	80021c8 <HAL_DMA_Init+0xb8>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a5c      	ldr	r2, [pc, #368]	; (80022e4 <HAL_DMA_Init+0x1d4>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d027      	beq.n	80021c8 <HAL_DMA_Init+0xb8>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a5a      	ldr	r2, [pc, #360]	; (80022e8 <HAL_DMA_Init+0x1d8>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d022      	beq.n	80021c8 <HAL_DMA_Init+0xb8>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a59      	ldr	r2, [pc, #356]	; (80022ec <HAL_DMA_Init+0x1dc>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d01d      	beq.n	80021c8 <HAL_DMA_Init+0xb8>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a57      	ldr	r2, [pc, #348]	; (80022f0 <HAL_DMA_Init+0x1e0>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d018      	beq.n	80021c8 <HAL_DMA_Init+0xb8>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a56      	ldr	r2, [pc, #344]	; (80022f4 <HAL_DMA_Init+0x1e4>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d013      	beq.n	80021c8 <HAL_DMA_Init+0xb8>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a54      	ldr	r2, [pc, #336]	; (80022f8 <HAL_DMA_Init+0x1e8>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d00e      	beq.n	80021c8 <HAL_DMA_Init+0xb8>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a53      	ldr	r2, [pc, #332]	; (80022fc <HAL_DMA_Init+0x1ec>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d009      	beq.n	80021c8 <HAL_DMA_Init+0xb8>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a51      	ldr	r2, [pc, #324]	; (8002300 <HAL_DMA_Init+0x1f0>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d004      	beq.n	80021c8 <HAL_DMA_Init+0xb8>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a50      	ldr	r2, [pc, #320]	; (8002304 <HAL_DMA_Init+0x1f4>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d101      	bne.n	80021cc <HAL_DMA_Init+0xbc>
 80021c8:	2301      	movs	r3, #1
 80021ca:	e000      	b.n	80021ce <HAL_DMA_Init+0xbe>
 80021cc:	2300      	movs	r3, #0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	f000 813c 	beq.w	800244c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2202      	movs	r2, #2
 80021d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a37      	ldr	r2, [pc, #220]	; (80022c8 <HAL_DMA_Init+0x1b8>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d04a      	beq.n	8002284 <HAL_DMA_Init+0x174>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a36      	ldr	r2, [pc, #216]	; (80022cc <HAL_DMA_Init+0x1bc>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d045      	beq.n	8002284 <HAL_DMA_Init+0x174>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a34      	ldr	r2, [pc, #208]	; (80022d0 <HAL_DMA_Init+0x1c0>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d040      	beq.n	8002284 <HAL_DMA_Init+0x174>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a33      	ldr	r2, [pc, #204]	; (80022d4 <HAL_DMA_Init+0x1c4>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d03b      	beq.n	8002284 <HAL_DMA_Init+0x174>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a31      	ldr	r2, [pc, #196]	; (80022d8 <HAL_DMA_Init+0x1c8>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d036      	beq.n	8002284 <HAL_DMA_Init+0x174>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a30      	ldr	r2, [pc, #192]	; (80022dc <HAL_DMA_Init+0x1cc>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d031      	beq.n	8002284 <HAL_DMA_Init+0x174>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a2e      	ldr	r2, [pc, #184]	; (80022e0 <HAL_DMA_Init+0x1d0>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d02c      	beq.n	8002284 <HAL_DMA_Init+0x174>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a2d      	ldr	r2, [pc, #180]	; (80022e4 <HAL_DMA_Init+0x1d4>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d027      	beq.n	8002284 <HAL_DMA_Init+0x174>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a2b      	ldr	r2, [pc, #172]	; (80022e8 <HAL_DMA_Init+0x1d8>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d022      	beq.n	8002284 <HAL_DMA_Init+0x174>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a2a      	ldr	r2, [pc, #168]	; (80022ec <HAL_DMA_Init+0x1dc>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d01d      	beq.n	8002284 <HAL_DMA_Init+0x174>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a28      	ldr	r2, [pc, #160]	; (80022f0 <HAL_DMA_Init+0x1e0>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d018      	beq.n	8002284 <HAL_DMA_Init+0x174>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a27      	ldr	r2, [pc, #156]	; (80022f4 <HAL_DMA_Init+0x1e4>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d013      	beq.n	8002284 <HAL_DMA_Init+0x174>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a25      	ldr	r2, [pc, #148]	; (80022f8 <HAL_DMA_Init+0x1e8>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d00e      	beq.n	8002284 <HAL_DMA_Init+0x174>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a24      	ldr	r2, [pc, #144]	; (80022fc <HAL_DMA_Init+0x1ec>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d009      	beq.n	8002284 <HAL_DMA_Init+0x174>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a22      	ldr	r2, [pc, #136]	; (8002300 <HAL_DMA_Init+0x1f0>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d004      	beq.n	8002284 <HAL_DMA_Init+0x174>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a21      	ldr	r2, [pc, #132]	; (8002304 <HAL_DMA_Init+0x1f4>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d108      	bne.n	8002296 <HAL_DMA_Init+0x186>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f022 0201 	bic.w	r2, r2, #1
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	e007      	b.n	80022a6 <HAL_DMA_Init+0x196>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f022 0201 	bic.w	r2, r2, #1
 80022a4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80022a6:	e02f      	b.n	8002308 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022a8:	f7ff fd74 	bl	8001d94 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b05      	cmp	r3, #5
 80022b4:	d928      	bls.n	8002308 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2220      	movs	r2, #32
 80022ba:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2203      	movs	r2, #3
 80022c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e242      	b.n	800274e <HAL_DMA_Init+0x63e>
 80022c8:	40020010 	.word	0x40020010
 80022cc:	40020028 	.word	0x40020028
 80022d0:	40020040 	.word	0x40020040
 80022d4:	40020058 	.word	0x40020058
 80022d8:	40020070 	.word	0x40020070
 80022dc:	40020088 	.word	0x40020088
 80022e0:	400200a0 	.word	0x400200a0
 80022e4:	400200b8 	.word	0x400200b8
 80022e8:	40020410 	.word	0x40020410
 80022ec:	40020428 	.word	0x40020428
 80022f0:	40020440 	.word	0x40020440
 80022f4:	40020458 	.word	0x40020458
 80022f8:	40020470 	.word	0x40020470
 80022fc:	40020488 	.word	0x40020488
 8002300:	400204a0 	.word	0x400204a0
 8002304:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1c8      	bne.n	80022a8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800231e:	697a      	ldr	r2, [r7, #20]
 8002320:	4b83      	ldr	r3, [pc, #524]	; (8002530 <HAL_DMA_Init+0x420>)
 8002322:	4013      	ands	r3, r2
 8002324:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800232e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	691b      	ldr	r3, [r3, #16]
 8002334:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800233a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	699b      	ldr	r3, [r3, #24]
 8002340:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002346:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a1b      	ldr	r3, [r3, #32]
 800234c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	4313      	orrs	r3, r2
 8002352:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002358:	2b04      	cmp	r3, #4
 800235a:	d107      	bne.n	800236c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002364:	4313      	orrs	r3, r2
 8002366:	697a      	ldr	r2, [r7, #20]
 8002368:	4313      	orrs	r3, r2
 800236a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	2b28      	cmp	r3, #40	; 0x28
 8002372:	d903      	bls.n	800237c <HAL_DMA_Init+0x26c>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	2b2e      	cmp	r3, #46	; 0x2e
 800237a:	d91f      	bls.n	80023bc <HAL_DMA_Init+0x2ac>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	2b3e      	cmp	r3, #62	; 0x3e
 8002382:	d903      	bls.n	800238c <HAL_DMA_Init+0x27c>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	2b42      	cmp	r3, #66	; 0x42
 800238a:	d917      	bls.n	80023bc <HAL_DMA_Init+0x2ac>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	2b46      	cmp	r3, #70	; 0x46
 8002392:	d903      	bls.n	800239c <HAL_DMA_Init+0x28c>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	2b48      	cmp	r3, #72	; 0x48
 800239a:	d90f      	bls.n	80023bc <HAL_DMA_Init+0x2ac>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	2b4e      	cmp	r3, #78	; 0x4e
 80023a2:	d903      	bls.n	80023ac <HAL_DMA_Init+0x29c>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	2b52      	cmp	r3, #82	; 0x52
 80023aa:	d907      	bls.n	80023bc <HAL_DMA_Init+0x2ac>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	2b73      	cmp	r3, #115	; 0x73
 80023b2:	d905      	bls.n	80023c0 <HAL_DMA_Init+0x2b0>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	2b77      	cmp	r3, #119	; 0x77
 80023ba:	d801      	bhi.n	80023c0 <HAL_DMA_Init+0x2b0>
 80023bc:	2301      	movs	r3, #1
 80023be:	e000      	b.n	80023c2 <HAL_DMA_Init+0x2b2>
 80023c0:	2300      	movs	r3, #0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d003      	beq.n	80023ce <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023cc:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	697a      	ldr	r2, [r7, #20]
 80023d4:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	695b      	ldr	r3, [r3, #20]
 80023dc:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	f023 0307 	bic.w	r3, r3, #7
 80023e4:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ea:	697a      	ldr	r2, [r7, #20]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f4:	2b04      	cmp	r3, #4
 80023f6:	d117      	bne.n	8002428 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fc:	697a      	ldr	r2, [r7, #20]
 80023fe:	4313      	orrs	r3, r2
 8002400:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002406:	2b00      	cmp	r3, #0
 8002408:	d00e      	beq.n	8002428 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f002 fce4 	bl	8004dd8 <DMA_CheckFifoParam>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d008      	beq.n	8002428 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2240      	movs	r2, #64	; 0x40
 800241a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e192      	b.n	800274e <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	697a      	ldr	r2, [r7, #20]
 800242e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f002 fc1f 	bl	8004c74 <DMA_CalcBaseAndBitshift>
 8002436:	4603      	mov	r3, r0
 8002438:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800243e:	f003 031f 	and.w	r3, r3, #31
 8002442:	223f      	movs	r2, #63	; 0x3f
 8002444:	409a      	lsls	r2, r3
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	609a      	str	r2, [r3, #8]
 800244a:	e0c8      	b.n	80025de <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a38      	ldr	r2, [pc, #224]	; (8002534 <HAL_DMA_Init+0x424>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d022      	beq.n	800249c <HAL_DMA_Init+0x38c>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a37      	ldr	r2, [pc, #220]	; (8002538 <HAL_DMA_Init+0x428>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d01d      	beq.n	800249c <HAL_DMA_Init+0x38c>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a35      	ldr	r2, [pc, #212]	; (800253c <HAL_DMA_Init+0x42c>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d018      	beq.n	800249c <HAL_DMA_Init+0x38c>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a34      	ldr	r2, [pc, #208]	; (8002540 <HAL_DMA_Init+0x430>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d013      	beq.n	800249c <HAL_DMA_Init+0x38c>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a32      	ldr	r2, [pc, #200]	; (8002544 <HAL_DMA_Init+0x434>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d00e      	beq.n	800249c <HAL_DMA_Init+0x38c>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a31      	ldr	r2, [pc, #196]	; (8002548 <HAL_DMA_Init+0x438>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d009      	beq.n	800249c <HAL_DMA_Init+0x38c>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a2f      	ldr	r2, [pc, #188]	; (800254c <HAL_DMA_Init+0x43c>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d004      	beq.n	800249c <HAL_DMA_Init+0x38c>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a2e      	ldr	r2, [pc, #184]	; (8002550 <HAL_DMA_Init+0x440>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d101      	bne.n	80024a0 <HAL_DMA_Init+0x390>
 800249c:	2301      	movs	r3, #1
 800249e:	e000      	b.n	80024a2 <HAL_DMA_Init+0x392>
 80024a0:	2300      	movs	r3, #0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f000 8092 	beq.w	80025cc <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a21      	ldr	r2, [pc, #132]	; (8002534 <HAL_DMA_Init+0x424>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d021      	beq.n	80024f6 <HAL_DMA_Init+0x3e6>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a20      	ldr	r2, [pc, #128]	; (8002538 <HAL_DMA_Init+0x428>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d01c      	beq.n	80024f6 <HAL_DMA_Init+0x3e6>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a1e      	ldr	r2, [pc, #120]	; (800253c <HAL_DMA_Init+0x42c>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d017      	beq.n	80024f6 <HAL_DMA_Init+0x3e6>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a1d      	ldr	r2, [pc, #116]	; (8002540 <HAL_DMA_Init+0x430>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d012      	beq.n	80024f6 <HAL_DMA_Init+0x3e6>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a1b      	ldr	r2, [pc, #108]	; (8002544 <HAL_DMA_Init+0x434>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d00d      	beq.n	80024f6 <HAL_DMA_Init+0x3e6>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a1a      	ldr	r2, [pc, #104]	; (8002548 <HAL_DMA_Init+0x438>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d008      	beq.n	80024f6 <HAL_DMA_Init+0x3e6>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a18      	ldr	r2, [pc, #96]	; (800254c <HAL_DMA_Init+0x43c>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d003      	beq.n	80024f6 <HAL_DMA_Init+0x3e6>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a17      	ldr	r2, [pc, #92]	; (8002550 <HAL_DMA_Init+0x440>)
 80024f4:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2202      	movs	r2, #2
 80024fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800250e:	697a      	ldr	r2, [r7, #20]
 8002510:	4b10      	ldr	r3, [pc, #64]	; (8002554 <HAL_DMA_Init+0x444>)
 8002512:	4013      	ands	r3, r2
 8002514:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	2b40      	cmp	r3, #64	; 0x40
 800251c:	d01c      	beq.n	8002558 <HAL_DMA_Init+0x448>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	2b80      	cmp	r3, #128	; 0x80
 8002524:	d102      	bne.n	800252c <HAL_DMA_Init+0x41c>
 8002526:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800252a:	e016      	b.n	800255a <HAL_DMA_Init+0x44a>
 800252c:	2300      	movs	r3, #0
 800252e:	e014      	b.n	800255a <HAL_DMA_Init+0x44a>
 8002530:	fe10803f 	.word	0xfe10803f
 8002534:	58025408 	.word	0x58025408
 8002538:	5802541c 	.word	0x5802541c
 800253c:	58025430 	.word	0x58025430
 8002540:	58025444 	.word	0x58025444
 8002544:	58025458 	.word	0x58025458
 8002548:	5802546c 	.word	0x5802546c
 800254c:	58025480 	.word	0x58025480
 8002550:	58025494 	.word	0x58025494
 8002554:	fffe000f 	.word	0xfffe000f
 8002558:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	68d2      	ldr	r2, [r2, #12]
 800255e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002560:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002568:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002570:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	699b      	ldr	r3, [r3, #24]
 8002576:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002578:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	69db      	ldr	r3, [r3, #28]
 800257e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002580:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a1b      	ldr	r3, [r3, #32]
 8002586:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002588:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800258a:	697a      	ldr	r2, [r7, #20]
 800258c:	4313      	orrs	r3, r2
 800258e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	697a      	ldr	r2, [r7, #20]
 8002596:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	461a      	mov	r2, r3
 800259e:	4b6e      	ldr	r3, [pc, #440]	; (8002758 <HAL_DMA_Init+0x648>)
 80025a0:	4413      	add	r3, r2
 80025a2:	4a6e      	ldr	r2, [pc, #440]	; (800275c <HAL_DMA_Init+0x64c>)
 80025a4:	fba2 2303 	umull	r2, r3, r2, r3
 80025a8:	091b      	lsrs	r3, r3, #4
 80025aa:	009a      	lsls	r2, r3, #2
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f002 fb5f 	bl	8004c74 <DMA_CalcBaseAndBitshift>
 80025b6:	4603      	mov	r3, r0
 80025b8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025be:	f003 031f 	and.w	r3, r3, #31
 80025c2:	2201      	movs	r2, #1
 80025c4:	409a      	lsls	r2, r3
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	605a      	str	r2, [r3, #4]
 80025ca:	e008      	b.n	80025de <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2240      	movs	r2, #64	; 0x40
 80025d0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2203      	movs	r2, #3
 80025d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e0b7      	b.n	800274e <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a5f      	ldr	r2, [pc, #380]	; (8002760 <HAL_DMA_Init+0x650>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d072      	beq.n	80026ce <HAL_DMA_Init+0x5be>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a5d      	ldr	r2, [pc, #372]	; (8002764 <HAL_DMA_Init+0x654>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d06d      	beq.n	80026ce <HAL_DMA_Init+0x5be>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a5c      	ldr	r2, [pc, #368]	; (8002768 <HAL_DMA_Init+0x658>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d068      	beq.n	80026ce <HAL_DMA_Init+0x5be>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a5a      	ldr	r2, [pc, #360]	; (800276c <HAL_DMA_Init+0x65c>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d063      	beq.n	80026ce <HAL_DMA_Init+0x5be>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a59      	ldr	r2, [pc, #356]	; (8002770 <HAL_DMA_Init+0x660>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d05e      	beq.n	80026ce <HAL_DMA_Init+0x5be>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a57      	ldr	r2, [pc, #348]	; (8002774 <HAL_DMA_Init+0x664>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d059      	beq.n	80026ce <HAL_DMA_Init+0x5be>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a56      	ldr	r2, [pc, #344]	; (8002778 <HAL_DMA_Init+0x668>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d054      	beq.n	80026ce <HAL_DMA_Init+0x5be>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a54      	ldr	r2, [pc, #336]	; (800277c <HAL_DMA_Init+0x66c>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d04f      	beq.n	80026ce <HAL_DMA_Init+0x5be>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a53      	ldr	r2, [pc, #332]	; (8002780 <HAL_DMA_Init+0x670>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d04a      	beq.n	80026ce <HAL_DMA_Init+0x5be>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a51      	ldr	r2, [pc, #324]	; (8002784 <HAL_DMA_Init+0x674>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d045      	beq.n	80026ce <HAL_DMA_Init+0x5be>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a50      	ldr	r2, [pc, #320]	; (8002788 <HAL_DMA_Init+0x678>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d040      	beq.n	80026ce <HAL_DMA_Init+0x5be>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a4e      	ldr	r2, [pc, #312]	; (800278c <HAL_DMA_Init+0x67c>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d03b      	beq.n	80026ce <HAL_DMA_Init+0x5be>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a4d      	ldr	r2, [pc, #308]	; (8002790 <HAL_DMA_Init+0x680>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d036      	beq.n	80026ce <HAL_DMA_Init+0x5be>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a4b      	ldr	r2, [pc, #300]	; (8002794 <HAL_DMA_Init+0x684>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d031      	beq.n	80026ce <HAL_DMA_Init+0x5be>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a4a      	ldr	r2, [pc, #296]	; (8002798 <HAL_DMA_Init+0x688>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d02c      	beq.n	80026ce <HAL_DMA_Init+0x5be>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a48      	ldr	r2, [pc, #288]	; (800279c <HAL_DMA_Init+0x68c>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d027      	beq.n	80026ce <HAL_DMA_Init+0x5be>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a47      	ldr	r2, [pc, #284]	; (80027a0 <HAL_DMA_Init+0x690>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d022      	beq.n	80026ce <HAL_DMA_Init+0x5be>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a45      	ldr	r2, [pc, #276]	; (80027a4 <HAL_DMA_Init+0x694>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d01d      	beq.n	80026ce <HAL_DMA_Init+0x5be>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a44      	ldr	r2, [pc, #272]	; (80027a8 <HAL_DMA_Init+0x698>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d018      	beq.n	80026ce <HAL_DMA_Init+0x5be>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a42      	ldr	r2, [pc, #264]	; (80027ac <HAL_DMA_Init+0x69c>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d013      	beq.n	80026ce <HAL_DMA_Init+0x5be>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a41      	ldr	r2, [pc, #260]	; (80027b0 <HAL_DMA_Init+0x6a0>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d00e      	beq.n	80026ce <HAL_DMA_Init+0x5be>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a3f      	ldr	r2, [pc, #252]	; (80027b4 <HAL_DMA_Init+0x6a4>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d009      	beq.n	80026ce <HAL_DMA_Init+0x5be>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a3e      	ldr	r2, [pc, #248]	; (80027b8 <HAL_DMA_Init+0x6a8>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d004      	beq.n	80026ce <HAL_DMA_Init+0x5be>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a3c      	ldr	r2, [pc, #240]	; (80027bc <HAL_DMA_Init+0x6ac>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d101      	bne.n	80026d2 <HAL_DMA_Init+0x5c2>
 80026ce:	2301      	movs	r3, #1
 80026d0:	e000      	b.n	80026d4 <HAL_DMA_Init+0x5c4>
 80026d2:	2300      	movs	r3, #0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d032      	beq.n	800273e <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f002 fbf9 	bl	8004ed0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	2b80      	cmp	r3, #128	; 0x80
 80026e4:	d102      	bne.n	80026ec <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685a      	ldr	r2, [r3, #4]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026f4:	b2d2      	uxtb	r2, r2
 80026f6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002700:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d010      	beq.n	800272c <HAL_DMA_Init+0x61c>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	2b08      	cmp	r3, #8
 8002710:	d80c      	bhi.n	800272c <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f002 fc76 	bl	8005004 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002728:	605a      	str	r2, [r3, #4]
 800272a:	e008      	b.n	800273e <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3718      	adds	r7, #24
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	a7fdabf8 	.word	0xa7fdabf8
 800275c:	cccccccd 	.word	0xcccccccd
 8002760:	40020010 	.word	0x40020010
 8002764:	40020028 	.word	0x40020028
 8002768:	40020040 	.word	0x40020040
 800276c:	40020058 	.word	0x40020058
 8002770:	40020070 	.word	0x40020070
 8002774:	40020088 	.word	0x40020088
 8002778:	400200a0 	.word	0x400200a0
 800277c:	400200b8 	.word	0x400200b8
 8002780:	40020410 	.word	0x40020410
 8002784:	40020428 	.word	0x40020428
 8002788:	40020440 	.word	0x40020440
 800278c:	40020458 	.word	0x40020458
 8002790:	40020470 	.word	0x40020470
 8002794:	40020488 	.word	0x40020488
 8002798:	400204a0 	.word	0x400204a0
 800279c:	400204b8 	.word	0x400204b8
 80027a0:	58025408 	.word	0x58025408
 80027a4:	5802541c 	.word	0x5802541c
 80027a8:	58025430 	.word	0x58025430
 80027ac:	58025444 	.word	0x58025444
 80027b0:	58025458 	.word	0x58025458
 80027b4:	5802546c 	.word	0x5802546c
 80027b8:	58025480 	.word	0x58025480
 80027bc:	58025494 	.word	0x58025494

080027c0 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d101      	bne.n	80027d2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e1a8      	b.n	8002b24 <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a82      	ldr	r2, [pc, #520]	; (80029e0 <HAL_DMA_DeInit+0x220>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d04a      	beq.n	8002872 <HAL_DMA_DeInit+0xb2>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a80      	ldr	r2, [pc, #512]	; (80029e4 <HAL_DMA_DeInit+0x224>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d045      	beq.n	8002872 <HAL_DMA_DeInit+0xb2>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a7f      	ldr	r2, [pc, #508]	; (80029e8 <HAL_DMA_DeInit+0x228>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d040      	beq.n	8002872 <HAL_DMA_DeInit+0xb2>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a7d      	ldr	r2, [pc, #500]	; (80029ec <HAL_DMA_DeInit+0x22c>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d03b      	beq.n	8002872 <HAL_DMA_DeInit+0xb2>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a7c      	ldr	r2, [pc, #496]	; (80029f0 <HAL_DMA_DeInit+0x230>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d036      	beq.n	8002872 <HAL_DMA_DeInit+0xb2>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a7a      	ldr	r2, [pc, #488]	; (80029f4 <HAL_DMA_DeInit+0x234>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d031      	beq.n	8002872 <HAL_DMA_DeInit+0xb2>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a79      	ldr	r2, [pc, #484]	; (80029f8 <HAL_DMA_DeInit+0x238>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d02c      	beq.n	8002872 <HAL_DMA_DeInit+0xb2>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a77      	ldr	r2, [pc, #476]	; (80029fc <HAL_DMA_DeInit+0x23c>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d027      	beq.n	8002872 <HAL_DMA_DeInit+0xb2>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a76      	ldr	r2, [pc, #472]	; (8002a00 <HAL_DMA_DeInit+0x240>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d022      	beq.n	8002872 <HAL_DMA_DeInit+0xb2>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a74      	ldr	r2, [pc, #464]	; (8002a04 <HAL_DMA_DeInit+0x244>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d01d      	beq.n	8002872 <HAL_DMA_DeInit+0xb2>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a73      	ldr	r2, [pc, #460]	; (8002a08 <HAL_DMA_DeInit+0x248>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d018      	beq.n	8002872 <HAL_DMA_DeInit+0xb2>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a71      	ldr	r2, [pc, #452]	; (8002a0c <HAL_DMA_DeInit+0x24c>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d013      	beq.n	8002872 <HAL_DMA_DeInit+0xb2>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a70      	ldr	r2, [pc, #448]	; (8002a10 <HAL_DMA_DeInit+0x250>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d00e      	beq.n	8002872 <HAL_DMA_DeInit+0xb2>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a6e      	ldr	r2, [pc, #440]	; (8002a14 <HAL_DMA_DeInit+0x254>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d009      	beq.n	8002872 <HAL_DMA_DeInit+0xb2>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a6d      	ldr	r2, [pc, #436]	; (8002a18 <HAL_DMA_DeInit+0x258>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d004      	beq.n	8002872 <HAL_DMA_DeInit+0xb2>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a6b      	ldr	r2, [pc, #428]	; (8002a1c <HAL_DMA_DeInit+0x25c>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d108      	bne.n	8002884 <HAL_DMA_DeInit+0xc4>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f022 0201 	bic.w	r2, r2, #1
 8002880:	601a      	str	r2, [r3, #0]
 8002882:	e007      	b.n	8002894 <HAL_DMA_DeInit+0xd4>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f022 0201 	bic.w	r2, r2, #1
 8002892:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a51      	ldr	r2, [pc, #324]	; (80029e0 <HAL_DMA_DeInit+0x220>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d04a      	beq.n	8002934 <HAL_DMA_DeInit+0x174>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a50      	ldr	r2, [pc, #320]	; (80029e4 <HAL_DMA_DeInit+0x224>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d045      	beq.n	8002934 <HAL_DMA_DeInit+0x174>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a4e      	ldr	r2, [pc, #312]	; (80029e8 <HAL_DMA_DeInit+0x228>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d040      	beq.n	8002934 <HAL_DMA_DeInit+0x174>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a4d      	ldr	r2, [pc, #308]	; (80029ec <HAL_DMA_DeInit+0x22c>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d03b      	beq.n	8002934 <HAL_DMA_DeInit+0x174>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a4b      	ldr	r2, [pc, #300]	; (80029f0 <HAL_DMA_DeInit+0x230>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d036      	beq.n	8002934 <HAL_DMA_DeInit+0x174>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a4a      	ldr	r2, [pc, #296]	; (80029f4 <HAL_DMA_DeInit+0x234>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d031      	beq.n	8002934 <HAL_DMA_DeInit+0x174>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a48      	ldr	r2, [pc, #288]	; (80029f8 <HAL_DMA_DeInit+0x238>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d02c      	beq.n	8002934 <HAL_DMA_DeInit+0x174>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a47      	ldr	r2, [pc, #284]	; (80029fc <HAL_DMA_DeInit+0x23c>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d027      	beq.n	8002934 <HAL_DMA_DeInit+0x174>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a45      	ldr	r2, [pc, #276]	; (8002a00 <HAL_DMA_DeInit+0x240>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d022      	beq.n	8002934 <HAL_DMA_DeInit+0x174>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a44      	ldr	r2, [pc, #272]	; (8002a04 <HAL_DMA_DeInit+0x244>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d01d      	beq.n	8002934 <HAL_DMA_DeInit+0x174>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a42      	ldr	r2, [pc, #264]	; (8002a08 <HAL_DMA_DeInit+0x248>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d018      	beq.n	8002934 <HAL_DMA_DeInit+0x174>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a41      	ldr	r2, [pc, #260]	; (8002a0c <HAL_DMA_DeInit+0x24c>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d013      	beq.n	8002934 <HAL_DMA_DeInit+0x174>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a3f      	ldr	r2, [pc, #252]	; (8002a10 <HAL_DMA_DeInit+0x250>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d00e      	beq.n	8002934 <HAL_DMA_DeInit+0x174>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a3e      	ldr	r2, [pc, #248]	; (8002a14 <HAL_DMA_DeInit+0x254>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d009      	beq.n	8002934 <HAL_DMA_DeInit+0x174>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a3c      	ldr	r2, [pc, #240]	; (8002a18 <HAL_DMA_DeInit+0x258>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d004      	beq.n	8002934 <HAL_DMA_DeInit+0x174>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a3b      	ldr	r2, [pc, #236]	; (8002a1c <HAL_DMA_DeInit+0x25c>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d101      	bne.n	8002938 <HAL_DMA_DeInit+0x178>
 8002934:	2301      	movs	r3, #1
 8002936:	e000      	b.n	800293a <HAL_DMA_DeInit+0x17a>
 8002938:	2300      	movs	r3, #0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d025      	beq.n	800298a <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2200      	movs	r2, #0
 8002944:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2200      	movs	r2, #0
 800294c:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2200      	movs	r2, #0
 8002954:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2200      	movs	r2, #0
 800295c:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2200      	movs	r2, #0
 8002964:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2221      	movs	r2, #33	; 0x21
 800296c:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f002 f980 	bl	8004c74 <DMA_CalcBaseAndBitshift>
 8002974:	4603      	mov	r3, r0
 8002976:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800297c:	f003 031f 	and.w	r3, r3, #31
 8002980:	223f      	movs	r2, #63	; 0x3f
 8002982:	409a      	lsls	r2, r3
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	609a      	str	r2, [r3, #8]
 8002988:	e081      	b.n	8002a8e <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a24      	ldr	r2, [pc, #144]	; (8002a20 <HAL_DMA_DeInit+0x260>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d022      	beq.n	80029da <HAL_DMA_DeInit+0x21a>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a22      	ldr	r2, [pc, #136]	; (8002a24 <HAL_DMA_DeInit+0x264>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d01d      	beq.n	80029da <HAL_DMA_DeInit+0x21a>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a21      	ldr	r2, [pc, #132]	; (8002a28 <HAL_DMA_DeInit+0x268>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d018      	beq.n	80029da <HAL_DMA_DeInit+0x21a>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a1f      	ldr	r2, [pc, #124]	; (8002a2c <HAL_DMA_DeInit+0x26c>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d013      	beq.n	80029da <HAL_DMA_DeInit+0x21a>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a1e      	ldr	r2, [pc, #120]	; (8002a30 <HAL_DMA_DeInit+0x270>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d00e      	beq.n	80029da <HAL_DMA_DeInit+0x21a>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a1c      	ldr	r2, [pc, #112]	; (8002a34 <HAL_DMA_DeInit+0x274>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d009      	beq.n	80029da <HAL_DMA_DeInit+0x21a>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a1b      	ldr	r2, [pc, #108]	; (8002a38 <HAL_DMA_DeInit+0x278>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d004      	beq.n	80029da <HAL_DMA_DeInit+0x21a>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a19      	ldr	r2, [pc, #100]	; (8002a3c <HAL_DMA_DeInit+0x27c>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d132      	bne.n	8002a40 <HAL_DMA_DeInit+0x280>
 80029da:	2301      	movs	r3, #1
 80029dc:	e031      	b.n	8002a42 <HAL_DMA_DeInit+0x282>
 80029de:	bf00      	nop
 80029e0:	40020010 	.word	0x40020010
 80029e4:	40020028 	.word	0x40020028
 80029e8:	40020040 	.word	0x40020040
 80029ec:	40020058 	.word	0x40020058
 80029f0:	40020070 	.word	0x40020070
 80029f4:	40020088 	.word	0x40020088
 80029f8:	400200a0 	.word	0x400200a0
 80029fc:	400200b8 	.word	0x400200b8
 8002a00:	40020410 	.word	0x40020410
 8002a04:	40020428 	.word	0x40020428
 8002a08:	40020440 	.word	0x40020440
 8002a0c:	40020458 	.word	0x40020458
 8002a10:	40020470 	.word	0x40020470
 8002a14:	40020488 	.word	0x40020488
 8002a18:	400204a0 	.word	0x400204a0
 8002a1c:	400204b8 	.word	0x400204b8
 8002a20:	58025408 	.word	0x58025408
 8002a24:	5802541c 	.word	0x5802541c
 8002a28:	58025430 	.word	0x58025430
 8002a2c:	58025444 	.word	0x58025444
 8002a30:	58025458 	.word	0x58025458
 8002a34:	5802546c 	.word	0x5802546c
 8002a38:	58025480 	.word	0x58025480
 8002a3c:	58025494 	.word	0x58025494
 8002a40:	2300      	movs	r3, #0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d021      	beq.n	8002a8a <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2200      	movs	r2, #0
 8002a54:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2200      	movs	r2, #0
 8002a64:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f002 f900 	bl	8004c74 <DMA_CalcBaseAndBitshift>
 8002a74:	4603      	mov	r3, r0
 8002a76:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a7c:	f003 031f 	and.w	r3, r3, #31
 8002a80:	2201      	movs	r2, #1
 8002a82:	409a      	lsls	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	605a      	str	r2, [r3, #4]
 8002a88:	e001      	b.n	8002a8e <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e04a      	b.n	8002b24 <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f002 fa1e 	bl	8004ed0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d008      	beq.n	8002aae <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002aac:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d00f      	beq.n	8002ad6 <HAL_DMA_DeInit+0x316>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	2b08      	cmp	r3, #8
 8002abc:	d80b      	bhi.n	8002ad6 <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f002 faa0 	bl	8005004 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002ad4:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	675a      	str	r2, [r3, #116]	; 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback     = NULL;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback      = NULL;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback      = NULL;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3710      	adds	r7, #16
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b086      	sub	sp, #24
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	607a      	str	r2, [r7, #4]
 8002b38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d101      	bne.n	8002b48 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e226      	b.n	8002f96 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d101      	bne.n	8002b56 <HAL_DMA_Start_IT+0x2a>
 8002b52:	2302      	movs	r3, #2
 8002b54:	e21f      	b.n	8002f96 <HAL_DMA_Start_IT+0x46a>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	f040 820a 	bne.w	8002f80 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2202      	movs	r2, #2
 8002b70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2200      	movs	r2, #0
 8002b78:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a68      	ldr	r2, [pc, #416]	; (8002d20 <HAL_DMA_Start_IT+0x1f4>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d04a      	beq.n	8002c1a <HAL_DMA_Start_IT+0xee>
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a66      	ldr	r2, [pc, #408]	; (8002d24 <HAL_DMA_Start_IT+0x1f8>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d045      	beq.n	8002c1a <HAL_DMA_Start_IT+0xee>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a65      	ldr	r2, [pc, #404]	; (8002d28 <HAL_DMA_Start_IT+0x1fc>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d040      	beq.n	8002c1a <HAL_DMA_Start_IT+0xee>
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a63      	ldr	r2, [pc, #396]	; (8002d2c <HAL_DMA_Start_IT+0x200>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d03b      	beq.n	8002c1a <HAL_DMA_Start_IT+0xee>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a62      	ldr	r2, [pc, #392]	; (8002d30 <HAL_DMA_Start_IT+0x204>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d036      	beq.n	8002c1a <HAL_DMA_Start_IT+0xee>
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a60      	ldr	r2, [pc, #384]	; (8002d34 <HAL_DMA_Start_IT+0x208>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d031      	beq.n	8002c1a <HAL_DMA_Start_IT+0xee>
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a5f      	ldr	r2, [pc, #380]	; (8002d38 <HAL_DMA_Start_IT+0x20c>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d02c      	beq.n	8002c1a <HAL_DMA_Start_IT+0xee>
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a5d      	ldr	r2, [pc, #372]	; (8002d3c <HAL_DMA_Start_IT+0x210>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d027      	beq.n	8002c1a <HAL_DMA_Start_IT+0xee>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a5c      	ldr	r2, [pc, #368]	; (8002d40 <HAL_DMA_Start_IT+0x214>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d022      	beq.n	8002c1a <HAL_DMA_Start_IT+0xee>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a5a      	ldr	r2, [pc, #360]	; (8002d44 <HAL_DMA_Start_IT+0x218>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d01d      	beq.n	8002c1a <HAL_DMA_Start_IT+0xee>
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a59      	ldr	r2, [pc, #356]	; (8002d48 <HAL_DMA_Start_IT+0x21c>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d018      	beq.n	8002c1a <HAL_DMA_Start_IT+0xee>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a57      	ldr	r2, [pc, #348]	; (8002d4c <HAL_DMA_Start_IT+0x220>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d013      	beq.n	8002c1a <HAL_DMA_Start_IT+0xee>
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a56      	ldr	r2, [pc, #344]	; (8002d50 <HAL_DMA_Start_IT+0x224>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d00e      	beq.n	8002c1a <HAL_DMA_Start_IT+0xee>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a54      	ldr	r2, [pc, #336]	; (8002d54 <HAL_DMA_Start_IT+0x228>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d009      	beq.n	8002c1a <HAL_DMA_Start_IT+0xee>
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a53      	ldr	r2, [pc, #332]	; (8002d58 <HAL_DMA_Start_IT+0x22c>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d004      	beq.n	8002c1a <HAL_DMA_Start_IT+0xee>
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a51      	ldr	r2, [pc, #324]	; (8002d5c <HAL_DMA_Start_IT+0x230>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d108      	bne.n	8002c2c <HAL_DMA_Start_IT+0x100>
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f022 0201 	bic.w	r2, r2, #1
 8002c28:	601a      	str	r2, [r3, #0]
 8002c2a:	e007      	b.n	8002c3c <HAL_DMA_Start_IT+0x110>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f022 0201 	bic.w	r2, r2, #1
 8002c3a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	68b9      	ldr	r1, [r7, #8]
 8002c42:	68f8      	ldr	r0, [r7, #12]
 8002c44:	f001 fe6a 	bl	800491c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a34      	ldr	r2, [pc, #208]	; (8002d20 <HAL_DMA_Start_IT+0x1f4>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d04a      	beq.n	8002ce8 <HAL_DMA_Start_IT+0x1bc>
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a33      	ldr	r2, [pc, #204]	; (8002d24 <HAL_DMA_Start_IT+0x1f8>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d045      	beq.n	8002ce8 <HAL_DMA_Start_IT+0x1bc>
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a31      	ldr	r2, [pc, #196]	; (8002d28 <HAL_DMA_Start_IT+0x1fc>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d040      	beq.n	8002ce8 <HAL_DMA_Start_IT+0x1bc>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a30      	ldr	r2, [pc, #192]	; (8002d2c <HAL_DMA_Start_IT+0x200>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d03b      	beq.n	8002ce8 <HAL_DMA_Start_IT+0x1bc>
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a2e      	ldr	r2, [pc, #184]	; (8002d30 <HAL_DMA_Start_IT+0x204>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d036      	beq.n	8002ce8 <HAL_DMA_Start_IT+0x1bc>
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a2d      	ldr	r2, [pc, #180]	; (8002d34 <HAL_DMA_Start_IT+0x208>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d031      	beq.n	8002ce8 <HAL_DMA_Start_IT+0x1bc>
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a2b      	ldr	r2, [pc, #172]	; (8002d38 <HAL_DMA_Start_IT+0x20c>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d02c      	beq.n	8002ce8 <HAL_DMA_Start_IT+0x1bc>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a2a      	ldr	r2, [pc, #168]	; (8002d3c <HAL_DMA_Start_IT+0x210>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d027      	beq.n	8002ce8 <HAL_DMA_Start_IT+0x1bc>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a28      	ldr	r2, [pc, #160]	; (8002d40 <HAL_DMA_Start_IT+0x214>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d022      	beq.n	8002ce8 <HAL_DMA_Start_IT+0x1bc>
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a27      	ldr	r2, [pc, #156]	; (8002d44 <HAL_DMA_Start_IT+0x218>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d01d      	beq.n	8002ce8 <HAL_DMA_Start_IT+0x1bc>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a25      	ldr	r2, [pc, #148]	; (8002d48 <HAL_DMA_Start_IT+0x21c>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d018      	beq.n	8002ce8 <HAL_DMA_Start_IT+0x1bc>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a24      	ldr	r2, [pc, #144]	; (8002d4c <HAL_DMA_Start_IT+0x220>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d013      	beq.n	8002ce8 <HAL_DMA_Start_IT+0x1bc>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a22      	ldr	r2, [pc, #136]	; (8002d50 <HAL_DMA_Start_IT+0x224>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d00e      	beq.n	8002ce8 <HAL_DMA_Start_IT+0x1bc>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a21      	ldr	r2, [pc, #132]	; (8002d54 <HAL_DMA_Start_IT+0x228>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d009      	beq.n	8002ce8 <HAL_DMA_Start_IT+0x1bc>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a1f      	ldr	r2, [pc, #124]	; (8002d58 <HAL_DMA_Start_IT+0x22c>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d004      	beq.n	8002ce8 <HAL_DMA_Start_IT+0x1bc>
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a1e      	ldr	r2, [pc, #120]	; (8002d5c <HAL_DMA_Start_IT+0x230>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d101      	bne.n	8002cec <HAL_DMA_Start_IT+0x1c0>
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e000      	b.n	8002cee <HAL_DMA_Start_IT+0x1c2>
 8002cec:	2300      	movs	r3, #0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d036      	beq.n	8002d60 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f023 021e 	bic.w	r2, r3, #30
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f042 0216 	orr.w	r2, r2, #22
 8002d04:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d03e      	beq.n	8002d8c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f042 0208 	orr.w	r2, r2, #8
 8002d1c:	601a      	str	r2, [r3, #0]
 8002d1e:	e035      	b.n	8002d8c <HAL_DMA_Start_IT+0x260>
 8002d20:	40020010 	.word	0x40020010
 8002d24:	40020028 	.word	0x40020028
 8002d28:	40020040 	.word	0x40020040
 8002d2c:	40020058 	.word	0x40020058
 8002d30:	40020070 	.word	0x40020070
 8002d34:	40020088 	.word	0x40020088
 8002d38:	400200a0 	.word	0x400200a0
 8002d3c:	400200b8 	.word	0x400200b8
 8002d40:	40020410 	.word	0x40020410
 8002d44:	40020428 	.word	0x40020428
 8002d48:	40020440 	.word	0x40020440
 8002d4c:	40020458 	.word	0x40020458
 8002d50:	40020470 	.word	0x40020470
 8002d54:	40020488 	.word	0x40020488
 8002d58:	400204a0 	.word	0x400204a0
 8002d5c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f023 020e 	bic.w	r2, r3, #14
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f042 020a 	orr.w	r2, r2, #10
 8002d72:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d007      	beq.n	8002d8c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f042 0204 	orr.w	r2, r2, #4
 8002d8a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a83      	ldr	r2, [pc, #524]	; (8002fa0 <HAL_DMA_Start_IT+0x474>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d072      	beq.n	8002e7c <HAL_DMA_Start_IT+0x350>
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a82      	ldr	r2, [pc, #520]	; (8002fa4 <HAL_DMA_Start_IT+0x478>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d06d      	beq.n	8002e7c <HAL_DMA_Start_IT+0x350>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a80      	ldr	r2, [pc, #512]	; (8002fa8 <HAL_DMA_Start_IT+0x47c>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d068      	beq.n	8002e7c <HAL_DMA_Start_IT+0x350>
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a7f      	ldr	r2, [pc, #508]	; (8002fac <HAL_DMA_Start_IT+0x480>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d063      	beq.n	8002e7c <HAL_DMA_Start_IT+0x350>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a7d      	ldr	r2, [pc, #500]	; (8002fb0 <HAL_DMA_Start_IT+0x484>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d05e      	beq.n	8002e7c <HAL_DMA_Start_IT+0x350>
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a7c      	ldr	r2, [pc, #496]	; (8002fb4 <HAL_DMA_Start_IT+0x488>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d059      	beq.n	8002e7c <HAL_DMA_Start_IT+0x350>
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a7a      	ldr	r2, [pc, #488]	; (8002fb8 <HAL_DMA_Start_IT+0x48c>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d054      	beq.n	8002e7c <HAL_DMA_Start_IT+0x350>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a79      	ldr	r2, [pc, #484]	; (8002fbc <HAL_DMA_Start_IT+0x490>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d04f      	beq.n	8002e7c <HAL_DMA_Start_IT+0x350>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a77      	ldr	r2, [pc, #476]	; (8002fc0 <HAL_DMA_Start_IT+0x494>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d04a      	beq.n	8002e7c <HAL_DMA_Start_IT+0x350>
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a76      	ldr	r2, [pc, #472]	; (8002fc4 <HAL_DMA_Start_IT+0x498>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d045      	beq.n	8002e7c <HAL_DMA_Start_IT+0x350>
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a74      	ldr	r2, [pc, #464]	; (8002fc8 <HAL_DMA_Start_IT+0x49c>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d040      	beq.n	8002e7c <HAL_DMA_Start_IT+0x350>
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a73      	ldr	r2, [pc, #460]	; (8002fcc <HAL_DMA_Start_IT+0x4a0>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d03b      	beq.n	8002e7c <HAL_DMA_Start_IT+0x350>
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a71      	ldr	r2, [pc, #452]	; (8002fd0 <HAL_DMA_Start_IT+0x4a4>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d036      	beq.n	8002e7c <HAL_DMA_Start_IT+0x350>
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a70      	ldr	r2, [pc, #448]	; (8002fd4 <HAL_DMA_Start_IT+0x4a8>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d031      	beq.n	8002e7c <HAL_DMA_Start_IT+0x350>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a6e      	ldr	r2, [pc, #440]	; (8002fd8 <HAL_DMA_Start_IT+0x4ac>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d02c      	beq.n	8002e7c <HAL_DMA_Start_IT+0x350>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a6d      	ldr	r2, [pc, #436]	; (8002fdc <HAL_DMA_Start_IT+0x4b0>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d027      	beq.n	8002e7c <HAL_DMA_Start_IT+0x350>
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a6b      	ldr	r2, [pc, #428]	; (8002fe0 <HAL_DMA_Start_IT+0x4b4>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d022      	beq.n	8002e7c <HAL_DMA_Start_IT+0x350>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a6a      	ldr	r2, [pc, #424]	; (8002fe4 <HAL_DMA_Start_IT+0x4b8>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d01d      	beq.n	8002e7c <HAL_DMA_Start_IT+0x350>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a68      	ldr	r2, [pc, #416]	; (8002fe8 <HAL_DMA_Start_IT+0x4bc>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d018      	beq.n	8002e7c <HAL_DMA_Start_IT+0x350>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a67      	ldr	r2, [pc, #412]	; (8002fec <HAL_DMA_Start_IT+0x4c0>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d013      	beq.n	8002e7c <HAL_DMA_Start_IT+0x350>
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a65      	ldr	r2, [pc, #404]	; (8002ff0 <HAL_DMA_Start_IT+0x4c4>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d00e      	beq.n	8002e7c <HAL_DMA_Start_IT+0x350>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a64      	ldr	r2, [pc, #400]	; (8002ff4 <HAL_DMA_Start_IT+0x4c8>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d009      	beq.n	8002e7c <HAL_DMA_Start_IT+0x350>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a62      	ldr	r2, [pc, #392]	; (8002ff8 <HAL_DMA_Start_IT+0x4cc>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d004      	beq.n	8002e7c <HAL_DMA_Start_IT+0x350>
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a61      	ldr	r2, [pc, #388]	; (8002ffc <HAL_DMA_Start_IT+0x4d0>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d101      	bne.n	8002e80 <HAL_DMA_Start_IT+0x354>
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e000      	b.n	8002e82 <HAL_DMA_Start_IT+0x356>
 8002e80:	2300      	movs	r3, #0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d01a      	beq.n	8002ebc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d007      	beq.n	8002ea4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ea2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d007      	beq.n	8002ebc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002eb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002eba:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a37      	ldr	r2, [pc, #220]	; (8002fa0 <HAL_DMA_Start_IT+0x474>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d04a      	beq.n	8002f5c <HAL_DMA_Start_IT+0x430>
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a36      	ldr	r2, [pc, #216]	; (8002fa4 <HAL_DMA_Start_IT+0x478>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d045      	beq.n	8002f5c <HAL_DMA_Start_IT+0x430>
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a34      	ldr	r2, [pc, #208]	; (8002fa8 <HAL_DMA_Start_IT+0x47c>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d040      	beq.n	8002f5c <HAL_DMA_Start_IT+0x430>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a33      	ldr	r2, [pc, #204]	; (8002fac <HAL_DMA_Start_IT+0x480>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d03b      	beq.n	8002f5c <HAL_DMA_Start_IT+0x430>
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a31      	ldr	r2, [pc, #196]	; (8002fb0 <HAL_DMA_Start_IT+0x484>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d036      	beq.n	8002f5c <HAL_DMA_Start_IT+0x430>
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a30      	ldr	r2, [pc, #192]	; (8002fb4 <HAL_DMA_Start_IT+0x488>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d031      	beq.n	8002f5c <HAL_DMA_Start_IT+0x430>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a2e      	ldr	r2, [pc, #184]	; (8002fb8 <HAL_DMA_Start_IT+0x48c>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d02c      	beq.n	8002f5c <HAL_DMA_Start_IT+0x430>
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a2d      	ldr	r2, [pc, #180]	; (8002fbc <HAL_DMA_Start_IT+0x490>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d027      	beq.n	8002f5c <HAL_DMA_Start_IT+0x430>
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a2b      	ldr	r2, [pc, #172]	; (8002fc0 <HAL_DMA_Start_IT+0x494>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d022      	beq.n	8002f5c <HAL_DMA_Start_IT+0x430>
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a2a      	ldr	r2, [pc, #168]	; (8002fc4 <HAL_DMA_Start_IT+0x498>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d01d      	beq.n	8002f5c <HAL_DMA_Start_IT+0x430>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a28      	ldr	r2, [pc, #160]	; (8002fc8 <HAL_DMA_Start_IT+0x49c>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d018      	beq.n	8002f5c <HAL_DMA_Start_IT+0x430>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a27      	ldr	r2, [pc, #156]	; (8002fcc <HAL_DMA_Start_IT+0x4a0>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d013      	beq.n	8002f5c <HAL_DMA_Start_IT+0x430>
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a25      	ldr	r2, [pc, #148]	; (8002fd0 <HAL_DMA_Start_IT+0x4a4>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d00e      	beq.n	8002f5c <HAL_DMA_Start_IT+0x430>
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a24      	ldr	r2, [pc, #144]	; (8002fd4 <HAL_DMA_Start_IT+0x4a8>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d009      	beq.n	8002f5c <HAL_DMA_Start_IT+0x430>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a22      	ldr	r2, [pc, #136]	; (8002fd8 <HAL_DMA_Start_IT+0x4ac>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d004      	beq.n	8002f5c <HAL_DMA_Start_IT+0x430>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a21      	ldr	r2, [pc, #132]	; (8002fdc <HAL_DMA_Start_IT+0x4b0>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d108      	bne.n	8002f6e <HAL_DMA_Start_IT+0x442>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f042 0201 	orr.w	r2, r2, #1
 8002f6a:	601a      	str	r2, [r3, #0]
 8002f6c:	e012      	b.n	8002f94 <HAL_DMA_Start_IT+0x468>
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f042 0201 	orr.w	r2, r2, #1
 8002f7c:	601a      	str	r2, [r3, #0]
 8002f7e:	e009      	b.n	8002f94 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f86:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002f94:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3718      	adds	r7, #24
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	40020010 	.word	0x40020010
 8002fa4:	40020028 	.word	0x40020028
 8002fa8:	40020040 	.word	0x40020040
 8002fac:	40020058 	.word	0x40020058
 8002fb0:	40020070 	.word	0x40020070
 8002fb4:	40020088 	.word	0x40020088
 8002fb8:	400200a0 	.word	0x400200a0
 8002fbc:	400200b8 	.word	0x400200b8
 8002fc0:	40020410 	.word	0x40020410
 8002fc4:	40020428 	.word	0x40020428
 8002fc8:	40020440 	.word	0x40020440
 8002fcc:	40020458 	.word	0x40020458
 8002fd0:	40020470 	.word	0x40020470
 8002fd4:	40020488 	.word	0x40020488
 8002fd8:	400204a0 	.word	0x400204a0
 8002fdc:	400204b8 	.word	0x400204b8
 8002fe0:	58025408 	.word	0x58025408
 8002fe4:	5802541c 	.word	0x5802541c
 8002fe8:	58025430 	.word	0x58025430
 8002fec:	58025444 	.word	0x58025444
 8002ff0:	58025458 	.word	0x58025458
 8002ff4:	5802546c 	.word	0x5802546c
 8002ff8:	58025480 	.word	0x58025480
 8002ffc:	58025494 	.word	0x58025494

08003000 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b086      	sub	sp, #24
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003008:	f7fe fec4 	bl	8001d94 <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d101      	bne.n	8003018 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e2dc      	b.n	80035d2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800301e:	b2db      	uxtb	r3, r3
 8003020:	2b02      	cmp	r3, #2
 8003022:	d008      	beq.n	8003036 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2280      	movs	r2, #128	; 0x80
 8003028:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e2cd      	b.n	80035d2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a76      	ldr	r2, [pc, #472]	; (8003214 <HAL_DMA_Abort+0x214>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d04a      	beq.n	80030d6 <HAL_DMA_Abort+0xd6>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a74      	ldr	r2, [pc, #464]	; (8003218 <HAL_DMA_Abort+0x218>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d045      	beq.n	80030d6 <HAL_DMA_Abort+0xd6>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a73      	ldr	r2, [pc, #460]	; (800321c <HAL_DMA_Abort+0x21c>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d040      	beq.n	80030d6 <HAL_DMA_Abort+0xd6>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a71      	ldr	r2, [pc, #452]	; (8003220 <HAL_DMA_Abort+0x220>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d03b      	beq.n	80030d6 <HAL_DMA_Abort+0xd6>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a70      	ldr	r2, [pc, #448]	; (8003224 <HAL_DMA_Abort+0x224>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d036      	beq.n	80030d6 <HAL_DMA_Abort+0xd6>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a6e      	ldr	r2, [pc, #440]	; (8003228 <HAL_DMA_Abort+0x228>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d031      	beq.n	80030d6 <HAL_DMA_Abort+0xd6>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a6d      	ldr	r2, [pc, #436]	; (800322c <HAL_DMA_Abort+0x22c>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d02c      	beq.n	80030d6 <HAL_DMA_Abort+0xd6>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a6b      	ldr	r2, [pc, #428]	; (8003230 <HAL_DMA_Abort+0x230>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d027      	beq.n	80030d6 <HAL_DMA_Abort+0xd6>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a6a      	ldr	r2, [pc, #424]	; (8003234 <HAL_DMA_Abort+0x234>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d022      	beq.n	80030d6 <HAL_DMA_Abort+0xd6>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a68      	ldr	r2, [pc, #416]	; (8003238 <HAL_DMA_Abort+0x238>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d01d      	beq.n	80030d6 <HAL_DMA_Abort+0xd6>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a67      	ldr	r2, [pc, #412]	; (800323c <HAL_DMA_Abort+0x23c>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d018      	beq.n	80030d6 <HAL_DMA_Abort+0xd6>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a65      	ldr	r2, [pc, #404]	; (8003240 <HAL_DMA_Abort+0x240>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d013      	beq.n	80030d6 <HAL_DMA_Abort+0xd6>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a64      	ldr	r2, [pc, #400]	; (8003244 <HAL_DMA_Abort+0x244>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d00e      	beq.n	80030d6 <HAL_DMA_Abort+0xd6>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a62      	ldr	r2, [pc, #392]	; (8003248 <HAL_DMA_Abort+0x248>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d009      	beq.n	80030d6 <HAL_DMA_Abort+0xd6>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a61      	ldr	r2, [pc, #388]	; (800324c <HAL_DMA_Abort+0x24c>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d004      	beq.n	80030d6 <HAL_DMA_Abort+0xd6>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a5f      	ldr	r2, [pc, #380]	; (8003250 <HAL_DMA_Abort+0x250>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d101      	bne.n	80030da <HAL_DMA_Abort+0xda>
 80030d6:	2301      	movs	r3, #1
 80030d8:	e000      	b.n	80030dc <HAL_DMA_Abort+0xdc>
 80030da:	2300      	movs	r3, #0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d013      	beq.n	8003108 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f022 021e 	bic.w	r2, r2, #30
 80030ee:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	695a      	ldr	r2, [r3, #20]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030fe:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	617b      	str	r3, [r7, #20]
 8003106:	e00a      	b.n	800311e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f022 020e 	bic.w	r2, r2, #14
 8003116:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a3c      	ldr	r2, [pc, #240]	; (8003214 <HAL_DMA_Abort+0x214>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d072      	beq.n	800320e <HAL_DMA_Abort+0x20e>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a3a      	ldr	r2, [pc, #232]	; (8003218 <HAL_DMA_Abort+0x218>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d06d      	beq.n	800320e <HAL_DMA_Abort+0x20e>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a39      	ldr	r2, [pc, #228]	; (800321c <HAL_DMA_Abort+0x21c>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d068      	beq.n	800320e <HAL_DMA_Abort+0x20e>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a37      	ldr	r2, [pc, #220]	; (8003220 <HAL_DMA_Abort+0x220>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d063      	beq.n	800320e <HAL_DMA_Abort+0x20e>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a36      	ldr	r2, [pc, #216]	; (8003224 <HAL_DMA_Abort+0x224>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d05e      	beq.n	800320e <HAL_DMA_Abort+0x20e>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a34      	ldr	r2, [pc, #208]	; (8003228 <HAL_DMA_Abort+0x228>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d059      	beq.n	800320e <HAL_DMA_Abort+0x20e>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a33      	ldr	r2, [pc, #204]	; (800322c <HAL_DMA_Abort+0x22c>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d054      	beq.n	800320e <HAL_DMA_Abort+0x20e>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a31      	ldr	r2, [pc, #196]	; (8003230 <HAL_DMA_Abort+0x230>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d04f      	beq.n	800320e <HAL_DMA_Abort+0x20e>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a30      	ldr	r2, [pc, #192]	; (8003234 <HAL_DMA_Abort+0x234>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d04a      	beq.n	800320e <HAL_DMA_Abort+0x20e>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a2e      	ldr	r2, [pc, #184]	; (8003238 <HAL_DMA_Abort+0x238>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d045      	beq.n	800320e <HAL_DMA_Abort+0x20e>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a2d      	ldr	r2, [pc, #180]	; (800323c <HAL_DMA_Abort+0x23c>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d040      	beq.n	800320e <HAL_DMA_Abort+0x20e>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a2b      	ldr	r2, [pc, #172]	; (8003240 <HAL_DMA_Abort+0x240>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d03b      	beq.n	800320e <HAL_DMA_Abort+0x20e>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a2a      	ldr	r2, [pc, #168]	; (8003244 <HAL_DMA_Abort+0x244>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d036      	beq.n	800320e <HAL_DMA_Abort+0x20e>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a28      	ldr	r2, [pc, #160]	; (8003248 <HAL_DMA_Abort+0x248>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d031      	beq.n	800320e <HAL_DMA_Abort+0x20e>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a27      	ldr	r2, [pc, #156]	; (800324c <HAL_DMA_Abort+0x24c>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d02c      	beq.n	800320e <HAL_DMA_Abort+0x20e>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a25      	ldr	r2, [pc, #148]	; (8003250 <HAL_DMA_Abort+0x250>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d027      	beq.n	800320e <HAL_DMA_Abort+0x20e>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a24      	ldr	r2, [pc, #144]	; (8003254 <HAL_DMA_Abort+0x254>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d022      	beq.n	800320e <HAL_DMA_Abort+0x20e>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a22      	ldr	r2, [pc, #136]	; (8003258 <HAL_DMA_Abort+0x258>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d01d      	beq.n	800320e <HAL_DMA_Abort+0x20e>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a21      	ldr	r2, [pc, #132]	; (800325c <HAL_DMA_Abort+0x25c>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d018      	beq.n	800320e <HAL_DMA_Abort+0x20e>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a1f      	ldr	r2, [pc, #124]	; (8003260 <HAL_DMA_Abort+0x260>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d013      	beq.n	800320e <HAL_DMA_Abort+0x20e>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a1e      	ldr	r2, [pc, #120]	; (8003264 <HAL_DMA_Abort+0x264>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d00e      	beq.n	800320e <HAL_DMA_Abort+0x20e>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a1c      	ldr	r2, [pc, #112]	; (8003268 <HAL_DMA_Abort+0x268>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d009      	beq.n	800320e <HAL_DMA_Abort+0x20e>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a1b      	ldr	r2, [pc, #108]	; (800326c <HAL_DMA_Abort+0x26c>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d004      	beq.n	800320e <HAL_DMA_Abort+0x20e>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a19      	ldr	r2, [pc, #100]	; (8003270 <HAL_DMA_Abort+0x270>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d132      	bne.n	8003274 <HAL_DMA_Abort+0x274>
 800320e:	2301      	movs	r3, #1
 8003210:	e031      	b.n	8003276 <HAL_DMA_Abort+0x276>
 8003212:	bf00      	nop
 8003214:	40020010 	.word	0x40020010
 8003218:	40020028 	.word	0x40020028
 800321c:	40020040 	.word	0x40020040
 8003220:	40020058 	.word	0x40020058
 8003224:	40020070 	.word	0x40020070
 8003228:	40020088 	.word	0x40020088
 800322c:	400200a0 	.word	0x400200a0
 8003230:	400200b8 	.word	0x400200b8
 8003234:	40020410 	.word	0x40020410
 8003238:	40020428 	.word	0x40020428
 800323c:	40020440 	.word	0x40020440
 8003240:	40020458 	.word	0x40020458
 8003244:	40020470 	.word	0x40020470
 8003248:	40020488 	.word	0x40020488
 800324c:	400204a0 	.word	0x400204a0
 8003250:	400204b8 	.word	0x400204b8
 8003254:	58025408 	.word	0x58025408
 8003258:	5802541c 	.word	0x5802541c
 800325c:	58025430 	.word	0x58025430
 8003260:	58025444 	.word	0x58025444
 8003264:	58025458 	.word	0x58025458
 8003268:	5802546c 	.word	0x5802546c
 800326c:	58025480 	.word	0x58025480
 8003270:	58025494 	.word	0x58025494
 8003274:	2300      	movs	r3, #0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d007      	beq.n	800328a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003284:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003288:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a6d      	ldr	r2, [pc, #436]	; (8003444 <HAL_DMA_Abort+0x444>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d04a      	beq.n	800332a <HAL_DMA_Abort+0x32a>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a6b      	ldr	r2, [pc, #428]	; (8003448 <HAL_DMA_Abort+0x448>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d045      	beq.n	800332a <HAL_DMA_Abort+0x32a>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a6a      	ldr	r2, [pc, #424]	; (800344c <HAL_DMA_Abort+0x44c>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d040      	beq.n	800332a <HAL_DMA_Abort+0x32a>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a68      	ldr	r2, [pc, #416]	; (8003450 <HAL_DMA_Abort+0x450>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d03b      	beq.n	800332a <HAL_DMA_Abort+0x32a>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a67      	ldr	r2, [pc, #412]	; (8003454 <HAL_DMA_Abort+0x454>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d036      	beq.n	800332a <HAL_DMA_Abort+0x32a>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a65      	ldr	r2, [pc, #404]	; (8003458 <HAL_DMA_Abort+0x458>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d031      	beq.n	800332a <HAL_DMA_Abort+0x32a>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a64      	ldr	r2, [pc, #400]	; (800345c <HAL_DMA_Abort+0x45c>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d02c      	beq.n	800332a <HAL_DMA_Abort+0x32a>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a62      	ldr	r2, [pc, #392]	; (8003460 <HAL_DMA_Abort+0x460>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d027      	beq.n	800332a <HAL_DMA_Abort+0x32a>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a61      	ldr	r2, [pc, #388]	; (8003464 <HAL_DMA_Abort+0x464>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d022      	beq.n	800332a <HAL_DMA_Abort+0x32a>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a5f      	ldr	r2, [pc, #380]	; (8003468 <HAL_DMA_Abort+0x468>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d01d      	beq.n	800332a <HAL_DMA_Abort+0x32a>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a5e      	ldr	r2, [pc, #376]	; (800346c <HAL_DMA_Abort+0x46c>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d018      	beq.n	800332a <HAL_DMA_Abort+0x32a>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a5c      	ldr	r2, [pc, #368]	; (8003470 <HAL_DMA_Abort+0x470>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d013      	beq.n	800332a <HAL_DMA_Abort+0x32a>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a5b      	ldr	r2, [pc, #364]	; (8003474 <HAL_DMA_Abort+0x474>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d00e      	beq.n	800332a <HAL_DMA_Abort+0x32a>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a59      	ldr	r2, [pc, #356]	; (8003478 <HAL_DMA_Abort+0x478>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d009      	beq.n	800332a <HAL_DMA_Abort+0x32a>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a58      	ldr	r2, [pc, #352]	; (800347c <HAL_DMA_Abort+0x47c>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d004      	beq.n	800332a <HAL_DMA_Abort+0x32a>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a56      	ldr	r2, [pc, #344]	; (8003480 <HAL_DMA_Abort+0x480>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d108      	bne.n	800333c <HAL_DMA_Abort+0x33c>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f022 0201 	bic.w	r2, r2, #1
 8003338:	601a      	str	r2, [r3, #0]
 800333a:	e007      	b.n	800334c <HAL_DMA_Abort+0x34c>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f022 0201 	bic.w	r2, r2, #1
 800334a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800334c:	e013      	b.n	8003376 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800334e:	f7fe fd21 	bl	8001d94 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	2b05      	cmp	r3, #5
 800335a:	d90c      	bls.n	8003376 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2220      	movs	r2, #32
 8003360:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2203      	movs	r2, #3
 8003366:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e12d      	b.n	80035d2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0301 	and.w	r3, r3, #1
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1e5      	bne.n	800334e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a2f      	ldr	r2, [pc, #188]	; (8003444 <HAL_DMA_Abort+0x444>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d04a      	beq.n	8003422 <HAL_DMA_Abort+0x422>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a2d      	ldr	r2, [pc, #180]	; (8003448 <HAL_DMA_Abort+0x448>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d045      	beq.n	8003422 <HAL_DMA_Abort+0x422>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a2c      	ldr	r2, [pc, #176]	; (800344c <HAL_DMA_Abort+0x44c>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d040      	beq.n	8003422 <HAL_DMA_Abort+0x422>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a2a      	ldr	r2, [pc, #168]	; (8003450 <HAL_DMA_Abort+0x450>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d03b      	beq.n	8003422 <HAL_DMA_Abort+0x422>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a29      	ldr	r2, [pc, #164]	; (8003454 <HAL_DMA_Abort+0x454>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d036      	beq.n	8003422 <HAL_DMA_Abort+0x422>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a27      	ldr	r2, [pc, #156]	; (8003458 <HAL_DMA_Abort+0x458>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d031      	beq.n	8003422 <HAL_DMA_Abort+0x422>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a26      	ldr	r2, [pc, #152]	; (800345c <HAL_DMA_Abort+0x45c>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d02c      	beq.n	8003422 <HAL_DMA_Abort+0x422>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a24      	ldr	r2, [pc, #144]	; (8003460 <HAL_DMA_Abort+0x460>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d027      	beq.n	8003422 <HAL_DMA_Abort+0x422>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a23      	ldr	r2, [pc, #140]	; (8003464 <HAL_DMA_Abort+0x464>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d022      	beq.n	8003422 <HAL_DMA_Abort+0x422>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a21      	ldr	r2, [pc, #132]	; (8003468 <HAL_DMA_Abort+0x468>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d01d      	beq.n	8003422 <HAL_DMA_Abort+0x422>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a20      	ldr	r2, [pc, #128]	; (800346c <HAL_DMA_Abort+0x46c>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d018      	beq.n	8003422 <HAL_DMA_Abort+0x422>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a1e      	ldr	r2, [pc, #120]	; (8003470 <HAL_DMA_Abort+0x470>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d013      	beq.n	8003422 <HAL_DMA_Abort+0x422>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a1d      	ldr	r2, [pc, #116]	; (8003474 <HAL_DMA_Abort+0x474>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d00e      	beq.n	8003422 <HAL_DMA_Abort+0x422>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a1b      	ldr	r2, [pc, #108]	; (8003478 <HAL_DMA_Abort+0x478>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d009      	beq.n	8003422 <HAL_DMA_Abort+0x422>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a1a      	ldr	r2, [pc, #104]	; (800347c <HAL_DMA_Abort+0x47c>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d004      	beq.n	8003422 <HAL_DMA_Abort+0x422>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a18      	ldr	r2, [pc, #96]	; (8003480 <HAL_DMA_Abort+0x480>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d101      	bne.n	8003426 <HAL_DMA_Abort+0x426>
 8003422:	2301      	movs	r3, #1
 8003424:	e000      	b.n	8003428 <HAL_DMA_Abort+0x428>
 8003426:	2300      	movs	r3, #0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d02b      	beq.n	8003484 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003430:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003436:	f003 031f 	and.w	r3, r3, #31
 800343a:	223f      	movs	r2, #63	; 0x3f
 800343c:	409a      	lsls	r2, r3
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	609a      	str	r2, [r3, #8]
 8003442:	e02a      	b.n	800349a <HAL_DMA_Abort+0x49a>
 8003444:	40020010 	.word	0x40020010
 8003448:	40020028 	.word	0x40020028
 800344c:	40020040 	.word	0x40020040
 8003450:	40020058 	.word	0x40020058
 8003454:	40020070 	.word	0x40020070
 8003458:	40020088 	.word	0x40020088
 800345c:	400200a0 	.word	0x400200a0
 8003460:	400200b8 	.word	0x400200b8
 8003464:	40020410 	.word	0x40020410
 8003468:	40020428 	.word	0x40020428
 800346c:	40020440 	.word	0x40020440
 8003470:	40020458 	.word	0x40020458
 8003474:	40020470 	.word	0x40020470
 8003478:	40020488 	.word	0x40020488
 800347c:	400204a0 	.word	0x400204a0
 8003480:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003488:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800348e:	f003 031f 	and.w	r3, r3, #31
 8003492:	2201      	movs	r2, #1
 8003494:	409a      	lsls	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a4f      	ldr	r2, [pc, #316]	; (80035dc <HAL_DMA_Abort+0x5dc>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d072      	beq.n	800358a <HAL_DMA_Abort+0x58a>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a4d      	ldr	r2, [pc, #308]	; (80035e0 <HAL_DMA_Abort+0x5e0>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d06d      	beq.n	800358a <HAL_DMA_Abort+0x58a>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a4c      	ldr	r2, [pc, #304]	; (80035e4 <HAL_DMA_Abort+0x5e4>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d068      	beq.n	800358a <HAL_DMA_Abort+0x58a>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a4a      	ldr	r2, [pc, #296]	; (80035e8 <HAL_DMA_Abort+0x5e8>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d063      	beq.n	800358a <HAL_DMA_Abort+0x58a>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a49      	ldr	r2, [pc, #292]	; (80035ec <HAL_DMA_Abort+0x5ec>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d05e      	beq.n	800358a <HAL_DMA_Abort+0x58a>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a47      	ldr	r2, [pc, #284]	; (80035f0 <HAL_DMA_Abort+0x5f0>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d059      	beq.n	800358a <HAL_DMA_Abort+0x58a>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a46      	ldr	r2, [pc, #280]	; (80035f4 <HAL_DMA_Abort+0x5f4>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d054      	beq.n	800358a <HAL_DMA_Abort+0x58a>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a44      	ldr	r2, [pc, #272]	; (80035f8 <HAL_DMA_Abort+0x5f8>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d04f      	beq.n	800358a <HAL_DMA_Abort+0x58a>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a43      	ldr	r2, [pc, #268]	; (80035fc <HAL_DMA_Abort+0x5fc>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d04a      	beq.n	800358a <HAL_DMA_Abort+0x58a>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a41      	ldr	r2, [pc, #260]	; (8003600 <HAL_DMA_Abort+0x600>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d045      	beq.n	800358a <HAL_DMA_Abort+0x58a>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a40      	ldr	r2, [pc, #256]	; (8003604 <HAL_DMA_Abort+0x604>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d040      	beq.n	800358a <HAL_DMA_Abort+0x58a>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a3e      	ldr	r2, [pc, #248]	; (8003608 <HAL_DMA_Abort+0x608>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d03b      	beq.n	800358a <HAL_DMA_Abort+0x58a>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a3d      	ldr	r2, [pc, #244]	; (800360c <HAL_DMA_Abort+0x60c>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d036      	beq.n	800358a <HAL_DMA_Abort+0x58a>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a3b      	ldr	r2, [pc, #236]	; (8003610 <HAL_DMA_Abort+0x610>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d031      	beq.n	800358a <HAL_DMA_Abort+0x58a>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a3a      	ldr	r2, [pc, #232]	; (8003614 <HAL_DMA_Abort+0x614>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d02c      	beq.n	800358a <HAL_DMA_Abort+0x58a>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a38      	ldr	r2, [pc, #224]	; (8003618 <HAL_DMA_Abort+0x618>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d027      	beq.n	800358a <HAL_DMA_Abort+0x58a>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a37      	ldr	r2, [pc, #220]	; (800361c <HAL_DMA_Abort+0x61c>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d022      	beq.n	800358a <HAL_DMA_Abort+0x58a>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a35      	ldr	r2, [pc, #212]	; (8003620 <HAL_DMA_Abort+0x620>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d01d      	beq.n	800358a <HAL_DMA_Abort+0x58a>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a34      	ldr	r2, [pc, #208]	; (8003624 <HAL_DMA_Abort+0x624>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d018      	beq.n	800358a <HAL_DMA_Abort+0x58a>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a32      	ldr	r2, [pc, #200]	; (8003628 <HAL_DMA_Abort+0x628>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d013      	beq.n	800358a <HAL_DMA_Abort+0x58a>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a31      	ldr	r2, [pc, #196]	; (800362c <HAL_DMA_Abort+0x62c>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d00e      	beq.n	800358a <HAL_DMA_Abort+0x58a>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a2f      	ldr	r2, [pc, #188]	; (8003630 <HAL_DMA_Abort+0x630>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d009      	beq.n	800358a <HAL_DMA_Abort+0x58a>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a2e      	ldr	r2, [pc, #184]	; (8003634 <HAL_DMA_Abort+0x634>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d004      	beq.n	800358a <HAL_DMA_Abort+0x58a>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a2c      	ldr	r2, [pc, #176]	; (8003638 <HAL_DMA_Abort+0x638>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d101      	bne.n	800358e <HAL_DMA_Abort+0x58e>
 800358a:	2301      	movs	r3, #1
 800358c:	e000      	b.n	8003590 <HAL_DMA_Abort+0x590>
 800358e:	2300      	movs	r3, #0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d015      	beq.n	80035c0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800359c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00c      	beq.n	80035c0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035b4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80035be:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3718      	adds	r7, #24
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	40020010 	.word	0x40020010
 80035e0:	40020028 	.word	0x40020028
 80035e4:	40020040 	.word	0x40020040
 80035e8:	40020058 	.word	0x40020058
 80035ec:	40020070 	.word	0x40020070
 80035f0:	40020088 	.word	0x40020088
 80035f4:	400200a0 	.word	0x400200a0
 80035f8:	400200b8 	.word	0x400200b8
 80035fc:	40020410 	.word	0x40020410
 8003600:	40020428 	.word	0x40020428
 8003604:	40020440 	.word	0x40020440
 8003608:	40020458 	.word	0x40020458
 800360c:	40020470 	.word	0x40020470
 8003610:	40020488 	.word	0x40020488
 8003614:	400204a0 	.word	0x400204a0
 8003618:	400204b8 	.word	0x400204b8
 800361c:	58025408 	.word	0x58025408
 8003620:	5802541c 	.word	0x5802541c
 8003624:	58025430 	.word	0x58025430
 8003628:	58025444 	.word	0x58025444
 800362c:	58025458 	.word	0x58025458
 8003630:	5802546c 	.word	0x5802546c
 8003634:	58025480 	.word	0x58025480
 8003638:	58025494 	.word	0x58025494

0800363c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d101      	bne.n	800364e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e237      	b.n	8003abe <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b02      	cmp	r3, #2
 8003658:	d004      	beq.n	8003664 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2280      	movs	r2, #128	; 0x80
 800365e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e22c      	b.n	8003abe <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a5c      	ldr	r2, [pc, #368]	; (80037dc <HAL_DMA_Abort_IT+0x1a0>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d04a      	beq.n	8003704 <HAL_DMA_Abort_IT+0xc8>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a5b      	ldr	r2, [pc, #364]	; (80037e0 <HAL_DMA_Abort_IT+0x1a4>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d045      	beq.n	8003704 <HAL_DMA_Abort_IT+0xc8>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a59      	ldr	r2, [pc, #356]	; (80037e4 <HAL_DMA_Abort_IT+0x1a8>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d040      	beq.n	8003704 <HAL_DMA_Abort_IT+0xc8>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a58      	ldr	r2, [pc, #352]	; (80037e8 <HAL_DMA_Abort_IT+0x1ac>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d03b      	beq.n	8003704 <HAL_DMA_Abort_IT+0xc8>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a56      	ldr	r2, [pc, #344]	; (80037ec <HAL_DMA_Abort_IT+0x1b0>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d036      	beq.n	8003704 <HAL_DMA_Abort_IT+0xc8>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a55      	ldr	r2, [pc, #340]	; (80037f0 <HAL_DMA_Abort_IT+0x1b4>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d031      	beq.n	8003704 <HAL_DMA_Abort_IT+0xc8>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a53      	ldr	r2, [pc, #332]	; (80037f4 <HAL_DMA_Abort_IT+0x1b8>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d02c      	beq.n	8003704 <HAL_DMA_Abort_IT+0xc8>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a52      	ldr	r2, [pc, #328]	; (80037f8 <HAL_DMA_Abort_IT+0x1bc>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d027      	beq.n	8003704 <HAL_DMA_Abort_IT+0xc8>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a50      	ldr	r2, [pc, #320]	; (80037fc <HAL_DMA_Abort_IT+0x1c0>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d022      	beq.n	8003704 <HAL_DMA_Abort_IT+0xc8>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a4f      	ldr	r2, [pc, #316]	; (8003800 <HAL_DMA_Abort_IT+0x1c4>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d01d      	beq.n	8003704 <HAL_DMA_Abort_IT+0xc8>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a4d      	ldr	r2, [pc, #308]	; (8003804 <HAL_DMA_Abort_IT+0x1c8>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d018      	beq.n	8003704 <HAL_DMA_Abort_IT+0xc8>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a4c      	ldr	r2, [pc, #304]	; (8003808 <HAL_DMA_Abort_IT+0x1cc>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d013      	beq.n	8003704 <HAL_DMA_Abort_IT+0xc8>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a4a      	ldr	r2, [pc, #296]	; (800380c <HAL_DMA_Abort_IT+0x1d0>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d00e      	beq.n	8003704 <HAL_DMA_Abort_IT+0xc8>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a49      	ldr	r2, [pc, #292]	; (8003810 <HAL_DMA_Abort_IT+0x1d4>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d009      	beq.n	8003704 <HAL_DMA_Abort_IT+0xc8>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a47      	ldr	r2, [pc, #284]	; (8003814 <HAL_DMA_Abort_IT+0x1d8>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d004      	beq.n	8003704 <HAL_DMA_Abort_IT+0xc8>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a46      	ldr	r2, [pc, #280]	; (8003818 <HAL_DMA_Abort_IT+0x1dc>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d101      	bne.n	8003708 <HAL_DMA_Abort_IT+0xcc>
 8003704:	2301      	movs	r3, #1
 8003706:	e000      	b.n	800370a <HAL_DMA_Abort_IT+0xce>
 8003708:	2300      	movs	r3, #0
 800370a:	2b00      	cmp	r3, #0
 800370c:	f000 8086 	beq.w	800381c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2204      	movs	r2, #4
 8003714:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a2f      	ldr	r2, [pc, #188]	; (80037dc <HAL_DMA_Abort_IT+0x1a0>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d04a      	beq.n	80037b8 <HAL_DMA_Abort_IT+0x17c>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a2e      	ldr	r2, [pc, #184]	; (80037e0 <HAL_DMA_Abort_IT+0x1a4>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d045      	beq.n	80037b8 <HAL_DMA_Abort_IT+0x17c>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a2c      	ldr	r2, [pc, #176]	; (80037e4 <HAL_DMA_Abort_IT+0x1a8>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d040      	beq.n	80037b8 <HAL_DMA_Abort_IT+0x17c>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a2b      	ldr	r2, [pc, #172]	; (80037e8 <HAL_DMA_Abort_IT+0x1ac>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d03b      	beq.n	80037b8 <HAL_DMA_Abort_IT+0x17c>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a29      	ldr	r2, [pc, #164]	; (80037ec <HAL_DMA_Abort_IT+0x1b0>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d036      	beq.n	80037b8 <HAL_DMA_Abort_IT+0x17c>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a28      	ldr	r2, [pc, #160]	; (80037f0 <HAL_DMA_Abort_IT+0x1b4>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d031      	beq.n	80037b8 <HAL_DMA_Abort_IT+0x17c>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a26      	ldr	r2, [pc, #152]	; (80037f4 <HAL_DMA_Abort_IT+0x1b8>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d02c      	beq.n	80037b8 <HAL_DMA_Abort_IT+0x17c>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a25      	ldr	r2, [pc, #148]	; (80037f8 <HAL_DMA_Abort_IT+0x1bc>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d027      	beq.n	80037b8 <HAL_DMA_Abort_IT+0x17c>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a23      	ldr	r2, [pc, #140]	; (80037fc <HAL_DMA_Abort_IT+0x1c0>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d022      	beq.n	80037b8 <HAL_DMA_Abort_IT+0x17c>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a22      	ldr	r2, [pc, #136]	; (8003800 <HAL_DMA_Abort_IT+0x1c4>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d01d      	beq.n	80037b8 <HAL_DMA_Abort_IT+0x17c>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a20      	ldr	r2, [pc, #128]	; (8003804 <HAL_DMA_Abort_IT+0x1c8>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d018      	beq.n	80037b8 <HAL_DMA_Abort_IT+0x17c>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a1f      	ldr	r2, [pc, #124]	; (8003808 <HAL_DMA_Abort_IT+0x1cc>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d013      	beq.n	80037b8 <HAL_DMA_Abort_IT+0x17c>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a1d      	ldr	r2, [pc, #116]	; (800380c <HAL_DMA_Abort_IT+0x1d0>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d00e      	beq.n	80037b8 <HAL_DMA_Abort_IT+0x17c>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a1c      	ldr	r2, [pc, #112]	; (8003810 <HAL_DMA_Abort_IT+0x1d4>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d009      	beq.n	80037b8 <HAL_DMA_Abort_IT+0x17c>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a1a      	ldr	r2, [pc, #104]	; (8003814 <HAL_DMA_Abort_IT+0x1d8>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d004      	beq.n	80037b8 <HAL_DMA_Abort_IT+0x17c>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a19      	ldr	r2, [pc, #100]	; (8003818 <HAL_DMA_Abort_IT+0x1dc>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d108      	bne.n	80037ca <HAL_DMA_Abort_IT+0x18e>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f022 0201 	bic.w	r2, r2, #1
 80037c6:	601a      	str	r2, [r3, #0]
 80037c8:	e178      	b.n	8003abc <HAL_DMA_Abort_IT+0x480>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f022 0201 	bic.w	r2, r2, #1
 80037d8:	601a      	str	r2, [r3, #0]
 80037da:	e16f      	b.n	8003abc <HAL_DMA_Abort_IT+0x480>
 80037dc:	40020010 	.word	0x40020010
 80037e0:	40020028 	.word	0x40020028
 80037e4:	40020040 	.word	0x40020040
 80037e8:	40020058 	.word	0x40020058
 80037ec:	40020070 	.word	0x40020070
 80037f0:	40020088 	.word	0x40020088
 80037f4:	400200a0 	.word	0x400200a0
 80037f8:	400200b8 	.word	0x400200b8
 80037fc:	40020410 	.word	0x40020410
 8003800:	40020428 	.word	0x40020428
 8003804:	40020440 	.word	0x40020440
 8003808:	40020458 	.word	0x40020458
 800380c:	40020470 	.word	0x40020470
 8003810:	40020488 	.word	0x40020488
 8003814:	400204a0 	.word	0x400204a0
 8003818:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f022 020e 	bic.w	r2, r2, #14
 800382a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a6c      	ldr	r2, [pc, #432]	; (80039e4 <HAL_DMA_Abort_IT+0x3a8>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d04a      	beq.n	80038cc <HAL_DMA_Abort_IT+0x290>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a6b      	ldr	r2, [pc, #428]	; (80039e8 <HAL_DMA_Abort_IT+0x3ac>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d045      	beq.n	80038cc <HAL_DMA_Abort_IT+0x290>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a69      	ldr	r2, [pc, #420]	; (80039ec <HAL_DMA_Abort_IT+0x3b0>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d040      	beq.n	80038cc <HAL_DMA_Abort_IT+0x290>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a68      	ldr	r2, [pc, #416]	; (80039f0 <HAL_DMA_Abort_IT+0x3b4>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d03b      	beq.n	80038cc <HAL_DMA_Abort_IT+0x290>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a66      	ldr	r2, [pc, #408]	; (80039f4 <HAL_DMA_Abort_IT+0x3b8>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d036      	beq.n	80038cc <HAL_DMA_Abort_IT+0x290>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a65      	ldr	r2, [pc, #404]	; (80039f8 <HAL_DMA_Abort_IT+0x3bc>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d031      	beq.n	80038cc <HAL_DMA_Abort_IT+0x290>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a63      	ldr	r2, [pc, #396]	; (80039fc <HAL_DMA_Abort_IT+0x3c0>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d02c      	beq.n	80038cc <HAL_DMA_Abort_IT+0x290>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a62      	ldr	r2, [pc, #392]	; (8003a00 <HAL_DMA_Abort_IT+0x3c4>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d027      	beq.n	80038cc <HAL_DMA_Abort_IT+0x290>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a60      	ldr	r2, [pc, #384]	; (8003a04 <HAL_DMA_Abort_IT+0x3c8>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d022      	beq.n	80038cc <HAL_DMA_Abort_IT+0x290>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a5f      	ldr	r2, [pc, #380]	; (8003a08 <HAL_DMA_Abort_IT+0x3cc>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d01d      	beq.n	80038cc <HAL_DMA_Abort_IT+0x290>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a5d      	ldr	r2, [pc, #372]	; (8003a0c <HAL_DMA_Abort_IT+0x3d0>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d018      	beq.n	80038cc <HAL_DMA_Abort_IT+0x290>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a5c      	ldr	r2, [pc, #368]	; (8003a10 <HAL_DMA_Abort_IT+0x3d4>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d013      	beq.n	80038cc <HAL_DMA_Abort_IT+0x290>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a5a      	ldr	r2, [pc, #360]	; (8003a14 <HAL_DMA_Abort_IT+0x3d8>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d00e      	beq.n	80038cc <HAL_DMA_Abort_IT+0x290>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a59      	ldr	r2, [pc, #356]	; (8003a18 <HAL_DMA_Abort_IT+0x3dc>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d009      	beq.n	80038cc <HAL_DMA_Abort_IT+0x290>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a57      	ldr	r2, [pc, #348]	; (8003a1c <HAL_DMA_Abort_IT+0x3e0>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d004      	beq.n	80038cc <HAL_DMA_Abort_IT+0x290>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a56      	ldr	r2, [pc, #344]	; (8003a20 <HAL_DMA_Abort_IT+0x3e4>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d108      	bne.n	80038de <HAL_DMA_Abort_IT+0x2a2>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 0201 	bic.w	r2, r2, #1
 80038da:	601a      	str	r2, [r3, #0]
 80038dc:	e007      	b.n	80038ee <HAL_DMA_Abort_IT+0x2b2>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f022 0201 	bic.w	r2, r2, #1
 80038ec:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a3c      	ldr	r2, [pc, #240]	; (80039e4 <HAL_DMA_Abort_IT+0x3a8>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d072      	beq.n	80039de <HAL_DMA_Abort_IT+0x3a2>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a3a      	ldr	r2, [pc, #232]	; (80039e8 <HAL_DMA_Abort_IT+0x3ac>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d06d      	beq.n	80039de <HAL_DMA_Abort_IT+0x3a2>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a39      	ldr	r2, [pc, #228]	; (80039ec <HAL_DMA_Abort_IT+0x3b0>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d068      	beq.n	80039de <HAL_DMA_Abort_IT+0x3a2>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a37      	ldr	r2, [pc, #220]	; (80039f0 <HAL_DMA_Abort_IT+0x3b4>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d063      	beq.n	80039de <HAL_DMA_Abort_IT+0x3a2>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a36      	ldr	r2, [pc, #216]	; (80039f4 <HAL_DMA_Abort_IT+0x3b8>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d05e      	beq.n	80039de <HAL_DMA_Abort_IT+0x3a2>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a34      	ldr	r2, [pc, #208]	; (80039f8 <HAL_DMA_Abort_IT+0x3bc>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d059      	beq.n	80039de <HAL_DMA_Abort_IT+0x3a2>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a33      	ldr	r2, [pc, #204]	; (80039fc <HAL_DMA_Abort_IT+0x3c0>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d054      	beq.n	80039de <HAL_DMA_Abort_IT+0x3a2>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a31      	ldr	r2, [pc, #196]	; (8003a00 <HAL_DMA_Abort_IT+0x3c4>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d04f      	beq.n	80039de <HAL_DMA_Abort_IT+0x3a2>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a30      	ldr	r2, [pc, #192]	; (8003a04 <HAL_DMA_Abort_IT+0x3c8>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d04a      	beq.n	80039de <HAL_DMA_Abort_IT+0x3a2>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a2e      	ldr	r2, [pc, #184]	; (8003a08 <HAL_DMA_Abort_IT+0x3cc>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d045      	beq.n	80039de <HAL_DMA_Abort_IT+0x3a2>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a2d      	ldr	r2, [pc, #180]	; (8003a0c <HAL_DMA_Abort_IT+0x3d0>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d040      	beq.n	80039de <HAL_DMA_Abort_IT+0x3a2>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a2b      	ldr	r2, [pc, #172]	; (8003a10 <HAL_DMA_Abort_IT+0x3d4>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d03b      	beq.n	80039de <HAL_DMA_Abort_IT+0x3a2>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a2a      	ldr	r2, [pc, #168]	; (8003a14 <HAL_DMA_Abort_IT+0x3d8>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d036      	beq.n	80039de <HAL_DMA_Abort_IT+0x3a2>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a28      	ldr	r2, [pc, #160]	; (8003a18 <HAL_DMA_Abort_IT+0x3dc>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d031      	beq.n	80039de <HAL_DMA_Abort_IT+0x3a2>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a27      	ldr	r2, [pc, #156]	; (8003a1c <HAL_DMA_Abort_IT+0x3e0>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d02c      	beq.n	80039de <HAL_DMA_Abort_IT+0x3a2>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a25      	ldr	r2, [pc, #148]	; (8003a20 <HAL_DMA_Abort_IT+0x3e4>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d027      	beq.n	80039de <HAL_DMA_Abort_IT+0x3a2>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a24      	ldr	r2, [pc, #144]	; (8003a24 <HAL_DMA_Abort_IT+0x3e8>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d022      	beq.n	80039de <HAL_DMA_Abort_IT+0x3a2>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a22      	ldr	r2, [pc, #136]	; (8003a28 <HAL_DMA_Abort_IT+0x3ec>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d01d      	beq.n	80039de <HAL_DMA_Abort_IT+0x3a2>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a21      	ldr	r2, [pc, #132]	; (8003a2c <HAL_DMA_Abort_IT+0x3f0>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d018      	beq.n	80039de <HAL_DMA_Abort_IT+0x3a2>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a1f      	ldr	r2, [pc, #124]	; (8003a30 <HAL_DMA_Abort_IT+0x3f4>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d013      	beq.n	80039de <HAL_DMA_Abort_IT+0x3a2>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a1e      	ldr	r2, [pc, #120]	; (8003a34 <HAL_DMA_Abort_IT+0x3f8>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d00e      	beq.n	80039de <HAL_DMA_Abort_IT+0x3a2>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a1c      	ldr	r2, [pc, #112]	; (8003a38 <HAL_DMA_Abort_IT+0x3fc>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d009      	beq.n	80039de <HAL_DMA_Abort_IT+0x3a2>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a1b      	ldr	r2, [pc, #108]	; (8003a3c <HAL_DMA_Abort_IT+0x400>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d004      	beq.n	80039de <HAL_DMA_Abort_IT+0x3a2>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a19      	ldr	r2, [pc, #100]	; (8003a40 <HAL_DMA_Abort_IT+0x404>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d132      	bne.n	8003a44 <HAL_DMA_Abort_IT+0x408>
 80039de:	2301      	movs	r3, #1
 80039e0:	e031      	b.n	8003a46 <HAL_DMA_Abort_IT+0x40a>
 80039e2:	bf00      	nop
 80039e4:	40020010 	.word	0x40020010
 80039e8:	40020028 	.word	0x40020028
 80039ec:	40020040 	.word	0x40020040
 80039f0:	40020058 	.word	0x40020058
 80039f4:	40020070 	.word	0x40020070
 80039f8:	40020088 	.word	0x40020088
 80039fc:	400200a0 	.word	0x400200a0
 8003a00:	400200b8 	.word	0x400200b8
 8003a04:	40020410 	.word	0x40020410
 8003a08:	40020428 	.word	0x40020428
 8003a0c:	40020440 	.word	0x40020440
 8003a10:	40020458 	.word	0x40020458
 8003a14:	40020470 	.word	0x40020470
 8003a18:	40020488 	.word	0x40020488
 8003a1c:	400204a0 	.word	0x400204a0
 8003a20:	400204b8 	.word	0x400204b8
 8003a24:	58025408 	.word	0x58025408
 8003a28:	5802541c 	.word	0x5802541c
 8003a2c:	58025430 	.word	0x58025430
 8003a30:	58025444 	.word	0x58025444
 8003a34:	58025458 	.word	0x58025458
 8003a38:	5802546c 	.word	0x5802546c
 8003a3c:	58025480 	.word	0x58025480
 8003a40:	58025494 	.word	0x58025494
 8003a44:	2300      	movs	r3, #0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d028      	beq.n	8003a9c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a58:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a5e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a64:	f003 031f 	and.w	r3, r3, #31
 8003a68:	2201      	movs	r2, #1
 8003a6a:	409a      	lsls	r2, r3
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003a78:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d00c      	beq.n	8003a9c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a90:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003a9a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d003      	beq.n	8003abc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop

08003ac8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b08a      	sub	sp, #40	; 0x28
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003ad4:	4b67      	ldr	r3, [pc, #412]	; (8003c74 <HAL_DMA_IRQHandler+0x1ac>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a67      	ldr	r2, [pc, #412]	; (8003c78 <HAL_DMA_IRQHandler+0x1b0>)
 8003ada:	fba2 2303 	umull	r2, r3, r2, r3
 8003ade:	0a9b      	lsrs	r3, r3, #10
 8003ae0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aec:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003aee:	6a3b      	ldr	r3, [r7, #32]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a5f      	ldr	r2, [pc, #380]	; (8003c7c <HAL_DMA_IRQHandler+0x1b4>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d04a      	beq.n	8003b9a <HAL_DMA_IRQHandler+0xd2>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a5d      	ldr	r2, [pc, #372]	; (8003c80 <HAL_DMA_IRQHandler+0x1b8>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d045      	beq.n	8003b9a <HAL_DMA_IRQHandler+0xd2>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a5c      	ldr	r2, [pc, #368]	; (8003c84 <HAL_DMA_IRQHandler+0x1bc>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d040      	beq.n	8003b9a <HAL_DMA_IRQHandler+0xd2>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a5a      	ldr	r2, [pc, #360]	; (8003c88 <HAL_DMA_IRQHandler+0x1c0>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d03b      	beq.n	8003b9a <HAL_DMA_IRQHandler+0xd2>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a59      	ldr	r2, [pc, #356]	; (8003c8c <HAL_DMA_IRQHandler+0x1c4>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d036      	beq.n	8003b9a <HAL_DMA_IRQHandler+0xd2>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a57      	ldr	r2, [pc, #348]	; (8003c90 <HAL_DMA_IRQHandler+0x1c8>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d031      	beq.n	8003b9a <HAL_DMA_IRQHandler+0xd2>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a56      	ldr	r2, [pc, #344]	; (8003c94 <HAL_DMA_IRQHandler+0x1cc>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d02c      	beq.n	8003b9a <HAL_DMA_IRQHandler+0xd2>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a54      	ldr	r2, [pc, #336]	; (8003c98 <HAL_DMA_IRQHandler+0x1d0>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d027      	beq.n	8003b9a <HAL_DMA_IRQHandler+0xd2>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a53      	ldr	r2, [pc, #332]	; (8003c9c <HAL_DMA_IRQHandler+0x1d4>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d022      	beq.n	8003b9a <HAL_DMA_IRQHandler+0xd2>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a51      	ldr	r2, [pc, #324]	; (8003ca0 <HAL_DMA_IRQHandler+0x1d8>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d01d      	beq.n	8003b9a <HAL_DMA_IRQHandler+0xd2>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a50      	ldr	r2, [pc, #320]	; (8003ca4 <HAL_DMA_IRQHandler+0x1dc>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d018      	beq.n	8003b9a <HAL_DMA_IRQHandler+0xd2>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a4e      	ldr	r2, [pc, #312]	; (8003ca8 <HAL_DMA_IRQHandler+0x1e0>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d013      	beq.n	8003b9a <HAL_DMA_IRQHandler+0xd2>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a4d      	ldr	r2, [pc, #308]	; (8003cac <HAL_DMA_IRQHandler+0x1e4>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d00e      	beq.n	8003b9a <HAL_DMA_IRQHandler+0xd2>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a4b      	ldr	r2, [pc, #300]	; (8003cb0 <HAL_DMA_IRQHandler+0x1e8>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d009      	beq.n	8003b9a <HAL_DMA_IRQHandler+0xd2>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a4a      	ldr	r2, [pc, #296]	; (8003cb4 <HAL_DMA_IRQHandler+0x1ec>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d004      	beq.n	8003b9a <HAL_DMA_IRQHandler+0xd2>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a48      	ldr	r2, [pc, #288]	; (8003cb8 <HAL_DMA_IRQHandler+0x1f0>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d101      	bne.n	8003b9e <HAL_DMA_IRQHandler+0xd6>
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e000      	b.n	8003ba0 <HAL_DMA_IRQHandler+0xd8>
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f000 842b 	beq.w	80043fc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003baa:	f003 031f 	and.w	r3, r3, #31
 8003bae:	2208      	movs	r2, #8
 8003bb0:	409a      	lsls	r2, r3
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	f000 80a2 	beq.w	8003d00 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a2e      	ldr	r2, [pc, #184]	; (8003c7c <HAL_DMA_IRQHandler+0x1b4>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d04a      	beq.n	8003c5c <HAL_DMA_IRQHandler+0x194>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a2d      	ldr	r2, [pc, #180]	; (8003c80 <HAL_DMA_IRQHandler+0x1b8>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d045      	beq.n	8003c5c <HAL_DMA_IRQHandler+0x194>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a2b      	ldr	r2, [pc, #172]	; (8003c84 <HAL_DMA_IRQHandler+0x1bc>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d040      	beq.n	8003c5c <HAL_DMA_IRQHandler+0x194>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a2a      	ldr	r2, [pc, #168]	; (8003c88 <HAL_DMA_IRQHandler+0x1c0>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d03b      	beq.n	8003c5c <HAL_DMA_IRQHandler+0x194>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a28      	ldr	r2, [pc, #160]	; (8003c8c <HAL_DMA_IRQHandler+0x1c4>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d036      	beq.n	8003c5c <HAL_DMA_IRQHandler+0x194>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a27      	ldr	r2, [pc, #156]	; (8003c90 <HAL_DMA_IRQHandler+0x1c8>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d031      	beq.n	8003c5c <HAL_DMA_IRQHandler+0x194>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a25      	ldr	r2, [pc, #148]	; (8003c94 <HAL_DMA_IRQHandler+0x1cc>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d02c      	beq.n	8003c5c <HAL_DMA_IRQHandler+0x194>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a24      	ldr	r2, [pc, #144]	; (8003c98 <HAL_DMA_IRQHandler+0x1d0>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d027      	beq.n	8003c5c <HAL_DMA_IRQHandler+0x194>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a22      	ldr	r2, [pc, #136]	; (8003c9c <HAL_DMA_IRQHandler+0x1d4>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d022      	beq.n	8003c5c <HAL_DMA_IRQHandler+0x194>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a21      	ldr	r2, [pc, #132]	; (8003ca0 <HAL_DMA_IRQHandler+0x1d8>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d01d      	beq.n	8003c5c <HAL_DMA_IRQHandler+0x194>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a1f      	ldr	r2, [pc, #124]	; (8003ca4 <HAL_DMA_IRQHandler+0x1dc>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d018      	beq.n	8003c5c <HAL_DMA_IRQHandler+0x194>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a1e      	ldr	r2, [pc, #120]	; (8003ca8 <HAL_DMA_IRQHandler+0x1e0>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d013      	beq.n	8003c5c <HAL_DMA_IRQHandler+0x194>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a1c      	ldr	r2, [pc, #112]	; (8003cac <HAL_DMA_IRQHandler+0x1e4>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d00e      	beq.n	8003c5c <HAL_DMA_IRQHandler+0x194>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a1b      	ldr	r2, [pc, #108]	; (8003cb0 <HAL_DMA_IRQHandler+0x1e8>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d009      	beq.n	8003c5c <HAL_DMA_IRQHandler+0x194>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a19      	ldr	r2, [pc, #100]	; (8003cb4 <HAL_DMA_IRQHandler+0x1ec>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d004      	beq.n	8003c5c <HAL_DMA_IRQHandler+0x194>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a18      	ldr	r2, [pc, #96]	; (8003cb8 <HAL_DMA_IRQHandler+0x1f0>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d12f      	bne.n	8003cbc <HAL_DMA_IRQHandler+0x1f4>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0304 	and.w	r3, r3, #4
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	bf14      	ite	ne
 8003c6a:	2301      	movne	r3, #1
 8003c6c:	2300      	moveq	r3, #0
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	e02e      	b.n	8003cd0 <HAL_DMA_IRQHandler+0x208>
 8003c72:	bf00      	nop
 8003c74:	24000000 	.word	0x24000000
 8003c78:	1b4e81b5 	.word	0x1b4e81b5
 8003c7c:	40020010 	.word	0x40020010
 8003c80:	40020028 	.word	0x40020028
 8003c84:	40020040 	.word	0x40020040
 8003c88:	40020058 	.word	0x40020058
 8003c8c:	40020070 	.word	0x40020070
 8003c90:	40020088 	.word	0x40020088
 8003c94:	400200a0 	.word	0x400200a0
 8003c98:	400200b8 	.word	0x400200b8
 8003c9c:	40020410 	.word	0x40020410
 8003ca0:	40020428 	.word	0x40020428
 8003ca4:	40020440 	.word	0x40020440
 8003ca8:	40020458 	.word	0x40020458
 8003cac:	40020470 	.word	0x40020470
 8003cb0:	40020488 	.word	0x40020488
 8003cb4:	400204a0 	.word	0x400204a0
 8003cb8:	400204b8 	.word	0x400204b8
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0308 	and.w	r3, r3, #8
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	bf14      	ite	ne
 8003cca:	2301      	movne	r3, #1
 8003ccc:	2300      	moveq	r3, #0
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d015      	beq.n	8003d00 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f022 0204 	bic.w	r2, r2, #4
 8003ce2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ce8:	f003 031f 	and.w	r3, r3, #31
 8003cec:	2208      	movs	r2, #8
 8003cee:	409a      	lsls	r2, r3
 8003cf0:	6a3b      	ldr	r3, [r7, #32]
 8003cf2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cf8:	f043 0201 	orr.w	r2, r3, #1
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d04:	f003 031f 	and.w	r3, r3, #31
 8003d08:	69ba      	ldr	r2, [r7, #24]
 8003d0a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d0e:	f003 0301 	and.w	r3, r3, #1
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d06e      	beq.n	8003df4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a69      	ldr	r2, [pc, #420]	; (8003ec0 <HAL_DMA_IRQHandler+0x3f8>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d04a      	beq.n	8003db6 <HAL_DMA_IRQHandler+0x2ee>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a67      	ldr	r2, [pc, #412]	; (8003ec4 <HAL_DMA_IRQHandler+0x3fc>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d045      	beq.n	8003db6 <HAL_DMA_IRQHandler+0x2ee>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a66      	ldr	r2, [pc, #408]	; (8003ec8 <HAL_DMA_IRQHandler+0x400>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d040      	beq.n	8003db6 <HAL_DMA_IRQHandler+0x2ee>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a64      	ldr	r2, [pc, #400]	; (8003ecc <HAL_DMA_IRQHandler+0x404>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d03b      	beq.n	8003db6 <HAL_DMA_IRQHandler+0x2ee>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a63      	ldr	r2, [pc, #396]	; (8003ed0 <HAL_DMA_IRQHandler+0x408>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d036      	beq.n	8003db6 <HAL_DMA_IRQHandler+0x2ee>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a61      	ldr	r2, [pc, #388]	; (8003ed4 <HAL_DMA_IRQHandler+0x40c>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d031      	beq.n	8003db6 <HAL_DMA_IRQHandler+0x2ee>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a60      	ldr	r2, [pc, #384]	; (8003ed8 <HAL_DMA_IRQHandler+0x410>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d02c      	beq.n	8003db6 <HAL_DMA_IRQHandler+0x2ee>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a5e      	ldr	r2, [pc, #376]	; (8003edc <HAL_DMA_IRQHandler+0x414>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d027      	beq.n	8003db6 <HAL_DMA_IRQHandler+0x2ee>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a5d      	ldr	r2, [pc, #372]	; (8003ee0 <HAL_DMA_IRQHandler+0x418>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d022      	beq.n	8003db6 <HAL_DMA_IRQHandler+0x2ee>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a5b      	ldr	r2, [pc, #364]	; (8003ee4 <HAL_DMA_IRQHandler+0x41c>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d01d      	beq.n	8003db6 <HAL_DMA_IRQHandler+0x2ee>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a5a      	ldr	r2, [pc, #360]	; (8003ee8 <HAL_DMA_IRQHandler+0x420>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d018      	beq.n	8003db6 <HAL_DMA_IRQHandler+0x2ee>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a58      	ldr	r2, [pc, #352]	; (8003eec <HAL_DMA_IRQHandler+0x424>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d013      	beq.n	8003db6 <HAL_DMA_IRQHandler+0x2ee>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a57      	ldr	r2, [pc, #348]	; (8003ef0 <HAL_DMA_IRQHandler+0x428>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d00e      	beq.n	8003db6 <HAL_DMA_IRQHandler+0x2ee>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a55      	ldr	r2, [pc, #340]	; (8003ef4 <HAL_DMA_IRQHandler+0x42c>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d009      	beq.n	8003db6 <HAL_DMA_IRQHandler+0x2ee>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a54      	ldr	r2, [pc, #336]	; (8003ef8 <HAL_DMA_IRQHandler+0x430>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d004      	beq.n	8003db6 <HAL_DMA_IRQHandler+0x2ee>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a52      	ldr	r2, [pc, #328]	; (8003efc <HAL_DMA_IRQHandler+0x434>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d10a      	bne.n	8003dcc <HAL_DMA_IRQHandler+0x304>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	695b      	ldr	r3, [r3, #20]
 8003dbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	bf14      	ite	ne
 8003dc4:	2301      	movne	r3, #1
 8003dc6:	2300      	moveq	r3, #0
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	e003      	b.n	8003dd4 <HAL_DMA_IRQHandler+0x30c>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d00d      	beq.n	8003df4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ddc:	f003 031f 	and.w	r3, r3, #31
 8003de0:	2201      	movs	r2, #1
 8003de2:	409a      	lsls	r2, r3
 8003de4:	6a3b      	ldr	r3, [r7, #32]
 8003de6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dec:	f043 0202 	orr.w	r2, r3, #2
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003df8:	f003 031f 	and.w	r3, r3, #31
 8003dfc:	2204      	movs	r2, #4
 8003dfe:	409a      	lsls	r2, r3
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	4013      	ands	r3, r2
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	f000 808f 	beq.w	8003f28 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a2c      	ldr	r2, [pc, #176]	; (8003ec0 <HAL_DMA_IRQHandler+0x3f8>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d04a      	beq.n	8003eaa <HAL_DMA_IRQHandler+0x3e2>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a2a      	ldr	r2, [pc, #168]	; (8003ec4 <HAL_DMA_IRQHandler+0x3fc>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d045      	beq.n	8003eaa <HAL_DMA_IRQHandler+0x3e2>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a29      	ldr	r2, [pc, #164]	; (8003ec8 <HAL_DMA_IRQHandler+0x400>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d040      	beq.n	8003eaa <HAL_DMA_IRQHandler+0x3e2>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a27      	ldr	r2, [pc, #156]	; (8003ecc <HAL_DMA_IRQHandler+0x404>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d03b      	beq.n	8003eaa <HAL_DMA_IRQHandler+0x3e2>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a26      	ldr	r2, [pc, #152]	; (8003ed0 <HAL_DMA_IRQHandler+0x408>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d036      	beq.n	8003eaa <HAL_DMA_IRQHandler+0x3e2>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a24      	ldr	r2, [pc, #144]	; (8003ed4 <HAL_DMA_IRQHandler+0x40c>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d031      	beq.n	8003eaa <HAL_DMA_IRQHandler+0x3e2>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a23      	ldr	r2, [pc, #140]	; (8003ed8 <HAL_DMA_IRQHandler+0x410>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d02c      	beq.n	8003eaa <HAL_DMA_IRQHandler+0x3e2>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a21      	ldr	r2, [pc, #132]	; (8003edc <HAL_DMA_IRQHandler+0x414>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d027      	beq.n	8003eaa <HAL_DMA_IRQHandler+0x3e2>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a20      	ldr	r2, [pc, #128]	; (8003ee0 <HAL_DMA_IRQHandler+0x418>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d022      	beq.n	8003eaa <HAL_DMA_IRQHandler+0x3e2>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a1e      	ldr	r2, [pc, #120]	; (8003ee4 <HAL_DMA_IRQHandler+0x41c>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d01d      	beq.n	8003eaa <HAL_DMA_IRQHandler+0x3e2>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a1d      	ldr	r2, [pc, #116]	; (8003ee8 <HAL_DMA_IRQHandler+0x420>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d018      	beq.n	8003eaa <HAL_DMA_IRQHandler+0x3e2>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a1b      	ldr	r2, [pc, #108]	; (8003eec <HAL_DMA_IRQHandler+0x424>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d013      	beq.n	8003eaa <HAL_DMA_IRQHandler+0x3e2>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a1a      	ldr	r2, [pc, #104]	; (8003ef0 <HAL_DMA_IRQHandler+0x428>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d00e      	beq.n	8003eaa <HAL_DMA_IRQHandler+0x3e2>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a18      	ldr	r2, [pc, #96]	; (8003ef4 <HAL_DMA_IRQHandler+0x42c>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d009      	beq.n	8003eaa <HAL_DMA_IRQHandler+0x3e2>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a17      	ldr	r2, [pc, #92]	; (8003ef8 <HAL_DMA_IRQHandler+0x430>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d004      	beq.n	8003eaa <HAL_DMA_IRQHandler+0x3e2>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a15      	ldr	r2, [pc, #84]	; (8003efc <HAL_DMA_IRQHandler+0x434>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d12a      	bne.n	8003f00 <HAL_DMA_IRQHandler+0x438>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0302 	and.w	r3, r3, #2
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	bf14      	ite	ne
 8003eb8:	2301      	movne	r3, #1
 8003eba:	2300      	moveq	r3, #0
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	e023      	b.n	8003f08 <HAL_DMA_IRQHandler+0x440>
 8003ec0:	40020010 	.word	0x40020010
 8003ec4:	40020028 	.word	0x40020028
 8003ec8:	40020040 	.word	0x40020040
 8003ecc:	40020058 	.word	0x40020058
 8003ed0:	40020070 	.word	0x40020070
 8003ed4:	40020088 	.word	0x40020088
 8003ed8:	400200a0 	.word	0x400200a0
 8003edc:	400200b8 	.word	0x400200b8
 8003ee0:	40020410 	.word	0x40020410
 8003ee4:	40020428 	.word	0x40020428
 8003ee8:	40020440 	.word	0x40020440
 8003eec:	40020458 	.word	0x40020458
 8003ef0:	40020470 	.word	0x40020470
 8003ef4:	40020488 	.word	0x40020488
 8003ef8:	400204a0 	.word	0x400204a0
 8003efc:	400204b8 	.word	0x400204b8
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2300      	movs	r3, #0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d00d      	beq.n	8003f28 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f10:	f003 031f 	and.w	r3, r3, #31
 8003f14:	2204      	movs	r2, #4
 8003f16:	409a      	lsls	r2, r3
 8003f18:	6a3b      	ldr	r3, [r7, #32]
 8003f1a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f20:	f043 0204 	orr.w	r2, r3, #4
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f2c:	f003 031f 	and.w	r3, r3, #31
 8003f30:	2210      	movs	r2, #16
 8003f32:	409a      	lsls	r2, r3
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	4013      	ands	r3, r2
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	f000 80a6 	beq.w	800408a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a85      	ldr	r2, [pc, #532]	; (8004158 <HAL_DMA_IRQHandler+0x690>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d04a      	beq.n	8003fde <HAL_DMA_IRQHandler+0x516>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a83      	ldr	r2, [pc, #524]	; (800415c <HAL_DMA_IRQHandler+0x694>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d045      	beq.n	8003fde <HAL_DMA_IRQHandler+0x516>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a82      	ldr	r2, [pc, #520]	; (8004160 <HAL_DMA_IRQHandler+0x698>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d040      	beq.n	8003fde <HAL_DMA_IRQHandler+0x516>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a80      	ldr	r2, [pc, #512]	; (8004164 <HAL_DMA_IRQHandler+0x69c>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d03b      	beq.n	8003fde <HAL_DMA_IRQHandler+0x516>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a7f      	ldr	r2, [pc, #508]	; (8004168 <HAL_DMA_IRQHandler+0x6a0>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d036      	beq.n	8003fde <HAL_DMA_IRQHandler+0x516>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a7d      	ldr	r2, [pc, #500]	; (800416c <HAL_DMA_IRQHandler+0x6a4>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d031      	beq.n	8003fde <HAL_DMA_IRQHandler+0x516>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a7c      	ldr	r2, [pc, #496]	; (8004170 <HAL_DMA_IRQHandler+0x6a8>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d02c      	beq.n	8003fde <HAL_DMA_IRQHandler+0x516>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a7a      	ldr	r2, [pc, #488]	; (8004174 <HAL_DMA_IRQHandler+0x6ac>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d027      	beq.n	8003fde <HAL_DMA_IRQHandler+0x516>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a79      	ldr	r2, [pc, #484]	; (8004178 <HAL_DMA_IRQHandler+0x6b0>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d022      	beq.n	8003fde <HAL_DMA_IRQHandler+0x516>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a77      	ldr	r2, [pc, #476]	; (800417c <HAL_DMA_IRQHandler+0x6b4>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d01d      	beq.n	8003fde <HAL_DMA_IRQHandler+0x516>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a76      	ldr	r2, [pc, #472]	; (8004180 <HAL_DMA_IRQHandler+0x6b8>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d018      	beq.n	8003fde <HAL_DMA_IRQHandler+0x516>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a74      	ldr	r2, [pc, #464]	; (8004184 <HAL_DMA_IRQHandler+0x6bc>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d013      	beq.n	8003fde <HAL_DMA_IRQHandler+0x516>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a73      	ldr	r2, [pc, #460]	; (8004188 <HAL_DMA_IRQHandler+0x6c0>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d00e      	beq.n	8003fde <HAL_DMA_IRQHandler+0x516>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a71      	ldr	r2, [pc, #452]	; (800418c <HAL_DMA_IRQHandler+0x6c4>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d009      	beq.n	8003fde <HAL_DMA_IRQHandler+0x516>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a70      	ldr	r2, [pc, #448]	; (8004190 <HAL_DMA_IRQHandler+0x6c8>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d004      	beq.n	8003fde <HAL_DMA_IRQHandler+0x516>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a6e      	ldr	r2, [pc, #440]	; (8004194 <HAL_DMA_IRQHandler+0x6cc>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d10a      	bne.n	8003ff4 <HAL_DMA_IRQHandler+0x52c>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0308 	and.w	r3, r3, #8
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	bf14      	ite	ne
 8003fec:	2301      	movne	r3, #1
 8003fee:	2300      	moveq	r3, #0
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	e009      	b.n	8004008 <HAL_DMA_IRQHandler+0x540>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0304 	and.w	r3, r3, #4
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	bf14      	ite	ne
 8004002:	2301      	movne	r3, #1
 8004004:	2300      	moveq	r3, #0
 8004006:	b2db      	uxtb	r3, r3
 8004008:	2b00      	cmp	r3, #0
 800400a:	d03e      	beq.n	800408a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004010:	f003 031f 	and.w	r3, r3, #31
 8004014:	2210      	movs	r2, #16
 8004016:	409a      	lsls	r2, r3
 8004018:	6a3b      	ldr	r3, [r7, #32]
 800401a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d018      	beq.n	800405c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d108      	bne.n	800404a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403c:	2b00      	cmp	r3, #0
 800403e:	d024      	beq.n	800408a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	4798      	blx	r3
 8004048:	e01f      	b.n	800408a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800404e:	2b00      	cmp	r3, #0
 8004050:	d01b      	beq.n	800408a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	4798      	blx	r3
 800405a:	e016      	b.n	800408a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004066:	2b00      	cmp	r3, #0
 8004068:	d107      	bne.n	800407a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f022 0208 	bic.w	r2, r2, #8
 8004078:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407e:	2b00      	cmp	r3, #0
 8004080:	d003      	beq.n	800408a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800408e:	f003 031f 	and.w	r3, r3, #31
 8004092:	2220      	movs	r2, #32
 8004094:	409a      	lsls	r2, r3
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	4013      	ands	r3, r2
 800409a:	2b00      	cmp	r3, #0
 800409c:	f000 8110 	beq.w	80042c0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a2c      	ldr	r2, [pc, #176]	; (8004158 <HAL_DMA_IRQHandler+0x690>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d04a      	beq.n	8004140 <HAL_DMA_IRQHandler+0x678>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a2b      	ldr	r2, [pc, #172]	; (800415c <HAL_DMA_IRQHandler+0x694>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d045      	beq.n	8004140 <HAL_DMA_IRQHandler+0x678>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a29      	ldr	r2, [pc, #164]	; (8004160 <HAL_DMA_IRQHandler+0x698>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d040      	beq.n	8004140 <HAL_DMA_IRQHandler+0x678>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a28      	ldr	r2, [pc, #160]	; (8004164 <HAL_DMA_IRQHandler+0x69c>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d03b      	beq.n	8004140 <HAL_DMA_IRQHandler+0x678>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a26      	ldr	r2, [pc, #152]	; (8004168 <HAL_DMA_IRQHandler+0x6a0>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d036      	beq.n	8004140 <HAL_DMA_IRQHandler+0x678>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a25      	ldr	r2, [pc, #148]	; (800416c <HAL_DMA_IRQHandler+0x6a4>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d031      	beq.n	8004140 <HAL_DMA_IRQHandler+0x678>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a23      	ldr	r2, [pc, #140]	; (8004170 <HAL_DMA_IRQHandler+0x6a8>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d02c      	beq.n	8004140 <HAL_DMA_IRQHandler+0x678>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a22      	ldr	r2, [pc, #136]	; (8004174 <HAL_DMA_IRQHandler+0x6ac>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d027      	beq.n	8004140 <HAL_DMA_IRQHandler+0x678>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a20      	ldr	r2, [pc, #128]	; (8004178 <HAL_DMA_IRQHandler+0x6b0>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d022      	beq.n	8004140 <HAL_DMA_IRQHandler+0x678>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a1f      	ldr	r2, [pc, #124]	; (800417c <HAL_DMA_IRQHandler+0x6b4>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d01d      	beq.n	8004140 <HAL_DMA_IRQHandler+0x678>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a1d      	ldr	r2, [pc, #116]	; (8004180 <HAL_DMA_IRQHandler+0x6b8>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d018      	beq.n	8004140 <HAL_DMA_IRQHandler+0x678>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a1c      	ldr	r2, [pc, #112]	; (8004184 <HAL_DMA_IRQHandler+0x6bc>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d013      	beq.n	8004140 <HAL_DMA_IRQHandler+0x678>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a1a      	ldr	r2, [pc, #104]	; (8004188 <HAL_DMA_IRQHandler+0x6c0>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d00e      	beq.n	8004140 <HAL_DMA_IRQHandler+0x678>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a19      	ldr	r2, [pc, #100]	; (800418c <HAL_DMA_IRQHandler+0x6c4>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d009      	beq.n	8004140 <HAL_DMA_IRQHandler+0x678>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a17      	ldr	r2, [pc, #92]	; (8004190 <HAL_DMA_IRQHandler+0x6c8>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d004      	beq.n	8004140 <HAL_DMA_IRQHandler+0x678>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a16      	ldr	r2, [pc, #88]	; (8004194 <HAL_DMA_IRQHandler+0x6cc>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d12b      	bne.n	8004198 <HAL_DMA_IRQHandler+0x6d0>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0310 	and.w	r3, r3, #16
 800414a:	2b00      	cmp	r3, #0
 800414c:	bf14      	ite	ne
 800414e:	2301      	movne	r3, #1
 8004150:	2300      	moveq	r3, #0
 8004152:	b2db      	uxtb	r3, r3
 8004154:	e02a      	b.n	80041ac <HAL_DMA_IRQHandler+0x6e4>
 8004156:	bf00      	nop
 8004158:	40020010 	.word	0x40020010
 800415c:	40020028 	.word	0x40020028
 8004160:	40020040 	.word	0x40020040
 8004164:	40020058 	.word	0x40020058
 8004168:	40020070 	.word	0x40020070
 800416c:	40020088 	.word	0x40020088
 8004170:	400200a0 	.word	0x400200a0
 8004174:	400200b8 	.word	0x400200b8
 8004178:	40020410 	.word	0x40020410
 800417c:	40020428 	.word	0x40020428
 8004180:	40020440 	.word	0x40020440
 8004184:	40020458 	.word	0x40020458
 8004188:	40020470 	.word	0x40020470
 800418c:	40020488 	.word	0x40020488
 8004190:	400204a0 	.word	0x400204a0
 8004194:	400204b8 	.word	0x400204b8
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	bf14      	ite	ne
 80041a6:	2301      	movne	r3, #1
 80041a8:	2300      	moveq	r3, #0
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	f000 8087 	beq.w	80042c0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041b6:	f003 031f 	and.w	r3, r3, #31
 80041ba:	2220      	movs	r2, #32
 80041bc:	409a      	lsls	r2, r3
 80041be:	6a3b      	ldr	r3, [r7, #32]
 80041c0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	2b04      	cmp	r3, #4
 80041cc:	d139      	bne.n	8004242 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f022 0216 	bic.w	r2, r2, #22
 80041dc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	695a      	ldr	r2, [r3, #20]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041ec:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d103      	bne.n	80041fe <HAL_DMA_IRQHandler+0x736>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d007      	beq.n	800420e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f022 0208 	bic.w	r2, r2, #8
 800420c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004212:	f003 031f 	and.w	r3, r3, #31
 8004216:	223f      	movs	r2, #63	; 0x3f
 8004218:	409a      	lsls	r2, r3
 800421a:	6a3b      	ldr	r3, [r7, #32]
 800421c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2201      	movs	r2, #1
 8004222:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004232:	2b00      	cmp	r3, #0
 8004234:	f000 834a 	beq.w	80048cc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	4798      	blx	r3
          }
          return;
 8004240:	e344      	b.n	80048cc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d018      	beq.n	8004282 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d108      	bne.n	8004270 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004262:	2b00      	cmp	r3, #0
 8004264:	d02c      	beq.n	80042c0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	4798      	blx	r3
 800426e:	e027      	b.n	80042c0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004274:	2b00      	cmp	r3, #0
 8004276:	d023      	beq.n	80042c0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	4798      	blx	r3
 8004280:	e01e      	b.n	80042c0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800428c:	2b00      	cmp	r3, #0
 800428e:	d10f      	bne.n	80042b0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f022 0210 	bic.w	r2, r2, #16
 800429e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d003      	beq.n	80042c0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	f000 8306 	beq.w	80048d6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ce:	f003 0301 	and.w	r3, r3, #1
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	f000 8088 	beq.w	80043e8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2204      	movs	r2, #4
 80042dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a7a      	ldr	r2, [pc, #488]	; (80044d0 <HAL_DMA_IRQHandler+0xa08>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d04a      	beq.n	8004380 <HAL_DMA_IRQHandler+0x8b8>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a79      	ldr	r2, [pc, #484]	; (80044d4 <HAL_DMA_IRQHandler+0xa0c>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d045      	beq.n	8004380 <HAL_DMA_IRQHandler+0x8b8>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a77      	ldr	r2, [pc, #476]	; (80044d8 <HAL_DMA_IRQHandler+0xa10>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d040      	beq.n	8004380 <HAL_DMA_IRQHandler+0x8b8>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a76      	ldr	r2, [pc, #472]	; (80044dc <HAL_DMA_IRQHandler+0xa14>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d03b      	beq.n	8004380 <HAL_DMA_IRQHandler+0x8b8>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a74      	ldr	r2, [pc, #464]	; (80044e0 <HAL_DMA_IRQHandler+0xa18>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d036      	beq.n	8004380 <HAL_DMA_IRQHandler+0x8b8>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a73      	ldr	r2, [pc, #460]	; (80044e4 <HAL_DMA_IRQHandler+0xa1c>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d031      	beq.n	8004380 <HAL_DMA_IRQHandler+0x8b8>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a71      	ldr	r2, [pc, #452]	; (80044e8 <HAL_DMA_IRQHandler+0xa20>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d02c      	beq.n	8004380 <HAL_DMA_IRQHandler+0x8b8>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a70      	ldr	r2, [pc, #448]	; (80044ec <HAL_DMA_IRQHandler+0xa24>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d027      	beq.n	8004380 <HAL_DMA_IRQHandler+0x8b8>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a6e      	ldr	r2, [pc, #440]	; (80044f0 <HAL_DMA_IRQHandler+0xa28>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d022      	beq.n	8004380 <HAL_DMA_IRQHandler+0x8b8>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a6d      	ldr	r2, [pc, #436]	; (80044f4 <HAL_DMA_IRQHandler+0xa2c>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d01d      	beq.n	8004380 <HAL_DMA_IRQHandler+0x8b8>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a6b      	ldr	r2, [pc, #428]	; (80044f8 <HAL_DMA_IRQHandler+0xa30>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d018      	beq.n	8004380 <HAL_DMA_IRQHandler+0x8b8>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a6a      	ldr	r2, [pc, #424]	; (80044fc <HAL_DMA_IRQHandler+0xa34>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d013      	beq.n	8004380 <HAL_DMA_IRQHandler+0x8b8>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a68      	ldr	r2, [pc, #416]	; (8004500 <HAL_DMA_IRQHandler+0xa38>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d00e      	beq.n	8004380 <HAL_DMA_IRQHandler+0x8b8>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a67      	ldr	r2, [pc, #412]	; (8004504 <HAL_DMA_IRQHandler+0xa3c>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d009      	beq.n	8004380 <HAL_DMA_IRQHandler+0x8b8>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a65      	ldr	r2, [pc, #404]	; (8004508 <HAL_DMA_IRQHandler+0xa40>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d004      	beq.n	8004380 <HAL_DMA_IRQHandler+0x8b8>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a64      	ldr	r2, [pc, #400]	; (800450c <HAL_DMA_IRQHandler+0xa44>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d108      	bne.n	8004392 <HAL_DMA_IRQHandler+0x8ca>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f022 0201 	bic.w	r2, r2, #1
 800438e:	601a      	str	r2, [r3, #0]
 8004390:	e007      	b.n	80043a2 <HAL_DMA_IRQHandler+0x8da>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f022 0201 	bic.w	r2, r2, #1
 80043a0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	3301      	adds	r3, #1
 80043a6:	60fb      	str	r3, [r7, #12]
 80043a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d307      	bcc.n	80043be <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0301 	and.w	r3, r3, #1
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d1f2      	bne.n	80043a2 <HAL_DMA_IRQHandler+0x8da>
 80043bc:	e000      	b.n	80043c0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80043be:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0301 	and.w	r3, r3, #1
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d004      	beq.n	80043d8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2203      	movs	r2, #3
 80043d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80043d6:	e003      	b.n	80043e0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	f000 8272 	beq.w	80048d6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	4798      	blx	r3
 80043fa:	e26c      	b.n	80048d6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a43      	ldr	r2, [pc, #268]	; (8004510 <HAL_DMA_IRQHandler+0xa48>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d022      	beq.n	800444c <HAL_DMA_IRQHandler+0x984>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a42      	ldr	r2, [pc, #264]	; (8004514 <HAL_DMA_IRQHandler+0xa4c>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d01d      	beq.n	800444c <HAL_DMA_IRQHandler+0x984>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a40      	ldr	r2, [pc, #256]	; (8004518 <HAL_DMA_IRQHandler+0xa50>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d018      	beq.n	800444c <HAL_DMA_IRQHandler+0x984>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a3f      	ldr	r2, [pc, #252]	; (800451c <HAL_DMA_IRQHandler+0xa54>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d013      	beq.n	800444c <HAL_DMA_IRQHandler+0x984>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a3d      	ldr	r2, [pc, #244]	; (8004520 <HAL_DMA_IRQHandler+0xa58>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d00e      	beq.n	800444c <HAL_DMA_IRQHandler+0x984>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a3c      	ldr	r2, [pc, #240]	; (8004524 <HAL_DMA_IRQHandler+0xa5c>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d009      	beq.n	800444c <HAL_DMA_IRQHandler+0x984>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a3a      	ldr	r2, [pc, #232]	; (8004528 <HAL_DMA_IRQHandler+0xa60>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d004      	beq.n	800444c <HAL_DMA_IRQHandler+0x984>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a39      	ldr	r2, [pc, #228]	; (800452c <HAL_DMA_IRQHandler+0xa64>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d101      	bne.n	8004450 <HAL_DMA_IRQHandler+0x988>
 800444c:	2301      	movs	r3, #1
 800444e:	e000      	b.n	8004452 <HAL_DMA_IRQHandler+0x98a>
 8004450:	2300      	movs	r3, #0
 8004452:	2b00      	cmp	r3, #0
 8004454:	f000 823f 	beq.w	80048d6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004464:	f003 031f 	and.w	r3, r3, #31
 8004468:	2204      	movs	r2, #4
 800446a:	409a      	lsls	r2, r3
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	4013      	ands	r3, r2
 8004470:	2b00      	cmp	r3, #0
 8004472:	f000 80cd 	beq.w	8004610 <HAL_DMA_IRQHandler+0xb48>
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	f003 0304 	and.w	r3, r3, #4
 800447c:	2b00      	cmp	r3, #0
 800447e:	f000 80c7 	beq.w	8004610 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004486:	f003 031f 	and.w	r3, r3, #31
 800448a:	2204      	movs	r2, #4
 800448c:	409a      	lsls	r2, r3
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004498:	2b00      	cmp	r3, #0
 800449a:	d049      	beq.n	8004530 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d109      	bne.n	80044ba <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	f000 8210 	beq.w	80048d0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044b8:	e20a      	b.n	80048d0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044be:	2b00      	cmp	r3, #0
 80044c0:	f000 8206 	beq.w	80048d0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044cc:	e200      	b.n	80048d0 <HAL_DMA_IRQHandler+0xe08>
 80044ce:	bf00      	nop
 80044d0:	40020010 	.word	0x40020010
 80044d4:	40020028 	.word	0x40020028
 80044d8:	40020040 	.word	0x40020040
 80044dc:	40020058 	.word	0x40020058
 80044e0:	40020070 	.word	0x40020070
 80044e4:	40020088 	.word	0x40020088
 80044e8:	400200a0 	.word	0x400200a0
 80044ec:	400200b8 	.word	0x400200b8
 80044f0:	40020410 	.word	0x40020410
 80044f4:	40020428 	.word	0x40020428
 80044f8:	40020440 	.word	0x40020440
 80044fc:	40020458 	.word	0x40020458
 8004500:	40020470 	.word	0x40020470
 8004504:	40020488 	.word	0x40020488
 8004508:	400204a0 	.word	0x400204a0
 800450c:	400204b8 	.word	0x400204b8
 8004510:	58025408 	.word	0x58025408
 8004514:	5802541c 	.word	0x5802541c
 8004518:	58025430 	.word	0x58025430
 800451c:	58025444 	.word	0x58025444
 8004520:	58025458 	.word	0x58025458
 8004524:	5802546c 	.word	0x5802546c
 8004528:	58025480 	.word	0x58025480
 800452c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	f003 0320 	and.w	r3, r3, #32
 8004536:	2b00      	cmp	r3, #0
 8004538:	d160      	bne.n	80045fc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a7f      	ldr	r2, [pc, #508]	; (800473c <HAL_DMA_IRQHandler+0xc74>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d04a      	beq.n	80045da <HAL_DMA_IRQHandler+0xb12>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a7d      	ldr	r2, [pc, #500]	; (8004740 <HAL_DMA_IRQHandler+0xc78>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d045      	beq.n	80045da <HAL_DMA_IRQHandler+0xb12>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a7c      	ldr	r2, [pc, #496]	; (8004744 <HAL_DMA_IRQHandler+0xc7c>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d040      	beq.n	80045da <HAL_DMA_IRQHandler+0xb12>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a7a      	ldr	r2, [pc, #488]	; (8004748 <HAL_DMA_IRQHandler+0xc80>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d03b      	beq.n	80045da <HAL_DMA_IRQHandler+0xb12>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a79      	ldr	r2, [pc, #484]	; (800474c <HAL_DMA_IRQHandler+0xc84>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d036      	beq.n	80045da <HAL_DMA_IRQHandler+0xb12>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a77      	ldr	r2, [pc, #476]	; (8004750 <HAL_DMA_IRQHandler+0xc88>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d031      	beq.n	80045da <HAL_DMA_IRQHandler+0xb12>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a76      	ldr	r2, [pc, #472]	; (8004754 <HAL_DMA_IRQHandler+0xc8c>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d02c      	beq.n	80045da <HAL_DMA_IRQHandler+0xb12>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a74      	ldr	r2, [pc, #464]	; (8004758 <HAL_DMA_IRQHandler+0xc90>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d027      	beq.n	80045da <HAL_DMA_IRQHandler+0xb12>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a73      	ldr	r2, [pc, #460]	; (800475c <HAL_DMA_IRQHandler+0xc94>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d022      	beq.n	80045da <HAL_DMA_IRQHandler+0xb12>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a71      	ldr	r2, [pc, #452]	; (8004760 <HAL_DMA_IRQHandler+0xc98>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d01d      	beq.n	80045da <HAL_DMA_IRQHandler+0xb12>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a70      	ldr	r2, [pc, #448]	; (8004764 <HAL_DMA_IRQHandler+0xc9c>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d018      	beq.n	80045da <HAL_DMA_IRQHandler+0xb12>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a6e      	ldr	r2, [pc, #440]	; (8004768 <HAL_DMA_IRQHandler+0xca0>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d013      	beq.n	80045da <HAL_DMA_IRQHandler+0xb12>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a6d      	ldr	r2, [pc, #436]	; (800476c <HAL_DMA_IRQHandler+0xca4>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d00e      	beq.n	80045da <HAL_DMA_IRQHandler+0xb12>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a6b      	ldr	r2, [pc, #428]	; (8004770 <HAL_DMA_IRQHandler+0xca8>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d009      	beq.n	80045da <HAL_DMA_IRQHandler+0xb12>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a6a      	ldr	r2, [pc, #424]	; (8004774 <HAL_DMA_IRQHandler+0xcac>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d004      	beq.n	80045da <HAL_DMA_IRQHandler+0xb12>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a68      	ldr	r2, [pc, #416]	; (8004778 <HAL_DMA_IRQHandler+0xcb0>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d108      	bne.n	80045ec <HAL_DMA_IRQHandler+0xb24>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f022 0208 	bic.w	r2, r2, #8
 80045e8:	601a      	str	r2, [r3, #0]
 80045ea:	e007      	b.n	80045fc <HAL_DMA_IRQHandler+0xb34>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f022 0204 	bic.w	r2, r2, #4
 80045fa:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004600:	2b00      	cmp	r3, #0
 8004602:	f000 8165 	beq.w	80048d0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800460e:	e15f      	b.n	80048d0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004614:	f003 031f 	and.w	r3, r3, #31
 8004618:	2202      	movs	r2, #2
 800461a:	409a      	lsls	r2, r3
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	4013      	ands	r3, r2
 8004620:	2b00      	cmp	r3, #0
 8004622:	f000 80c5 	beq.w	80047b0 <HAL_DMA_IRQHandler+0xce8>
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	f003 0302 	and.w	r3, r3, #2
 800462c:	2b00      	cmp	r3, #0
 800462e:	f000 80bf 	beq.w	80047b0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004636:	f003 031f 	and.w	r3, r3, #31
 800463a:	2202      	movs	r2, #2
 800463c:	409a      	lsls	r2, r3
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d018      	beq.n	800467e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d109      	bne.n	800466a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800465a:	2b00      	cmp	r3, #0
 800465c:	f000 813a 	beq.w	80048d4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004668:	e134      	b.n	80048d4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800466e:	2b00      	cmp	r3, #0
 8004670:	f000 8130 	beq.w	80048d4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800467c:	e12a      	b.n	80048d4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	f003 0320 	and.w	r3, r3, #32
 8004684:	2b00      	cmp	r3, #0
 8004686:	f040 8089 	bne.w	800479c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a2b      	ldr	r2, [pc, #172]	; (800473c <HAL_DMA_IRQHandler+0xc74>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d04a      	beq.n	800472a <HAL_DMA_IRQHandler+0xc62>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a29      	ldr	r2, [pc, #164]	; (8004740 <HAL_DMA_IRQHandler+0xc78>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d045      	beq.n	800472a <HAL_DMA_IRQHandler+0xc62>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a28      	ldr	r2, [pc, #160]	; (8004744 <HAL_DMA_IRQHandler+0xc7c>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d040      	beq.n	800472a <HAL_DMA_IRQHandler+0xc62>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a26      	ldr	r2, [pc, #152]	; (8004748 <HAL_DMA_IRQHandler+0xc80>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d03b      	beq.n	800472a <HAL_DMA_IRQHandler+0xc62>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a25      	ldr	r2, [pc, #148]	; (800474c <HAL_DMA_IRQHandler+0xc84>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d036      	beq.n	800472a <HAL_DMA_IRQHandler+0xc62>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a23      	ldr	r2, [pc, #140]	; (8004750 <HAL_DMA_IRQHandler+0xc88>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d031      	beq.n	800472a <HAL_DMA_IRQHandler+0xc62>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a22      	ldr	r2, [pc, #136]	; (8004754 <HAL_DMA_IRQHandler+0xc8c>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d02c      	beq.n	800472a <HAL_DMA_IRQHandler+0xc62>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a20      	ldr	r2, [pc, #128]	; (8004758 <HAL_DMA_IRQHandler+0xc90>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d027      	beq.n	800472a <HAL_DMA_IRQHandler+0xc62>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a1f      	ldr	r2, [pc, #124]	; (800475c <HAL_DMA_IRQHandler+0xc94>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d022      	beq.n	800472a <HAL_DMA_IRQHandler+0xc62>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a1d      	ldr	r2, [pc, #116]	; (8004760 <HAL_DMA_IRQHandler+0xc98>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d01d      	beq.n	800472a <HAL_DMA_IRQHandler+0xc62>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a1c      	ldr	r2, [pc, #112]	; (8004764 <HAL_DMA_IRQHandler+0xc9c>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d018      	beq.n	800472a <HAL_DMA_IRQHandler+0xc62>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a1a      	ldr	r2, [pc, #104]	; (8004768 <HAL_DMA_IRQHandler+0xca0>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d013      	beq.n	800472a <HAL_DMA_IRQHandler+0xc62>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a19      	ldr	r2, [pc, #100]	; (800476c <HAL_DMA_IRQHandler+0xca4>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d00e      	beq.n	800472a <HAL_DMA_IRQHandler+0xc62>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a17      	ldr	r2, [pc, #92]	; (8004770 <HAL_DMA_IRQHandler+0xca8>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d009      	beq.n	800472a <HAL_DMA_IRQHandler+0xc62>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a16      	ldr	r2, [pc, #88]	; (8004774 <HAL_DMA_IRQHandler+0xcac>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d004      	beq.n	800472a <HAL_DMA_IRQHandler+0xc62>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a14      	ldr	r2, [pc, #80]	; (8004778 <HAL_DMA_IRQHandler+0xcb0>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d128      	bne.n	800477c <HAL_DMA_IRQHandler+0xcb4>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f022 0214 	bic.w	r2, r2, #20
 8004738:	601a      	str	r2, [r3, #0]
 800473a:	e027      	b.n	800478c <HAL_DMA_IRQHandler+0xcc4>
 800473c:	40020010 	.word	0x40020010
 8004740:	40020028 	.word	0x40020028
 8004744:	40020040 	.word	0x40020040
 8004748:	40020058 	.word	0x40020058
 800474c:	40020070 	.word	0x40020070
 8004750:	40020088 	.word	0x40020088
 8004754:	400200a0 	.word	0x400200a0
 8004758:	400200b8 	.word	0x400200b8
 800475c:	40020410 	.word	0x40020410
 8004760:	40020428 	.word	0x40020428
 8004764:	40020440 	.word	0x40020440
 8004768:	40020458 	.word	0x40020458
 800476c:	40020470 	.word	0x40020470
 8004770:	40020488 	.word	0x40020488
 8004774:	400204a0 	.word	0x400204a0
 8004778:	400204b8 	.word	0x400204b8
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f022 020a 	bic.w	r2, r2, #10
 800478a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	f000 8097 	beq.w	80048d4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047ae:	e091      	b.n	80048d4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047b4:	f003 031f 	and.w	r3, r3, #31
 80047b8:	2208      	movs	r2, #8
 80047ba:	409a      	lsls	r2, r3
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	4013      	ands	r3, r2
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	f000 8088 	beq.w	80048d6 <HAL_DMA_IRQHandler+0xe0e>
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	f003 0308 	and.w	r3, r3, #8
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	f000 8082 	beq.w	80048d6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a41      	ldr	r2, [pc, #260]	; (80048dc <HAL_DMA_IRQHandler+0xe14>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d04a      	beq.n	8004872 <HAL_DMA_IRQHandler+0xdaa>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a3f      	ldr	r2, [pc, #252]	; (80048e0 <HAL_DMA_IRQHandler+0xe18>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d045      	beq.n	8004872 <HAL_DMA_IRQHandler+0xdaa>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a3e      	ldr	r2, [pc, #248]	; (80048e4 <HAL_DMA_IRQHandler+0xe1c>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d040      	beq.n	8004872 <HAL_DMA_IRQHandler+0xdaa>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a3c      	ldr	r2, [pc, #240]	; (80048e8 <HAL_DMA_IRQHandler+0xe20>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d03b      	beq.n	8004872 <HAL_DMA_IRQHandler+0xdaa>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a3b      	ldr	r2, [pc, #236]	; (80048ec <HAL_DMA_IRQHandler+0xe24>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d036      	beq.n	8004872 <HAL_DMA_IRQHandler+0xdaa>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a39      	ldr	r2, [pc, #228]	; (80048f0 <HAL_DMA_IRQHandler+0xe28>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d031      	beq.n	8004872 <HAL_DMA_IRQHandler+0xdaa>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a38      	ldr	r2, [pc, #224]	; (80048f4 <HAL_DMA_IRQHandler+0xe2c>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d02c      	beq.n	8004872 <HAL_DMA_IRQHandler+0xdaa>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a36      	ldr	r2, [pc, #216]	; (80048f8 <HAL_DMA_IRQHandler+0xe30>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d027      	beq.n	8004872 <HAL_DMA_IRQHandler+0xdaa>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a35      	ldr	r2, [pc, #212]	; (80048fc <HAL_DMA_IRQHandler+0xe34>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d022      	beq.n	8004872 <HAL_DMA_IRQHandler+0xdaa>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a33      	ldr	r2, [pc, #204]	; (8004900 <HAL_DMA_IRQHandler+0xe38>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d01d      	beq.n	8004872 <HAL_DMA_IRQHandler+0xdaa>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a32      	ldr	r2, [pc, #200]	; (8004904 <HAL_DMA_IRQHandler+0xe3c>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d018      	beq.n	8004872 <HAL_DMA_IRQHandler+0xdaa>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a30      	ldr	r2, [pc, #192]	; (8004908 <HAL_DMA_IRQHandler+0xe40>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d013      	beq.n	8004872 <HAL_DMA_IRQHandler+0xdaa>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a2f      	ldr	r2, [pc, #188]	; (800490c <HAL_DMA_IRQHandler+0xe44>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d00e      	beq.n	8004872 <HAL_DMA_IRQHandler+0xdaa>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a2d      	ldr	r2, [pc, #180]	; (8004910 <HAL_DMA_IRQHandler+0xe48>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d009      	beq.n	8004872 <HAL_DMA_IRQHandler+0xdaa>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a2c      	ldr	r2, [pc, #176]	; (8004914 <HAL_DMA_IRQHandler+0xe4c>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d004      	beq.n	8004872 <HAL_DMA_IRQHandler+0xdaa>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a2a      	ldr	r2, [pc, #168]	; (8004918 <HAL_DMA_IRQHandler+0xe50>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d108      	bne.n	8004884 <HAL_DMA_IRQHandler+0xdbc>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f022 021c 	bic.w	r2, r2, #28
 8004880:	601a      	str	r2, [r3, #0]
 8004882:	e007      	b.n	8004894 <HAL_DMA_IRQHandler+0xdcc>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f022 020e 	bic.w	r2, r2, #14
 8004892:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004898:	f003 031f 	and.w	r3, r3, #31
 800489c:	2201      	movs	r2, #1
 800489e:	409a      	lsls	r2, r3
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2201      	movs	r2, #1
 80048ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d009      	beq.n	80048d6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	4798      	blx	r3
 80048ca:	e004      	b.n	80048d6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80048cc:	bf00      	nop
 80048ce:	e002      	b.n	80048d6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048d0:	bf00      	nop
 80048d2:	e000      	b.n	80048d6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048d4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80048d6:	3728      	adds	r7, #40	; 0x28
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	40020010 	.word	0x40020010
 80048e0:	40020028 	.word	0x40020028
 80048e4:	40020040 	.word	0x40020040
 80048e8:	40020058 	.word	0x40020058
 80048ec:	40020070 	.word	0x40020070
 80048f0:	40020088 	.word	0x40020088
 80048f4:	400200a0 	.word	0x400200a0
 80048f8:	400200b8 	.word	0x400200b8
 80048fc:	40020410 	.word	0x40020410
 8004900:	40020428 	.word	0x40020428
 8004904:	40020440 	.word	0x40020440
 8004908:	40020458 	.word	0x40020458
 800490c:	40020470 	.word	0x40020470
 8004910:	40020488 	.word	0x40020488
 8004914:	400204a0 	.word	0x400204a0
 8004918:	400204b8 	.word	0x400204b8

0800491c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800491c:	b480      	push	{r7}
 800491e:	b087      	sub	sp, #28
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	607a      	str	r2, [r7, #4]
 8004928:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800492e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004934:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a7f      	ldr	r2, [pc, #508]	; (8004b38 <DMA_SetConfig+0x21c>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d072      	beq.n	8004a26 <DMA_SetConfig+0x10a>
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a7d      	ldr	r2, [pc, #500]	; (8004b3c <DMA_SetConfig+0x220>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d06d      	beq.n	8004a26 <DMA_SetConfig+0x10a>
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a7c      	ldr	r2, [pc, #496]	; (8004b40 <DMA_SetConfig+0x224>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d068      	beq.n	8004a26 <DMA_SetConfig+0x10a>
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a7a      	ldr	r2, [pc, #488]	; (8004b44 <DMA_SetConfig+0x228>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d063      	beq.n	8004a26 <DMA_SetConfig+0x10a>
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a79      	ldr	r2, [pc, #484]	; (8004b48 <DMA_SetConfig+0x22c>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d05e      	beq.n	8004a26 <DMA_SetConfig+0x10a>
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a77      	ldr	r2, [pc, #476]	; (8004b4c <DMA_SetConfig+0x230>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d059      	beq.n	8004a26 <DMA_SetConfig+0x10a>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a76      	ldr	r2, [pc, #472]	; (8004b50 <DMA_SetConfig+0x234>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d054      	beq.n	8004a26 <DMA_SetConfig+0x10a>
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a74      	ldr	r2, [pc, #464]	; (8004b54 <DMA_SetConfig+0x238>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d04f      	beq.n	8004a26 <DMA_SetConfig+0x10a>
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a73      	ldr	r2, [pc, #460]	; (8004b58 <DMA_SetConfig+0x23c>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d04a      	beq.n	8004a26 <DMA_SetConfig+0x10a>
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a71      	ldr	r2, [pc, #452]	; (8004b5c <DMA_SetConfig+0x240>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d045      	beq.n	8004a26 <DMA_SetConfig+0x10a>
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a70      	ldr	r2, [pc, #448]	; (8004b60 <DMA_SetConfig+0x244>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d040      	beq.n	8004a26 <DMA_SetConfig+0x10a>
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a6e      	ldr	r2, [pc, #440]	; (8004b64 <DMA_SetConfig+0x248>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d03b      	beq.n	8004a26 <DMA_SetConfig+0x10a>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a6d      	ldr	r2, [pc, #436]	; (8004b68 <DMA_SetConfig+0x24c>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d036      	beq.n	8004a26 <DMA_SetConfig+0x10a>
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a6b      	ldr	r2, [pc, #428]	; (8004b6c <DMA_SetConfig+0x250>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d031      	beq.n	8004a26 <DMA_SetConfig+0x10a>
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a6a      	ldr	r2, [pc, #424]	; (8004b70 <DMA_SetConfig+0x254>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d02c      	beq.n	8004a26 <DMA_SetConfig+0x10a>
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a68      	ldr	r2, [pc, #416]	; (8004b74 <DMA_SetConfig+0x258>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d027      	beq.n	8004a26 <DMA_SetConfig+0x10a>
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a67      	ldr	r2, [pc, #412]	; (8004b78 <DMA_SetConfig+0x25c>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d022      	beq.n	8004a26 <DMA_SetConfig+0x10a>
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a65      	ldr	r2, [pc, #404]	; (8004b7c <DMA_SetConfig+0x260>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d01d      	beq.n	8004a26 <DMA_SetConfig+0x10a>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a64      	ldr	r2, [pc, #400]	; (8004b80 <DMA_SetConfig+0x264>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d018      	beq.n	8004a26 <DMA_SetConfig+0x10a>
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a62      	ldr	r2, [pc, #392]	; (8004b84 <DMA_SetConfig+0x268>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d013      	beq.n	8004a26 <DMA_SetConfig+0x10a>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a61      	ldr	r2, [pc, #388]	; (8004b88 <DMA_SetConfig+0x26c>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d00e      	beq.n	8004a26 <DMA_SetConfig+0x10a>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a5f      	ldr	r2, [pc, #380]	; (8004b8c <DMA_SetConfig+0x270>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d009      	beq.n	8004a26 <DMA_SetConfig+0x10a>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a5e      	ldr	r2, [pc, #376]	; (8004b90 <DMA_SetConfig+0x274>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d004      	beq.n	8004a26 <DMA_SetConfig+0x10a>
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a5c      	ldr	r2, [pc, #368]	; (8004b94 <DMA_SetConfig+0x278>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d101      	bne.n	8004a2a <DMA_SetConfig+0x10e>
 8004a26:	2301      	movs	r3, #1
 8004a28:	e000      	b.n	8004a2c <DMA_SetConfig+0x110>
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d00d      	beq.n	8004a4c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a34:	68fa      	ldr	r2, [r7, #12]
 8004a36:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004a38:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d004      	beq.n	8004a4c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004a4a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a39      	ldr	r2, [pc, #228]	; (8004b38 <DMA_SetConfig+0x21c>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d04a      	beq.n	8004aec <DMA_SetConfig+0x1d0>
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a38      	ldr	r2, [pc, #224]	; (8004b3c <DMA_SetConfig+0x220>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d045      	beq.n	8004aec <DMA_SetConfig+0x1d0>
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a36      	ldr	r2, [pc, #216]	; (8004b40 <DMA_SetConfig+0x224>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d040      	beq.n	8004aec <DMA_SetConfig+0x1d0>
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a35      	ldr	r2, [pc, #212]	; (8004b44 <DMA_SetConfig+0x228>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d03b      	beq.n	8004aec <DMA_SetConfig+0x1d0>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a33      	ldr	r2, [pc, #204]	; (8004b48 <DMA_SetConfig+0x22c>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d036      	beq.n	8004aec <DMA_SetConfig+0x1d0>
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a32      	ldr	r2, [pc, #200]	; (8004b4c <DMA_SetConfig+0x230>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d031      	beq.n	8004aec <DMA_SetConfig+0x1d0>
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a30      	ldr	r2, [pc, #192]	; (8004b50 <DMA_SetConfig+0x234>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d02c      	beq.n	8004aec <DMA_SetConfig+0x1d0>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a2f      	ldr	r2, [pc, #188]	; (8004b54 <DMA_SetConfig+0x238>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d027      	beq.n	8004aec <DMA_SetConfig+0x1d0>
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a2d      	ldr	r2, [pc, #180]	; (8004b58 <DMA_SetConfig+0x23c>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d022      	beq.n	8004aec <DMA_SetConfig+0x1d0>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a2c      	ldr	r2, [pc, #176]	; (8004b5c <DMA_SetConfig+0x240>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d01d      	beq.n	8004aec <DMA_SetConfig+0x1d0>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a2a      	ldr	r2, [pc, #168]	; (8004b60 <DMA_SetConfig+0x244>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d018      	beq.n	8004aec <DMA_SetConfig+0x1d0>
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a29      	ldr	r2, [pc, #164]	; (8004b64 <DMA_SetConfig+0x248>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d013      	beq.n	8004aec <DMA_SetConfig+0x1d0>
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a27      	ldr	r2, [pc, #156]	; (8004b68 <DMA_SetConfig+0x24c>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d00e      	beq.n	8004aec <DMA_SetConfig+0x1d0>
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a26      	ldr	r2, [pc, #152]	; (8004b6c <DMA_SetConfig+0x250>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d009      	beq.n	8004aec <DMA_SetConfig+0x1d0>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a24      	ldr	r2, [pc, #144]	; (8004b70 <DMA_SetConfig+0x254>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d004      	beq.n	8004aec <DMA_SetConfig+0x1d0>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a23      	ldr	r2, [pc, #140]	; (8004b74 <DMA_SetConfig+0x258>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d101      	bne.n	8004af0 <DMA_SetConfig+0x1d4>
 8004aec:	2301      	movs	r3, #1
 8004aee:	e000      	b.n	8004af2 <DMA_SetConfig+0x1d6>
 8004af0:	2300      	movs	r3, #0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d059      	beq.n	8004baa <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004afa:	f003 031f 	and.w	r3, r3, #31
 8004afe:	223f      	movs	r2, #63	; 0x3f
 8004b00:	409a      	lsls	r2, r3
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004b14:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	683a      	ldr	r2, [r7, #0]
 8004b1c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	2b40      	cmp	r3, #64	; 0x40
 8004b24:	d138      	bne.n	8004b98 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68ba      	ldr	r2, [r7, #8]
 8004b34:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004b36:	e086      	b.n	8004c46 <DMA_SetConfig+0x32a>
 8004b38:	40020010 	.word	0x40020010
 8004b3c:	40020028 	.word	0x40020028
 8004b40:	40020040 	.word	0x40020040
 8004b44:	40020058 	.word	0x40020058
 8004b48:	40020070 	.word	0x40020070
 8004b4c:	40020088 	.word	0x40020088
 8004b50:	400200a0 	.word	0x400200a0
 8004b54:	400200b8 	.word	0x400200b8
 8004b58:	40020410 	.word	0x40020410
 8004b5c:	40020428 	.word	0x40020428
 8004b60:	40020440 	.word	0x40020440
 8004b64:	40020458 	.word	0x40020458
 8004b68:	40020470 	.word	0x40020470
 8004b6c:	40020488 	.word	0x40020488
 8004b70:	400204a0 	.word	0x400204a0
 8004b74:	400204b8 	.word	0x400204b8
 8004b78:	58025408 	.word	0x58025408
 8004b7c:	5802541c 	.word	0x5802541c
 8004b80:	58025430 	.word	0x58025430
 8004b84:	58025444 	.word	0x58025444
 8004b88:	58025458 	.word	0x58025458
 8004b8c:	5802546c 	.word	0x5802546c
 8004b90:	58025480 	.word	0x58025480
 8004b94:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	68ba      	ldr	r2, [r7, #8]
 8004b9e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	60da      	str	r2, [r3, #12]
}
 8004ba8:	e04d      	b.n	8004c46 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a29      	ldr	r2, [pc, #164]	; (8004c54 <DMA_SetConfig+0x338>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d022      	beq.n	8004bfa <DMA_SetConfig+0x2de>
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a27      	ldr	r2, [pc, #156]	; (8004c58 <DMA_SetConfig+0x33c>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d01d      	beq.n	8004bfa <DMA_SetConfig+0x2de>
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a26      	ldr	r2, [pc, #152]	; (8004c5c <DMA_SetConfig+0x340>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d018      	beq.n	8004bfa <DMA_SetConfig+0x2de>
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a24      	ldr	r2, [pc, #144]	; (8004c60 <DMA_SetConfig+0x344>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d013      	beq.n	8004bfa <DMA_SetConfig+0x2de>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a23      	ldr	r2, [pc, #140]	; (8004c64 <DMA_SetConfig+0x348>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d00e      	beq.n	8004bfa <DMA_SetConfig+0x2de>
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a21      	ldr	r2, [pc, #132]	; (8004c68 <DMA_SetConfig+0x34c>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d009      	beq.n	8004bfa <DMA_SetConfig+0x2de>
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a20      	ldr	r2, [pc, #128]	; (8004c6c <DMA_SetConfig+0x350>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d004      	beq.n	8004bfa <DMA_SetConfig+0x2de>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a1e      	ldr	r2, [pc, #120]	; (8004c70 <DMA_SetConfig+0x354>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d101      	bne.n	8004bfe <DMA_SetConfig+0x2e2>
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e000      	b.n	8004c00 <DMA_SetConfig+0x2e4>
 8004bfe:	2300      	movs	r3, #0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d020      	beq.n	8004c46 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c08:	f003 031f 	and.w	r3, r3, #31
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	409a      	lsls	r2, r3
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	683a      	ldr	r2, [r7, #0]
 8004c1a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	2b40      	cmp	r3, #64	; 0x40
 8004c22:	d108      	bne.n	8004c36 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	68ba      	ldr	r2, [r7, #8]
 8004c32:	60da      	str	r2, [r3, #12]
}
 8004c34:	e007      	b.n	8004c46 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	68ba      	ldr	r2, [r7, #8]
 8004c3c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	60da      	str	r2, [r3, #12]
}
 8004c46:	bf00      	nop
 8004c48:	371c      	adds	r7, #28
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop
 8004c54:	58025408 	.word	0x58025408
 8004c58:	5802541c 	.word	0x5802541c
 8004c5c:	58025430 	.word	0x58025430
 8004c60:	58025444 	.word	0x58025444
 8004c64:	58025458 	.word	0x58025458
 8004c68:	5802546c 	.word	0x5802546c
 8004c6c:	58025480 	.word	0x58025480
 8004c70:	58025494 	.word	0x58025494

08004c74 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b085      	sub	sp, #20
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a42      	ldr	r2, [pc, #264]	; (8004d8c <DMA_CalcBaseAndBitshift+0x118>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d04a      	beq.n	8004d1c <DMA_CalcBaseAndBitshift+0xa8>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a41      	ldr	r2, [pc, #260]	; (8004d90 <DMA_CalcBaseAndBitshift+0x11c>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d045      	beq.n	8004d1c <DMA_CalcBaseAndBitshift+0xa8>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a3f      	ldr	r2, [pc, #252]	; (8004d94 <DMA_CalcBaseAndBitshift+0x120>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d040      	beq.n	8004d1c <DMA_CalcBaseAndBitshift+0xa8>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a3e      	ldr	r2, [pc, #248]	; (8004d98 <DMA_CalcBaseAndBitshift+0x124>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d03b      	beq.n	8004d1c <DMA_CalcBaseAndBitshift+0xa8>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a3c      	ldr	r2, [pc, #240]	; (8004d9c <DMA_CalcBaseAndBitshift+0x128>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d036      	beq.n	8004d1c <DMA_CalcBaseAndBitshift+0xa8>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a3b      	ldr	r2, [pc, #236]	; (8004da0 <DMA_CalcBaseAndBitshift+0x12c>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d031      	beq.n	8004d1c <DMA_CalcBaseAndBitshift+0xa8>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a39      	ldr	r2, [pc, #228]	; (8004da4 <DMA_CalcBaseAndBitshift+0x130>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d02c      	beq.n	8004d1c <DMA_CalcBaseAndBitshift+0xa8>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a38      	ldr	r2, [pc, #224]	; (8004da8 <DMA_CalcBaseAndBitshift+0x134>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d027      	beq.n	8004d1c <DMA_CalcBaseAndBitshift+0xa8>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a36      	ldr	r2, [pc, #216]	; (8004dac <DMA_CalcBaseAndBitshift+0x138>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d022      	beq.n	8004d1c <DMA_CalcBaseAndBitshift+0xa8>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a35      	ldr	r2, [pc, #212]	; (8004db0 <DMA_CalcBaseAndBitshift+0x13c>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d01d      	beq.n	8004d1c <DMA_CalcBaseAndBitshift+0xa8>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a33      	ldr	r2, [pc, #204]	; (8004db4 <DMA_CalcBaseAndBitshift+0x140>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d018      	beq.n	8004d1c <DMA_CalcBaseAndBitshift+0xa8>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a32      	ldr	r2, [pc, #200]	; (8004db8 <DMA_CalcBaseAndBitshift+0x144>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d013      	beq.n	8004d1c <DMA_CalcBaseAndBitshift+0xa8>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a30      	ldr	r2, [pc, #192]	; (8004dbc <DMA_CalcBaseAndBitshift+0x148>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d00e      	beq.n	8004d1c <DMA_CalcBaseAndBitshift+0xa8>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a2f      	ldr	r2, [pc, #188]	; (8004dc0 <DMA_CalcBaseAndBitshift+0x14c>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d009      	beq.n	8004d1c <DMA_CalcBaseAndBitshift+0xa8>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a2d      	ldr	r2, [pc, #180]	; (8004dc4 <DMA_CalcBaseAndBitshift+0x150>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d004      	beq.n	8004d1c <DMA_CalcBaseAndBitshift+0xa8>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a2c      	ldr	r2, [pc, #176]	; (8004dc8 <DMA_CalcBaseAndBitshift+0x154>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d101      	bne.n	8004d20 <DMA_CalcBaseAndBitshift+0xac>
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e000      	b.n	8004d22 <DMA_CalcBaseAndBitshift+0xae>
 8004d20:	2300      	movs	r3, #0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d024      	beq.n	8004d70 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	3b10      	subs	r3, #16
 8004d2e:	4a27      	ldr	r2, [pc, #156]	; (8004dcc <DMA_CalcBaseAndBitshift+0x158>)
 8004d30:	fba2 2303 	umull	r2, r3, r2, r3
 8004d34:	091b      	lsrs	r3, r3, #4
 8004d36:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f003 0307 	and.w	r3, r3, #7
 8004d3e:	4a24      	ldr	r2, [pc, #144]	; (8004dd0 <DMA_CalcBaseAndBitshift+0x15c>)
 8004d40:	5cd3      	ldrb	r3, [r2, r3]
 8004d42:	461a      	mov	r2, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2b03      	cmp	r3, #3
 8004d4c:	d908      	bls.n	8004d60 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	461a      	mov	r2, r3
 8004d54:	4b1f      	ldr	r3, [pc, #124]	; (8004dd4 <DMA_CalcBaseAndBitshift+0x160>)
 8004d56:	4013      	ands	r3, r2
 8004d58:	1d1a      	adds	r2, r3, #4
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	659a      	str	r2, [r3, #88]	; 0x58
 8004d5e:	e00d      	b.n	8004d7c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	461a      	mov	r2, r3
 8004d66:	4b1b      	ldr	r3, [pc, #108]	; (8004dd4 <DMA_CalcBaseAndBitshift+0x160>)
 8004d68:	4013      	ands	r3, r2
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	6593      	str	r3, [r2, #88]	; 0x58
 8004d6e:	e005      	b.n	8004d7c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3714      	adds	r7, #20
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr
 8004d8c:	40020010 	.word	0x40020010
 8004d90:	40020028 	.word	0x40020028
 8004d94:	40020040 	.word	0x40020040
 8004d98:	40020058 	.word	0x40020058
 8004d9c:	40020070 	.word	0x40020070
 8004da0:	40020088 	.word	0x40020088
 8004da4:	400200a0 	.word	0x400200a0
 8004da8:	400200b8 	.word	0x400200b8
 8004dac:	40020410 	.word	0x40020410
 8004db0:	40020428 	.word	0x40020428
 8004db4:	40020440 	.word	0x40020440
 8004db8:	40020458 	.word	0x40020458
 8004dbc:	40020470 	.word	0x40020470
 8004dc0:	40020488 	.word	0x40020488
 8004dc4:	400204a0 	.word	0x400204a0
 8004dc8:	400204b8 	.word	0x400204b8
 8004dcc:	aaaaaaab 	.word	0xaaaaaaab
 8004dd0:	08010ff4 	.word	0x08010ff4
 8004dd4:	fffffc00 	.word	0xfffffc00

08004dd8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004de0:	2300      	movs	r3, #0
 8004de2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	699b      	ldr	r3, [r3, #24]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d120      	bne.n	8004e2e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df0:	2b03      	cmp	r3, #3
 8004df2:	d858      	bhi.n	8004ea6 <DMA_CheckFifoParam+0xce>
 8004df4:	a201      	add	r2, pc, #4	; (adr r2, 8004dfc <DMA_CheckFifoParam+0x24>)
 8004df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dfa:	bf00      	nop
 8004dfc:	08004e0d 	.word	0x08004e0d
 8004e00:	08004e1f 	.word	0x08004e1f
 8004e04:	08004e0d 	.word	0x08004e0d
 8004e08:	08004ea7 	.word	0x08004ea7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d048      	beq.n	8004eaa <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e1c:	e045      	b.n	8004eaa <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e22:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e26:	d142      	bne.n	8004eae <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e2c:	e03f      	b.n	8004eae <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	699b      	ldr	r3, [r3, #24]
 8004e32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e36:	d123      	bne.n	8004e80 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e3c:	2b03      	cmp	r3, #3
 8004e3e:	d838      	bhi.n	8004eb2 <DMA_CheckFifoParam+0xda>
 8004e40:	a201      	add	r2, pc, #4	; (adr r2, 8004e48 <DMA_CheckFifoParam+0x70>)
 8004e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e46:	bf00      	nop
 8004e48:	08004e59 	.word	0x08004e59
 8004e4c:	08004e5f 	.word	0x08004e5f
 8004e50:	08004e59 	.word	0x08004e59
 8004e54:	08004e71 	.word	0x08004e71
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	73fb      	strb	r3, [r7, #15]
        break;
 8004e5c:	e030      	b.n	8004ec0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d025      	beq.n	8004eb6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e6e:	e022      	b.n	8004eb6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e74:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e78:	d11f      	bne.n	8004eba <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e7e:	e01c      	b.n	8004eba <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	d902      	bls.n	8004e8e <DMA_CheckFifoParam+0xb6>
 8004e88:	2b03      	cmp	r3, #3
 8004e8a:	d003      	beq.n	8004e94 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004e8c:	e018      	b.n	8004ec0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	73fb      	strb	r3, [r7, #15]
        break;
 8004e92:	e015      	b.n	8004ec0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d00e      	beq.n	8004ebe <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	73fb      	strb	r3, [r7, #15]
    break;
 8004ea4:	e00b      	b.n	8004ebe <DMA_CheckFifoParam+0xe6>
        break;
 8004ea6:	bf00      	nop
 8004ea8:	e00a      	b.n	8004ec0 <DMA_CheckFifoParam+0xe8>
        break;
 8004eaa:	bf00      	nop
 8004eac:	e008      	b.n	8004ec0 <DMA_CheckFifoParam+0xe8>
        break;
 8004eae:	bf00      	nop
 8004eb0:	e006      	b.n	8004ec0 <DMA_CheckFifoParam+0xe8>
        break;
 8004eb2:	bf00      	nop
 8004eb4:	e004      	b.n	8004ec0 <DMA_CheckFifoParam+0xe8>
        break;
 8004eb6:	bf00      	nop
 8004eb8:	e002      	b.n	8004ec0 <DMA_CheckFifoParam+0xe8>
        break;
 8004eba:	bf00      	nop
 8004ebc:	e000      	b.n	8004ec0 <DMA_CheckFifoParam+0xe8>
    break;
 8004ebe:	bf00      	nop
    }
  }

  return status;
 8004ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3714      	adds	r7, #20
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop

08004ed0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b085      	sub	sp, #20
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a38      	ldr	r2, [pc, #224]	; (8004fc4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d022      	beq.n	8004f2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a36      	ldr	r2, [pc, #216]	; (8004fc8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d01d      	beq.n	8004f2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a35      	ldr	r2, [pc, #212]	; (8004fcc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d018      	beq.n	8004f2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a33      	ldr	r2, [pc, #204]	; (8004fd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d013      	beq.n	8004f2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a32      	ldr	r2, [pc, #200]	; (8004fd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d00e      	beq.n	8004f2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a30      	ldr	r2, [pc, #192]	; (8004fd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d009      	beq.n	8004f2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a2f      	ldr	r2, [pc, #188]	; (8004fdc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d004      	beq.n	8004f2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a2d      	ldr	r2, [pc, #180]	; (8004fe0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d101      	bne.n	8004f32 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e000      	b.n	8004f34 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004f32:	2300      	movs	r3, #0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d01a      	beq.n	8004f6e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	3b08      	subs	r3, #8
 8004f40:	4a28      	ldr	r2, [pc, #160]	; (8004fe4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004f42:	fba2 2303 	umull	r2, r3, r2, r3
 8004f46:	091b      	lsrs	r3, r3, #4
 8004f48:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	4b26      	ldr	r3, [pc, #152]	; (8004fe8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004f4e:	4413      	add	r3, r2
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	461a      	mov	r2, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4a24      	ldr	r2, [pc, #144]	; (8004fec <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004f5c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f003 031f 	and.w	r3, r3, #31
 8004f64:	2201      	movs	r2, #1
 8004f66:	409a      	lsls	r2, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004f6c:	e024      	b.n	8004fb8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	3b10      	subs	r3, #16
 8004f76:	4a1e      	ldr	r2, [pc, #120]	; (8004ff0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004f78:	fba2 2303 	umull	r2, r3, r2, r3
 8004f7c:	091b      	lsrs	r3, r3, #4
 8004f7e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	4a1c      	ldr	r2, [pc, #112]	; (8004ff4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d806      	bhi.n	8004f96 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	4a1b      	ldr	r2, [pc, #108]	; (8004ff8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d902      	bls.n	8004f96 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	3308      	adds	r3, #8
 8004f94:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	4b18      	ldr	r3, [pc, #96]	; (8004ffc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004f9a:	4413      	add	r3, r2
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4a16      	ldr	r2, [pc, #88]	; (8005000 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004fa8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f003 031f 	and.w	r3, r3, #31
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	409a      	lsls	r2, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004fb8:	bf00      	nop
 8004fba:	3714      	adds	r7, #20
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr
 8004fc4:	58025408 	.word	0x58025408
 8004fc8:	5802541c 	.word	0x5802541c
 8004fcc:	58025430 	.word	0x58025430
 8004fd0:	58025444 	.word	0x58025444
 8004fd4:	58025458 	.word	0x58025458
 8004fd8:	5802546c 	.word	0x5802546c
 8004fdc:	58025480 	.word	0x58025480
 8004fe0:	58025494 	.word	0x58025494
 8004fe4:	cccccccd 	.word	0xcccccccd
 8004fe8:	16009600 	.word	0x16009600
 8004fec:	58025880 	.word	0x58025880
 8004ff0:	aaaaaaab 	.word	0xaaaaaaab
 8004ff4:	400204b8 	.word	0x400204b8
 8004ff8:	4002040f 	.word	0x4002040f
 8004ffc:	10008200 	.word	0x10008200
 8005000:	40020880 	.word	0x40020880

08005004 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005004:	b480      	push	{r7}
 8005006:	b085      	sub	sp, #20
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	b2db      	uxtb	r3, r3
 8005012:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d04a      	beq.n	80050b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2b08      	cmp	r3, #8
 800501e:	d847      	bhi.n	80050b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a25      	ldr	r2, [pc, #148]	; (80050bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d022      	beq.n	8005070 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a24      	ldr	r2, [pc, #144]	; (80050c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d01d      	beq.n	8005070 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a22      	ldr	r2, [pc, #136]	; (80050c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d018      	beq.n	8005070 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a21      	ldr	r2, [pc, #132]	; (80050c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d013      	beq.n	8005070 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a1f      	ldr	r2, [pc, #124]	; (80050cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d00e      	beq.n	8005070 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a1e      	ldr	r2, [pc, #120]	; (80050d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d009      	beq.n	8005070 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a1c      	ldr	r2, [pc, #112]	; (80050d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d004      	beq.n	8005070 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a1b      	ldr	r2, [pc, #108]	; (80050d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d101      	bne.n	8005074 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005070:	2301      	movs	r3, #1
 8005072:	e000      	b.n	8005076 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005074:	2300      	movs	r3, #0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d00a      	beq.n	8005090 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800507a:	68fa      	ldr	r2, [r7, #12]
 800507c:	4b17      	ldr	r3, [pc, #92]	; (80050dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800507e:	4413      	add	r3, r2
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	461a      	mov	r2, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4a15      	ldr	r2, [pc, #84]	; (80050e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800508c:	671a      	str	r2, [r3, #112]	; 0x70
 800508e:	e009      	b.n	80050a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005090:	68fa      	ldr	r2, [r7, #12]
 8005092:	4b14      	ldr	r3, [pc, #80]	; (80050e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005094:	4413      	add	r3, r2
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	461a      	mov	r2, r3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a11      	ldr	r2, [pc, #68]	; (80050e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80050a2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	3b01      	subs	r3, #1
 80050a8:	2201      	movs	r2, #1
 80050aa:	409a      	lsls	r2, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80050b0:	bf00      	nop
 80050b2:	3714      	adds	r7, #20
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr
 80050bc:	58025408 	.word	0x58025408
 80050c0:	5802541c 	.word	0x5802541c
 80050c4:	58025430 	.word	0x58025430
 80050c8:	58025444 	.word	0x58025444
 80050cc:	58025458 	.word	0x58025458
 80050d0:	5802546c 	.word	0x5802546c
 80050d4:	58025480 	.word	0x58025480
 80050d8:	58025494 	.word	0x58025494
 80050dc:	1600963f 	.word	0x1600963f
 80050e0:	58025940 	.word	0x58025940
 80050e4:	1000823f 	.word	0x1000823f
 80050e8:	40020940 	.word	0x40020940

080050ec <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  uint32_t macirqenable;
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050fc:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8005100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005104:	2b40      	cmp	r3, #64	; 0x40
 8005106:	d115      	bne.n	8005134 <HAL_ETH_IRQHandler+0x48>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005110:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8005114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005118:	2b40      	cmp	r3, #64	; 0x40
 800511a:	d10b      	bne.n	8005134 <HAL_ETH_IRQHandler+0x48>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005124:	461a      	mov	r2, r3
 8005126:	f248 0340 	movw	r3, #32832	; 0x8040
 800512a:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f005 fe7e 	bl	800ae30 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800513c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8005140:	f003 0301 	and.w	r3, r3, #1
 8005144:	2b01      	cmp	r3, #1
 8005146:	d115      	bne.n	8005174 <HAL_ETH_IRQHandler+0x88>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005150:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8005154:	f003 0301 	and.w	r3, r3, #1
 8005158:	2b01      	cmp	r3, #1
 800515a:	d10b      	bne.n	8005174 <HAL_ETH_IRQHandler+0x88>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005164:	461a      	mov	r2, r3
 8005166:	f248 0301 	movw	r3, #32769	; 0x8001
 800516a:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f005 fe6e 	bl	800ae50 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800517c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8005180:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005184:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005188:	d153      	bne.n	8005232 <HAL_ETH_IRQHandler+0x146>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005192:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8005196:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800519a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800519e:	d148      	bne.n	8005232 <HAL_ETH_IRQHandler+0x146>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051a6:	f043 0208 	orr.w	r2, r3, #8
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051b8:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80051bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051c4:	d11e      	bne.n	8005204 <HAL_ETH_IRQHandler+0x118>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051ce:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 80051d2:	f241 1302 	movw	r3, #4354	; 0x1102
 80051d6:	4013      	ands	r3, r2
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051e6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	6812      	ldr	r2, [r2, #0]
 80051ee:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80051f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80051f6:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	22e0      	movs	r2, #224	; 0xe0
 80051fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8005202:	e013      	b.n	800522c <HAL_ETH_IRQHandler+0x140>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800520c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8005210:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                                                               ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005222:	461a      	mov	r2, r3
 8005224:	f44f 43cd 	mov.w	r3, #26240	; 0x6680
 8005228:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f005 fe1f 	bl	800ae70 <HAL_ETH_ErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  macirqenable = heth->Instance->MACIER;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800523a:	60fb      	str	r3, [r7, #12]
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d104      	bne.n	8005250 <HAL_ETH_IRQHandler+0x164>
      ((macirqenable & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 800524c:	2b00      	cmp	r3, #0
 800524e:	d019      	beq.n	8005284 <HAL_ETH_IRQHandler+0x198>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005256:	f043 0210 	orr.w	r2, r3, #16
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	22e0      	movs	r2, #224	; 0xe0
 8005272:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f005 fdfa 	bl	800ae70 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }

  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800528c:	f003 0310 	and.w	r3, r3, #16
 8005290:	2b10      	cmp	r3, #16
 8005292:	d10f      	bne.n	80052b4 <HAL_ETH_IRQHandler+0x1c8>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800529c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 f830 	bl	800530c <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }

  /* ETH EEE IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80052bc:	f003 0320 	and.w	r3, r3, #32
 80052c0:	2b20      	cmp	r3, #32
 80052c2:	d10f      	bne.n	80052e4 <HAL_ETH_IRQHandler+0x1f8>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80052cc:	f003 020f 	and.w	r2, r3, #15
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 f822 	bl	8005320 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }
#else /* USE_HAL_ETH_REGISTER_CALLBACKS */
  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80052e4:	4b08      	ldr	r3, [pc, #32]	; (8005308 <HAL_ETH_IRQHandler+0x21c>)
 80052e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d006      	beq.n	80052fe <HAL_ETH_IRQHandler+0x212>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80052f0:	4b05      	ldr	r3, [pc, #20]	; (8005308 <HAL_ETH_IRQHandler+0x21c>)
 80052f2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80052f6:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f000 f81b 	bl	8005334 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
}
 80052fe:	bf00      	nop
 8005300:	3710      	adds	r7, #16
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	58000080 	.word	0x58000080

0800530c <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8005314:	bf00      	nop
 8005316:	370c      	adds	r7, #12
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8005328:	bf00      	nop
 800532a:	370c      	adds	r7, #12
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 800533c:	bf00      	nop
 800533e:	370c      	adds	r7, #12
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 8005356:	4618      	mov	r0, r3
 8005358:	370c      	adds	r7, #12
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
	...

08005364 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005364:	b480      	push	{r7}
 8005366:	b089      	sub	sp, #36	; 0x24
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800536e:	2300      	movs	r3, #0
 8005370:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005372:	4b86      	ldr	r3, [pc, #536]	; (800558c <HAL_GPIO_Init+0x228>)
 8005374:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005376:	e18c      	b.n	8005692 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	2101      	movs	r1, #1
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	fa01 f303 	lsl.w	r3, r1, r3
 8005384:	4013      	ands	r3, r2
 8005386:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	2b00      	cmp	r3, #0
 800538c:	f000 817e 	beq.w	800568c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	f003 0303 	and.w	r3, r3, #3
 8005398:	2b01      	cmp	r3, #1
 800539a:	d005      	beq.n	80053a8 <HAL_GPIO_Init+0x44>
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	f003 0303 	and.w	r3, r3, #3
 80053a4:	2b02      	cmp	r3, #2
 80053a6:	d130      	bne.n	800540a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	005b      	lsls	r3, r3, #1
 80053b2:	2203      	movs	r2, #3
 80053b4:	fa02 f303 	lsl.w	r3, r2, r3
 80053b8:	43db      	mvns	r3, r3
 80053ba:	69ba      	ldr	r2, [r7, #24]
 80053bc:	4013      	ands	r3, r2
 80053be:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	68da      	ldr	r2, [r3, #12]
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	005b      	lsls	r3, r3, #1
 80053c8:	fa02 f303 	lsl.w	r3, r2, r3
 80053cc:	69ba      	ldr	r2, [r7, #24]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	69ba      	ldr	r2, [r7, #24]
 80053d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80053de:	2201      	movs	r2, #1
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	fa02 f303 	lsl.w	r3, r2, r3
 80053e6:	43db      	mvns	r3, r3
 80053e8:	69ba      	ldr	r2, [r7, #24]
 80053ea:	4013      	ands	r3, r2
 80053ec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	091b      	lsrs	r3, r3, #4
 80053f4:	f003 0201 	and.w	r2, r3, #1
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	fa02 f303 	lsl.w	r3, r2, r3
 80053fe:	69ba      	ldr	r2, [r7, #24]
 8005400:	4313      	orrs	r3, r2
 8005402:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	69ba      	ldr	r2, [r7, #24]
 8005408:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	f003 0303 	and.w	r3, r3, #3
 8005412:	2b03      	cmp	r3, #3
 8005414:	d017      	beq.n	8005446 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	005b      	lsls	r3, r3, #1
 8005420:	2203      	movs	r2, #3
 8005422:	fa02 f303 	lsl.w	r3, r2, r3
 8005426:	43db      	mvns	r3, r3
 8005428:	69ba      	ldr	r2, [r7, #24]
 800542a:	4013      	ands	r3, r2
 800542c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	689a      	ldr	r2, [r3, #8]
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	005b      	lsls	r3, r3, #1
 8005436:	fa02 f303 	lsl.w	r3, r2, r3
 800543a:	69ba      	ldr	r2, [r7, #24]
 800543c:	4313      	orrs	r3, r2
 800543e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	69ba      	ldr	r2, [r7, #24]
 8005444:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	f003 0303 	and.w	r3, r3, #3
 800544e:	2b02      	cmp	r3, #2
 8005450:	d123      	bne.n	800549a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	08da      	lsrs	r2, r3, #3
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	3208      	adds	r2, #8
 800545a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800545e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	f003 0307 	and.w	r3, r3, #7
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	220f      	movs	r2, #15
 800546a:	fa02 f303 	lsl.w	r3, r2, r3
 800546e:	43db      	mvns	r3, r3
 8005470:	69ba      	ldr	r2, [r7, #24]
 8005472:	4013      	ands	r3, r2
 8005474:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	691a      	ldr	r2, [r3, #16]
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	f003 0307 	and.w	r3, r3, #7
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	fa02 f303 	lsl.w	r3, r2, r3
 8005486:	69ba      	ldr	r2, [r7, #24]
 8005488:	4313      	orrs	r3, r2
 800548a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	08da      	lsrs	r2, r3, #3
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	3208      	adds	r2, #8
 8005494:	69b9      	ldr	r1, [r7, #24]
 8005496:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	005b      	lsls	r3, r3, #1
 80054a4:	2203      	movs	r2, #3
 80054a6:	fa02 f303 	lsl.w	r3, r2, r3
 80054aa:	43db      	mvns	r3, r3
 80054ac:	69ba      	ldr	r2, [r7, #24]
 80054ae:	4013      	ands	r3, r2
 80054b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	f003 0203 	and.w	r2, r3, #3
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	005b      	lsls	r3, r3, #1
 80054be:	fa02 f303 	lsl.w	r3, r2, r3
 80054c2:	69ba      	ldr	r2, [r7, #24]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	69ba      	ldr	r2, [r7, #24]
 80054cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	f000 80d8 	beq.w	800568c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054dc:	4b2c      	ldr	r3, [pc, #176]	; (8005590 <HAL_GPIO_Init+0x22c>)
 80054de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80054e2:	4a2b      	ldr	r2, [pc, #172]	; (8005590 <HAL_GPIO_Init+0x22c>)
 80054e4:	f043 0302 	orr.w	r3, r3, #2
 80054e8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80054ec:	4b28      	ldr	r3, [pc, #160]	; (8005590 <HAL_GPIO_Init+0x22c>)
 80054ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80054f2:	f003 0302 	and.w	r3, r3, #2
 80054f6:	60fb      	str	r3, [r7, #12]
 80054f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80054fa:	4a26      	ldr	r2, [pc, #152]	; (8005594 <HAL_GPIO_Init+0x230>)
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	089b      	lsrs	r3, r3, #2
 8005500:	3302      	adds	r3, #2
 8005502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005506:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	f003 0303 	and.w	r3, r3, #3
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	220f      	movs	r2, #15
 8005512:	fa02 f303 	lsl.w	r3, r2, r3
 8005516:	43db      	mvns	r3, r3
 8005518:	69ba      	ldr	r2, [r7, #24]
 800551a:	4013      	ands	r3, r2
 800551c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a1d      	ldr	r2, [pc, #116]	; (8005598 <HAL_GPIO_Init+0x234>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d04a      	beq.n	80055bc <HAL_GPIO_Init+0x258>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4a1c      	ldr	r2, [pc, #112]	; (800559c <HAL_GPIO_Init+0x238>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d02b      	beq.n	8005586 <HAL_GPIO_Init+0x222>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a1b      	ldr	r2, [pc, #108]	; (80055a0 <HAL_GPIO_Init+0x23c>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d025      	beq.n	8005582 <HAL_GPIO_Init+0x21e>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a1a      	ldr	r2, [pc, #104]	; (80055a4 <HAL_GPIO_Init+0x240>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d01f      	beq.n	800557e <HAL_GPIO_Init+0x21a>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4a19      	ldr	r2, [pc, #100]	; (80055a8 <HAL_GPIO_Init+0x244>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d019      	beq.n	800557a <HAL_GPIO_Init+0x216>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4a18      	ldr	r2, [pc, #96]	; (80055ac <HAL_GPIO_Init+0x248>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d013      	beq.n	8005576 <HAL_GPIO_Init+0x212>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4a17      	ldr	r2, [pc, #92]	; (80055b0 <HAL_GPIO_Init+0x24c>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d00d      	beq.n	8005572 <HAL_GPIO_Init+0x20e>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4a16      	ldr	r2, [pc, #88]	; (80055b4 <HAL_GPIO_Init+0x250>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d007      	beq.n	800556e <HAL_GPIO_Init+0x20a>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4a15      	ldr	r2, [pc, #84]	; (80055b8 <HAL_GPIO_Init+0x254>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d101      	bne.n	800556a <HAL_GPIO_Init+0x206>
 8005566:	2309      	movs	r3, #9
 8005568:	e029      	b.n	80055be <HAL_GPIO_Init+0x25a>
 800556a:	230a      	movs	r3, #10
 800556c:	e027      	b.n	80055be <HAL_GPIO_Init+0x25a>
 800556e:	2307      	movs	r3, #7
 8005570:	e025      	b.n	80055be <HAL_GPIO_Init+0x25a>
 8005572:	2306      	movs	r3, #6
 8005574:	e023      	b.n	80055be <HAL_GPIO_Init+0x25a>
 8005576:	2305      	movs	r3, #5
 8005578:	e021      	b.n	80055be <HAL_GPIO_Init+0x25a>
 800557a:	2304      	movs	r3, #4
 800557c:	e01f      	b.n	80055be <HAL_GPIO_Init+0x25a>
 800557e:	2303      	movs	r3, #3
 8005580:	e01d      	b.n	80055be <HAL_GPIO_Init+0x25a>
 8005582:	2302      	movs	r3, #2
 8005584:	e01b      	b.n	80055be <HAL_GPIO_Init+0x25a>
 8005586:	2301      	movs	r3, #1
 8005588:	e019      	b.n	80055be <HAL_GPIO_Init+0x25a>
 800558a:	bf00      	nop
 800558c:	58000080 	.word	0x58000080
 8005590:	58024400 	.word	0x58024400
 8005594:	58000400 	.word	0x58000400
 8005598:	58020000 	.word	0x58020000
 800559c:	58020400 	.word	0x58020400
 80055a0:	58020800 	.word	0x58020800
 80055a4:	58020c00 	.word	0x58020c00
 80055a8:	58021000 	.word	0x58021000
 80055ac:	58021400 	.word	0x58021400
 80055b0:	58021800 	.word	0x58021800
 80055b4:	58021c00 	.word	0x58021c00
 80055b8:	58022400 	.word	0x58022400
 80055bc:	2300      	movs	r3, #0
 80055be:	69fa      	ldr	r2, [r7, #28]
 80055c0:	f002 0203 	and.w	r2, r2, #3
 80055c4:	0092      	lsls	r2, r2, #2
 80055c6:	4093      	lsls	r3, r2
 80055c8:	69ba      	ldr	r2, [r7, #24]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80055ce:	4938      	ldr	r1, [pc, #224]	; (80056b0 <HAL_GPIO_Init+0x34c>)
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	089b      	lsrs	r3, r3, #2
 80055d4:	3302      	adds	r3, #2
 80055d6:	69ba      	ldr	r2, [r7, #24]
 80055d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80055dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	43db      	mvns	r3, r3
 80055e8:	69ba      	ldr	r2, [r7, #24]
 80055ea:	4013      	ands	r3, r2
 80055ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d003      	beq.n	8005602 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80055fa:	69ba      	ldr	r2, [r7, #24]
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	4313      	orrs	r3, r2
 8005600:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005602:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800560a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	43db      	mvns	r3, r3
 8005616:	69ba      	ldr	r2, [r7, #24]
 8005618:	4013      	ands	r3, r2
 800561a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005624:	2b00      	cmp	r3, #0
 8005626:	d003      	beq.n	8005630 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8005628:	69ba      	ldr	r2, [r7, #24]
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	4313      	orrs	r3, r2
 800562e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005630:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005634:	69bb      	ldr	r3, [r7, #24]
 8005636:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	43db      	mvns	r3, r3
 8005642:	69ba      	ldr	r2, [r7, #24]
 8005644:	4013      	ands	r3, r2
 8005646:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005650:	2b00      	cmp	r3, #0
 8005652:	d003      	beq.n	800565c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8005654:	69ba      	ldr	r2, [r7, #24]
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	4313      	orrs	r3, r2
 800565a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	69ba      	ldr	r2, [r7, #24]
 8005660:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	43db      	mvns	r3, r3
 800566c:	69ba      	ldr	r2, [r7, #24]
 800566e:	4013      	ands	r3, r2
 8005670:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800567a:	2b00      	cmp	r3, #0
 800567c:	d003      	beq.n	8005686 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800567e:	69ba      	ldr	r2, [r7, #24]
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	4313      	orrs	r3, r2
 8005684:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	69ba      	ldr	r2, [r7, #24]
 800568a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	3301      	adds	r3, #1
 8005690:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	fa22 f303 	lsr.w	r3, r2, r3
 800569c:	2b00      	cmp	r3, #0
 800569e:	f47f ae6b 	bne.w	8005378 <HAL_GPIO_Init+0x14>
  }
}
 80056a2:	bf00      	nop
 80056a4:	bf00      	nop
 80056a6:	3724      	adds	r7, #36	; 0x24
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr
 80056b0:	58000400 	.word	0x58000400

080056b4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b087      	sub	sp, #28
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80056be:	2300      	movs	r3, #0
 80056c0:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80056c2:	4b72      	ldr	r3, [pc, #456]	; (800588c <HAL_GPIO_DeInit+0x1d8>)
 80056c4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 80056c6:	e0d3      	b.n	8005870 <HAL_GPIO_DeInit+0x1bc>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 80056c8:	2201      	movs	r2, #1
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	fa02 f303 	lsl.w	r3, r2, r3
 80056d0:	683a      	ldr	r2, [r7, #0]
 80056d2:	4013      	ands	r3, r2
 80056d4:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	f000 80c6 	beq.w	800586a <HAL_GPIO_DeInit+0x1b6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 80056de:	4a6c      	ldr	r2, [pc, #432]	; (8005890 <HAL_GPIO_DeInit+0x1dc>)
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	089b      	lsrs	r3, r3, #2
 80056e4:	3302      	adds	r3, #2
 80056e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056ea:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	f003 0303 	and.w	r3, r3, #3
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	220f      	movs	r2, #15
 80056f6:	fa02 f303 	lsl.w	r3, r2, r3
 80056fa:	68ba      	ldr	r2, [r7, #8]
 80056fc:	4013      	ands	r3, r2
 80056fe:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4a64      	ldr	r2, [pc, #400]	; (8005894 <HAL_GPIO_DeInit+0x1e0>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d031      	beq.n	800576c <HAL_GPIO_DeInit+0xb8>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4a63      	ldr	r2, [pc, #396]	; (8005898 <HAL_GPIO_DeInit+0x1e4>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d02b      	beq.n	8005768 <HAL_GPIO_DeInit+0xb4>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4a62      	ldr	r2, [pc, #392]	; (800589c <HAL_GPIO_DeInit+0x1e8>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d025      	beq.n	8005764 <HAL_GPIO_DeInit+0xb0>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	4a61      	ldr	r2, [pc, #388]	; (80058a0 <HAL_GPIO_DeInit+0x1ec>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d01f      	beq.n	8005760 <HAL_GPIO_DeInit+0xac>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	4a60      	ldr	r2, [pc, #384]	; (80058a4 <HAL_GPIO_DeInit+0x1f0>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d019      	beq.n	800575c <HAL_GPIO_DeInit+0xa8>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	4a5f      	ldr	r2, [pc, #380]	; (80058a8 <HAL_GPIO_DeInit+0x1f4>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d013      	beq.n	8005758 <HAL_GPIO_DeInit+0xa4>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	4a5e      	ldr	r2, [pc, #376]	; (80058ac <HAL_GPIO_DeInit+0x1f8>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d00d      	beq.n	8005754 <HAL_GPIO_DeInit+0xa0>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	4a5d      	ldr	r2, [pc, #372]	; (80058b0 <HAL_GPIO_DeInit+0x1fc>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d007      	beq.n	8005750 <HAL_GPIO_DeInit+0x9c>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	4a5c      	ldr	r2, [pc, #368]	; (80058b4 <HAL_GPIO_DeInit+0x200>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d101      	bne.n	800574c <HAL_GPIO_DeInit+0x98>
 8005748:	2309      	movs	r3, #9
 800574a:	e010      	b.n	800576e <HAL_GPIO_DeInit+0xba>
 800574c:	230a      	movs	r3, #10
 800574e:	e00e      	b.n	800576e <HAL_GPIO_DeInit+0xba>
 8005750:	2307      	movs	r3, #7
 8005752:	e00c      	b.n	800576e <HAL_GPIO_DeInit+0xba>
 8005754:	2306      	movs	r3, #6
 8005756:	e00a      	b.n	800576e <HAL_GPIO_DeInit+0xba>
 8005758:	2305      	movs	r3, #5
 800575a:	e008      	b.n	800576e <HAL_GPIO_DeInit+0xba>
 800575c:	2304      	movs	r3, #4
 800575e:	e006      	b.n	800576e <HAL_GPIO_DeInit+0xba>
 8005760:	2303      	movs	r3, #3
 8005762:	e004      	b.n	800576e <HAL_GPIO_DeInit+0xba>
 8005764:	2302      	movs	r3, #2
 8005766:	e002      	b.n	800576e <HAL_GPIO_DeInit+0xba>
 8005768:	2301      	movs	r3, #1
 800576a:	e000      	b.n	800576e <HAL_GPIO_DeInit+0xba>
 800576c:	2300      	movs	r3, #0
 800576e:	697a      	ldr	r2, [r7, #20]
 8005770:	f002 0203 	and.w	r2, r2, #3
 8005774:	0092      	lsls	r2, r2, #2
 8005776:	4093      	lsls	r3, r2
 8005778:	68ba      	ldr	r2, [r7, #8]
 800577a:	429a      	cmp	r2, r3
 800577c:	d136      	bne.n	80057ec <HAL_GPIO_DeInit+0x138>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	43db      	mvns	r3, r3
 8005786:	401a      	ands	r2, r3
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	685a      	ldr	r2, [r3, #4]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	43db      	mvns	r3, r3
 8005794:	401a      	ands	r2, r3
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800579a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800579e:	685a      	ldr	r2, [r3, #4]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	43db      	mvns	r3, r3
 80057a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057a8:	4013      	ands	r3, r2
 80057aa:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80057ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	43db      	mvns	r3, r3
 80057b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057ba:	4013      	ands	r3, r2
 80057bc:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	f003 0303 	and.w	r3, r3, #3
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	220f      	movs	r2, #15
 80057c8:	fa02 f303 	lsl.w	r3, r2, r3
 80057cc:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80057ce:	4a30      	ldr	r2, [pc, #192]	; (8005890 <HAL_GPIO_DeInit+0x1dc>)
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	089b      	lsrs	r3, r3, #2
 80057d4:	3302      	adds	r3, #2
 80057d6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	43da      	mvns	r2, r3
 80057de:	482c      	ldr	r0, [pc, #176]	; (8005890 <HAL_GPIO_DeInit+0x1dc>)
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	089b      	lsrs	r3, r3, #2
 80057e4:	400a      	ands	r2, r1
 80057e6:	3302      	adds	r3, #2
 80057e8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	005b      	lsls	r3, r3, #1
 80057f4:	2103      	movs	r1, #3
 80057f6:	fa01 f303 	lsl.w	r3, r1, r3
 80057fa:	431a      	orrs	r2, r3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	08da      	lsrs	r2, r3, #3
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	3208      	adds	r2, #8
 8005808:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	f003 0307 	and.w	r3, r3, #7
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	220f      	movs	r2, #15
 8005816:	fa02 f303 	lsl.w	r3, r2, r3
 800581a:	43db      	mvns	r3, r3
 800581c:	697a      	ldr	r2, [r7, #20]
 800581e:	08d2      	lsrs	r2, r2, #3
 8005820:	4019      	ands	r1, r3
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	3208      	adds	r2, #8
 8005826:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	68da      	ldr	r2, [r3, #12]
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	005b      	lsls	r3, r3, #1
 8005832:	2103      	movs	r1, #3
 8005834:	fa01 f303 	lsl.w	r3, r1, r3
 8005838:	43db      	mvns	r3, r3
 800583a:	401a      	ands	r2, r3
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	685a      	ldr	r2, [r3, #4]
 8005844:	2101      	movs	r1, #1
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	fa01 f303 	lsl.w	r3, r1, r3
 800584c:	43db      	mvns	r3, r3
 800584e:	401a      	ands	r2, r3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	689a      	ldr	r2, [r3, #8]
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	005b      	lsls	r3, r3, #1
 800585c:	2103      	movs	r1, #3
 800585e:	fa01 f303 	lsl.w	r3, r1, r3
 8005862:	43db      	mvns	r3, r3
 8005864:	401a      	ands	r2, r3
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	609a      	str	r2, [r3, #8]
    }

    position++;
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	3301      	adds	r3, #1
 800586e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8005870:	683a      	ldr	r2, [r7, #0]
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	fa22 f303 	lsr.w	r3, r2, r3
 8005878:	2b00      	cmp	r3, #0
 800587a:	f47f af25 	bne.w	80056c8 <HAL_GPIO_DeInit+0x14>
  }
}
 800587e:	bf00      	nop
 8005880:	bf00      	nop
 8005882:	371c      	adds	r7, #28
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr
 800588c:	58000080 	.word	0x58000080
 8005890:	58000400 	.word	0x58000400
 8005894:	58020000 	.word	0x58020000
 8005898:	58020400 	.word	0x58020400
 800589c:	58020800 	.word	0x58020800
 80058a0:	58020c00 	.word	0x58020c00
 80058a4:	58021000 	.word	0x58021000
 80058a8:	58021400 	.word	0x58021400
 80058ac:	58021800 	.word	0x58021800
 80058b0:	58021c00 	.word	0x58021c00
 80058b4:	58022400 	.word	0x58022400

080058b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	460b      	mov	r3, r1
 80058c2:	807b      	strh	r3, [r7, #2]
 80058c4:	4613      	mov	r3, r2
 80058c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80058c8:	787b      	ldrb	r3, [r7, #1]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d003      	beq.n	80058d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80058ce:	887a      	ldrh	r2, [r7, #2]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80058d4:	e003      	b.n	80058de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80058d6:	887b      	ldrh	r3, [r7, #2]
 80058d8:	041a      	lsls	r2, r3, #16
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	619a      	str	r2, [r3, #24]
}
 80058de:	bf00      	nop
 80058e0:	370c      	adds	r7, #12
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr

080058ea <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80058ea:	b480      	push	{r7}
 80058ec:	b085      	sub	sp, #20
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
 80058f2:	460b      	mov	r3, r1
 80058f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	695b      	ldr	r3, [r3, #20]
 80058fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80058fc:	887a      	ldrh	r2, [r7, #2]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	4013      	ands	r3, r2
 8005902:	041a      	lsls	r2, r3, #16
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	43d9      	mvns	r1, r3
 8005908:	887b      	ldrh	r3, [r7, #2]
 800590a:	400b      	ands	r3, r1
 800590c:	431a      	orrs	r2, r3
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	619a      	str	r2, [r3, #24]
}
 8005912:	bf00      	nop
 8005914:	3714      	adds	r7, #20
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr
	...

08005920 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005928:	4b19      	ldr	r3, [pc, #100]	; (8005990 <HAL_PWREx_ConfigSupply+0x70>)
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	f003 0304 	and.w	r3, r3, #4
 8005930:	2b04      	cmp	r3, #4
 8005932:	d00a      	beq.n	800594a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005934:	4b16      	ldr	r3, [pc, #88]	; (8005990 <HAL_PWREx_ConfigSupply+0x70>)
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	f003 0307 	and.w	r3, r3, #7
 800593c:	687a      	ldr	r2, [r7, #4]
 800593e:	429a      	cmp	r2, r3
 8005940:	d001      	beq.n	8005946 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	e01f      	b.n	8005986 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005946:	2300      	movs	r3, #0
 8005948:	e01d      	b.n	8005986 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800594a:	4b11      	ldr	r3, [pc, #68]	; (8005990 <HAL_PWREx_ConfigSupply+0x70>)
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	f023 0207 	bic.w	r2, r3, #7
 8005952:	490f      	ldr	r1, [pc, #60]	; (8005990 <HAL_PWREx_ConfigSupply+0x70>)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4313      	orrs	r3, r2
 8005958:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800595a:	f7fc fa1b 	bl	8001d94 <HAL_GetTick>
 800595e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005960:	e009      	b.n	8005976 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005962:	f7fc fa17 	bl	8001d94 <HAL_GetTick>
 8005966:	4602      	mov	r2, r0
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	1ad3      	subs	r3, r2, r3
 800596c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005970:	d901      	bls.n	8005976 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e007      	b.n	8005986 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005976:	4b06      	ldr	r3, [pc, #24]	; (8005990 <HAL_PWREx_ConfigSupply+0x70>)
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800597e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005982:	d1ee      	bne.n	8005962 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005984:	2300      	movs	r3, #0
}
 8005986:	4618      	mov	r0, r3
 8005988:	3710      	adds	r7, #16
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
 800598e:	bf00      	nop
 8005990:	58024800 	.word	0x58024800

08005994 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b08c      	sub	sp, #48	; 0x30
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d101      	bne.n	80059a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e3c8      	b.n	8006138 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 0301 	and.w	r3, r3, #1
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	f000 8087 	beq.w	8005ac2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059b4:	4b88      	ldr	r3, [pc, #544]	; (8005bd8 <HAL_RCC_OscConfig+0x244>)
 80059b6:	691b      	ldr	r3, [r3, #16]
 80059b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80059bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80059be:	4b86      	ldr	r3, [pc, #536]	; (8005bd8 <HAL_RCC_OscConfig+0x244>)
 80059c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80059c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059c6:	2b10      	cmp	r3, #16
 80059c8:	d007      	beq.n	80059da <HAL_RCC_OscConfig+0x46>
 80059ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059cc:	2b18      	cmp	r3, #24
 80059ce:	d110      	bne.n	80059f2 <HAL_RCC_OscConfig+0x5e>
 80059d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d2:	f003 0303 	and.w	r3, r3, #3
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	d10b      	bne.n	80059f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059da:	4b7f      	ldr	r3, [pc, #508]	; (8005bd8 <HAL_RCC_OscConfig+0x244>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d06c      	beq.n	8005ac0 <HAL_RCC_OscConfig+0x12c>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d168      	bne.n	8005ac0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e3a2      	b.n	8006138 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059fa:	d106      	bne.n	8005a0a <HAL_RCC_OscConfig+0x76>
 80059fc:	4b76      	ldr	r3, [pc, #472]	; (8005bd8 <HAL_RCC_OscConfig+0x244>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a75      	ldr	r2, [pc, #468]	; (8005bd8 <HAL_RCC_OscConfig+0x244>)
 8005a02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a06:	6013      	str	r3, [r2, #0]
 8005a08:	e02e      	b.n	8005a68 <HAL_RCC_OscConfig+0xd4>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d10c      	bne.n	8005a2c <HAL_RCC_OscConfig+0x98>
 8005a12:	4b71      	ldr	r3, [pc, #452]	; (8005bd8 <HAL_RCC_OscConfig+0x244>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a70      	ldr	r2, [pc, #448]	; (8005bd8 <HAL_RCC_OscConfig+0x244>)
 8005a18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a1c:	6013      	str	r3, [r2, #0]
 8005a1e:	4b6e      	ldr	r3, [pc, #440]	; (8005bd8 <HAL_RCC_OscConfig+0x244>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a6d      	ldr	r2, [pc, #436]	; (8005bd8 <HAL_RCC_OscConfig+0x244>)
 8005a24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a28:	6013      	str	r3, [r2, #0]
 8005a2a:	e01d      	b.n	8005a68 <HAL_RCC_OscConfig+0xd4>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a34:	d10c      	bne.n	8005a50 <HAL_RCC_OscConfig+0xbc>
 8005a36:	4b68      	ldr	r3, [pc, #416]	; (8005bd8 <HAL_RCC_OscConfig+0x244>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a67      	ldr	r2, [pc, #412]	; (8005bd8 <HAL_RCC_OscConfig+0x244>)
 8005a3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a40:	6013      	str	r3, [r2, #0]
 8005a42:	4b65      	ldr	r3, [pc, #404]	; (8005bd8 <HAL_RCC_OscConfig+0x244>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a64      	ldr	r2, [pc, #400]	; (8005bd8 <HAL_RCC_OscConfig+0x244>)
 8005a48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a4c:	6013      	str	r3, [r2, #0]
 8005a4e:	e00b      	b.n	8005a68 <HAL_RCC_OscConfig+0xd4>
 8005a50:	4b61      	ldr	r3, [pc, #388]	; (8005bd8 <HAL_RCC_OscConfig+0x244>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a60      	ldr	r2, [pc, #384]	; (8005bd8 <HAL_RCC_OscConfig+0x244>)
 8005a56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a5a:	6013      	str	r3, [r2, #0]
 8005a5c:	4b5e      	ldr	r3, [pc, #376]	; (8005bd8 <HAL_RCC_OscConfig+0x244>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a5d      	ldr	r2, [pc, #372]	; (8005bd8 <HAL_RCC_OscConfig+0x244>)
 8005a62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d013      	beq.n	8005a98 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a70:	f7fc f990 	bl	8001d94 <HAL_GetTick>
 8005a74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005a76:	e008      	b.n	8005a8a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a78:	f7fc f98c 	bl	8001d94 <HAL_GetTick>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	2b64      	cmp	r3, #100	; 0x64
 8005a84:	d901      	bls.n	8005a8a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005a86:	2303      	movs	r3, #3
 8005a88:	e356      	b.n	8006138 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005a8a:	4b53      	ldr	r3, [pc, #332]	; (8005bd8 <HAL_RCC_OscConfig+0x244>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d0f0      	beq.n	8005a78 <HAL_RCC_OscConfig+0xe4>
 8005a96:	e014      	b.n	8005ac2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a98:	f7fc f97c 	bl	8001d94 <HAL_GetTick>
 8005a9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005a9e:	e008      	b.n	8005ab2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005aa0:	f7fc f978 	bl	8001d94 <HAL_GetTick>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	2b64      	cmp	r3, #100	; 0x64
 8005aac:	d901      	bls.n	8005ab2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005aae:	2303      	movs	r3, #3
 8005ab0:	e342      	b.n	8006138 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005ab2:	4b49      	ldr	r3, [pc, #292]	; (8005bd8 <HAL_RCC_OscConfig+0x244>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d1f0      	bne.n	8005aa0 <HAL_RCC_OscConfig+0x10c>
 8005abe:	e000      	b.n	8005ac2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ac0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f003 0302 	and.w	r3, r3, #2
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	f000 808c 	beq.w	8005be8 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ad0:	4b41      	ldr	r3, [pc, #260]	; (8005bd8 <HAL_RCC_OscConfig+0x244>)
 8005ad2:	691b      	ldr	r3, [r3, #16]
 8005ad4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ad8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005ada:	4b3f      	ldr	r3, [pc, #252]	; (8005bd8 <HAL_RCC_OscConfig+0x244>)
 8005adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ade:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005ae0:	6a3b      	ldr	r3, [r7, #32]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d007      	beq.n	8005af6 <HAL_RCC_OscConfig+0x162>
 8005ae6:	6a3b      	ldr	r3, [r7, #32]
 8005ae8:	2b18      	cmp	r3, #24
 8005aea:	d137      	bne.n	8005b5c <HAL_RCC_OscConfig+0x1c8>
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	f003 0303 	and.w	r3, r3, #3
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d132      	bne.n	8005b5c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005af6:	4b38      	ldr	r3, [pc, #224]	; (8005bd8 <HAL_RCC_OscConfig+0x244>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 0304 	and.w	r3, r3, #4
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d005      	beq.n	8005b0e <HAL_RCC_OscConfig+0x17a>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d101      	bne.n	8005b0e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e314      	b.n	8006138 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005b0e:	4b32      	ldr	r3, [pc, #200]	; (8005bd8 <HAL_RCC_OscConfig+0x244>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f023 0219 	bic.w	r2, r3, #25
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	492f      	ldr	r1, [pc, #188]	; (8005bd8 <HAL_RCC_OscConfig+0x244>)
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b20:	f7fc f938 	bl	8001d94 <HAL_GetTick>
 8005b24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b26:	e008      	b.n	8005b3a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b28:	f7fc f934 	bl	8001d94 <HAL_GetTick>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	2b02      	cmp	r3, #2
 8005b34:	d901      	bls.n	8005b3a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005b36:	2303      	movs	r3, #3
 8005b38:	e2fe      	b.n	8006138 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b3a:	4b27      	ldr	r3, [pc, #156]	; (8005bd8 <HAL_RCC_OscConfig+0x244>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 0304 	and.w	r3, r3, #4
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d0f0      	beq.n	8005b28 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b46:	4b24      	ldr	r3, [pc, #144]	; (8005bd8 <HAL_RCC_OscConfig+0x244>)
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	061b      	lsls	r3, r3, #24
 8005b54:	4920      	ldr	r1, [pc, #128]	; (8005bd8 <HAL_RCC_OscConfig+0x244>)
 8005b56:	4313      	orrs	r3, r2
 8005b58:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b5a:	e045      	b.n	8005be8 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d026      	beq.n	8005bb2 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005b64:	4b1c      	ldr	r3, [pc, #112]	; (8005bd8 <HAL_RCC_OscConfig+0x244>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f023 0219 	bic.w	r2, r3, #25
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	4919      	ldr	r1, [pc, #100]	; (8005bd8 <HAL_RCC_OscConfig+0x244>)
 8005b72:	4313      	orrs	r3, r2
 8005b74:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b76:	f7fc f90d 	bl	8001d94 <HAL_GetTick>
 8005b7a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b7c:	e008      	b.n	8005b90 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b7e:	f7fc f909 	bl	8001d94 <HAL_GetTick>
 8005b82:	4602      	mov	r2, r0
 8005b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b86:	1ad3      	subs	r3, r2, r3
 8005b88:	2b02      	cmp	r3, #2
 8005b8a:	d901      	bls.n	8005b90 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005b8c:	2303      	movs	r3, #3
 8005b8e:	e2d3      	b.n	8006138 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b90:	4b11      	ldr	r3, [pc, #68]	; (8005bd8 <HAL_RCC_OscConfig+0x244>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 0304 	and.w	r3, r3, #4
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d0f0      	beq.n	8005b7e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b9c:	4b0e      	ldr	r3, [pc, #56]	; (8005bd8 <HAL_RCC_OscConfig+0x244>)
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	691b      	ldr	r3, [r3, #16]
 8005ba8:	061b      	lsls	r3, r3, #24
 8005baa:	490b      	ldr	r1, [pc, #44]	; (8005bd8 <HAL_RCC_OscConfig+0x244>)
 8005bac:	4313      	orrs	r3, r2
 8005bae:	604b      	str	r3, [r1, #4]
 8005bb0:	e01a      	b.n	8005be8 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005bb2:	4b09      	ldr	r3, [pc, #36]	; (8005bd8 <HAL_RCC_OscConfig+0x244>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a08      	ldr	r2, [pc, #32]	; (8005bd8 <HAL_RCC_OscConfig+0x244>)
 8005bb8:	f023 0301 	bic.w	r3, r3, #1
 8005bbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bbe:	f7fc f8e9 	bl	8001d94 <HAL_GetTick>
 8005bc2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005bc4:	e00a      	b.n	8005bdc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005bc6:	f7fc f8e5 	bl	8001d94 <HAL_GetTick>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bce:	1ad3      	subs	r3, r2, r3
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d903      	bls.n	8005bdc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	e2af      	b.n	8006138 <HAL_RCC_OscConfig+0x7a4>
 8005bd8:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005bdc:	4b96      	ldr	r3, [pc, #600]	; (8005e38 <HAL_RCC_OscConfig+0x4a4>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 0304 	and.w	r3, r3, #4
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d1ee      	bne.n	8005bc6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 0310 	and.w	r3, r3, #16
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d06a      	beq.n	8005cca <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005bf4:	4b90      	ldr	r3, [pc, #576]	; (8005e38 <HAL_RCC_OscConfig+0x4a4>)
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005bfc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005bfe:	4b8e      	ldr	r3, [pc, #568]	; (8005e38 <HAL_RCC_OscConfig+0x4a4>)
 8005c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c02:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	2b08      	cmp	r3, #8
 8005c08:	d007      	beq.n	8005c1a <HAL_RCC_OscConfig+0x286>
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	2b18      	cmp	r3, #24
 8005c0e:	d11b      	bne.n	8005c48 <HAL_RCC_OscConfig+0x2b4>
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	f003 0303 	and.w	r3, r3, #3
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d116      	bne.n	8005c48 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005c1a:	4b87      	ldr	r3, [pc, #540]	; (8005e38 <HAL_RCC_OscConfig+0x4a4>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d005      	beq.n	8005c32 <HAL_RCC_OscConfig+0x29e>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	69db      	ldr	r3, [r3, #28]
 8005c2a:	2b80      	cmp	r3, #128	; 0x80
 8005c2c:	d001      	beq.n	8005c32 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e282      	b.n	8006138 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005c32:	4b81      	ldr	r3, [pc, #516]	; (8005e38 <HAL_RCC_OscConfig+0x4a4>)
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a1b      	ldr	r3, [r3, #32]
 8005c3e:	061b      	lsls	r3, r3, #24
 8005c40:	497d      	ldr	r1, [pc, #500]	; (8005e38 <HAL_RCC_OscConfig+0x4a4>)
 8005c42:	4313      	orrs	r3, r2
 8005c44:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005c46:	e040      	b.n	8005cca <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	69db      	ldr	r3, [r3, #28]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d023      	beq.n	8005c98 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005c50:	4b79      	ldr	r3, [pc, #484]	; (8005e38 <HAL_RCC_OscConfig+0x4a4>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a78      	ldr	r2, [pc, #480]	; (8005e38 <HAL_RCC_OscConfig+0x4a4>)
 8005c56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c5c:	f7fc f89a 	bl	8001d94 <HAL_GetTick>
 8005c60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005c62:	e008      	b.n	8005c76 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005c64:	f7fc f896 	bl	8001d94 <HAL_GetTick>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6c:	1ad3      	subs	r3, r2, r3
 8005c6e:	2b02      	cmp	r3, #2
 8005c70:	d901      	bls.n	8005c76 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005c72:	2303      	movs	r3, #3
 8005c74:	e260      	b.n	8006138 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005c76:	4b70      	ldr	r3, [pc, #448]	; (8005e38 <HAL_RCC_OscConfig+0x4a4>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d0f0      	beq.n	8005c64 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005c82:	4b6d      	ldr	r3, [pc, #436]	; (8005e38 <HAL_RCC_OscConfig+0x4a4>)
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a1b      	ldr	r3, [r3, #32]
 8005c8e:	061b      	lsls	r3, r3, #24
 8005c90:	4969      	ldr	r1, [pc, #420]	; (8005e38 <HAL_RCC_OscConfig+0x4a4>)
 8005c92:	4313      	orrs	r3, r2
 8005c94:	60cb      	str	r3, [r1, #12]
 8005c96:	e018      	b.n	8005cca <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005c98:	4b67      	ldr	r3, [pc, #412]	; (8005e38 <HAL_RCC_OscConfig+0x4a4>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a66      	ldr	r2, [pc, #408]	; (8005e38 <HAL_RCC_OscConfig+0x4a4>)
 8005c9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ca2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ca4:	f7fc f876 	bl	8001d94 <HAL_GetTick>
 8005ca8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005caa:	e008      	b.n	8005cbe <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005cac:	f7fc f872 	bl	8001d94 <HAL_GetTick>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb4:	1ad3      	subs	r3, r2, r3
 8005cb6:	2b02      	cmp	r3, #2
 8005cb8:	d901      	bls.n	8005cbe <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8005cba:	2303      	movs	r3, #3
 8005cbc:	e23c      	b.n	8006138 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005cbe:	4b5e      	ldr	r3, [pc, #376]	; (8005e38 <HAL_RCC_OscConfig+0x4a4>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d1f0      	bne.n	8005cac <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f003 0308 	and.w	r3, r3, #8
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d036      	beq.n	8005d44 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	695b      	ldr	r3, [r3, #20]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d019      	beq.n	8005d12 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005cde:	4b56      	ldr	r3, [pc, #344]	; (8005e38 <HAL_RCC_OscConfig+0x4a4>)
 8005ce0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ce2:	4a55      	ldr	r2, [pc, #340]	; (8005e38 <HAL_RCC_OscConfig+0x4a4>)
 8005ce4:	f043 0301 	orr.w	r3, r3, #1
 8005ce8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cea:	f7fc f853 	bl	8001d94 <HAL_GetTick>
 8005cee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005cf0:	e008      	b.n	8005d04 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005cf2:	f7fc f84f 	bl	8001d94 <HAL_GetTick>
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfa:	1ad3      	subs	r3, r2, r3
 8005cfc:	2b02      	cmp	r3, #2
 8005cfe:	d901      	bls.n	8005d04 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8005d00:	2303      	movs	r3, #3
 8005d02:	e219      	b.n	8006138 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005d04:	4b4c      	ldr	r3, [pc, #304]	; (8005e38 <HAL_RCC_OscConfig+0x4a4>)
 8005d06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d08:	f003 0302 	and.w	r3, r3, #2
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d0f0      	beq.n	8005cf2 <HAL_RCC_OscConfig+0x35e>
 8005d10:	e018      	b.n	8005d44 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d12:	4b49      	ldr	r3, [pc, #292]	; (8005e38 <HAL_RCC_OscConfig+0x4a4>)
 8005d14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d16:	4a48      	ldr	r2, [pc, #288]	; (8005e38 <HAL_RCC_OscConfig+0x4a4>)
 8005d18:	f023 0301 	bic.w	r3, r3, #1
 8005d1c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d1e:	f7fc f839 	bl	8001d94 <HAL_GetTick>
 8005d22:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005d24:	e008      	b.n	8005d38 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d26:	f7fc f835 	bl	8001d94 <HAL_GetTick>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2e:	1ad3      	subs	r3, r2, r3
 8005d30:	2b02      	cmp	r3, #2
 8005d32:	d901      	bls.n	8005d38 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8005d34:	2303      	movs	r3, #3
 8005d36:	e1ff      	b.n	8006138 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005d38:	4b3f      	ldr	r3, [pc, #252]	; (8005e38 <HAL_RCC_OscConfig+0x4a4>)
 8005d3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d3c:	f003 0302 	and.w	r3, r3, #2
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d1f0      	bne.n	8005d26 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 0320 	and.w	r3, r3, #32
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d036      	beq.n	8005dbe <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	699b      	ldr	r3, [r3, #24]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d019      	beq.n	8005d8c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005d58:	4b37      	ldr	r3, [pc, #220]	; (8005e38 <HAL_RCC_OscConfig+0x4a4>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a36      	ldr	r2, [pc, #216]	; (8005e38 <HAL_RCC_OscConfig+0x4a4>)
 8005d5e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005d62:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005d64:	f7fc f816 	bl	8001d94 <HAL_GetTick>
 8005d68:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005d6a:	e008      	b.n	8005d7e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d6c:	f7fc f812 	bl	8001d94 <HAL_GetTick>
 8005d70:	4602      	mov	r2, r0
 8005d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d74:	1ad3      	subs	r3, r2, r3
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	d901      	bls.n	8005d7e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8005d7a:	2303      	movs	r3, #3
 8005d7c:	e1dc      	b.n	8006138 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005d7e:	4b2e      	ldr	r3, [pc, #184]	; (8005e38 <HAL_RCC_OscConfig+0x4a4>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d0f0      	beq.n	8005d6c <HAL_RCC_OscConfig+0x3d8>
 8005d8a:	e018      	b.n	8005dbe <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005d8c:	4b2a      	ldr	r3, [pc, #168]	; (8005e38 <HAL_RCC_OscConfig+0x4a4>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a29      	ldr	r2, [pc, #164]	; (8005e38 <HAL_RCC_OscConfig+0x4a4>)
 8005d92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d96:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005d98:	f7fb fffc 	bl	8001d94 <HAL_GetTick>
 8005d9c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005d9e:	e008      	b.n	8005db2 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005da0:	f7fb fff8 	bl	8001d94 <HAL_GetTick>
 8005da4:	4602      	mov	r2, r0
 8005da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	d901      	bls.n	8005db2 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8005dae:	2303      	movs	r3, #3
 8005db0:	e1c2      	b.n	8006138 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005db2:	4b21      	ldr	r3, [pc, #132]	; (8005e38 <HAL_RCC_OscConfig+0x4a4>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d1f0      	bne.n	8005da0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 0304 	and.w	r3, r3, #4
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	f000 8086 	beq.w	8005ed8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005dcc:	4b1b      	ldr	r3, [pc, #108]	; (8005e3c <HAL_RCC_OscConfig+0x4a8>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a1a      	ldr	r2, [pc, #104]	; (8005e3c <HAL_RCC_OscConfig+0x4a8>)
 8005dd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dd6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005dd8:	f7fb ffdc 	bl	8001d94 <HAL_GetTick>
 8005ddc:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005dde:	e008      	b.n	8005df2 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005de0:	f7fb ffd8 	bl	8001d94 <HAL_GetTick>
 8005de4:	4602      	mov	r2, r0
 8005de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	2b64      	cmp	r3, #100	; 0x64
 8005dec:	d901      	bls.n	8005df2 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8005dee:	2303      	movs	r3, #3
 8005df0:	e1a2      	b.n	8006138 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005df2:	4b12      	ldr	r3, [pc, #72]	; (8005e3c <HAL_RCC_OscConfig+0x4a8>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d0f0      	beq.n	8005de0 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d106      	bne.n	8005e14 <HAL_RCC_OscConfig+0x480>
 8005e06:	4b0c      	ldr	r3, [pc, #48]	; (8005e38 <HAL_RCC_OscConfig+0x4a4>)
 8005e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e0a:	4a0b      	ldr	r2, [pc, #44]	; (8005e38 <HAL_RCC_OscConfig+0x4a4>)
 8005e0c:	f043 0301 	orr.w	r3, r3, #1
 8005e10:	6713      	str	r3, [r2, #112]	; 0x70
 8005e12:	e032      	b.n	8005e7a <HAL_RCC_OscConfig+0x4e6>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d111      	bne.n	8005e40 <HAL_RCC_OscConfig+0x4ac>
 8005e1c:	4b06      	ldr	r3, [pc, #24]	; (8005e38 <HAL_RCC_OscConfig+0x4a4>)
 8005e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e20:	4a05      	ldr	r2, [pc, #20]	; (8005e38 <HAL_RCC_OscConfig+0x4a4>)
 8005e22:	f023 0301 	bic.w	r3, r3, #1
 8005e26:	6713      	str	r3, [r2, #112]	; 0x70
 8005e28:	4b03      	ldr	r3, [pc, #12]	; (8005e38 <HAL_RCC_OscConfig+0x4a4>)
 8005e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e2c:	4a02      	ldr	r2, [pc, #8]	; (8005e38 <HAL_RCC_OscConfig+0x4a4>)
 8005e2e:	f023 0304 	bic.w	r3, r3, #4
 8005e32:	6713      	str	r3, [r2, #112]	; 0x70
 8005e34:	e021      	b.n	8005e7a <HAL_RCC_OscConfig+0x4e6>
 8005e36:	bf00      	nop
 8005e38:	58024400 	.word	0x58024400
 8005e3c:	58024800 	.word	0x58024800
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	2b05      	cmp	r3, #5
 8005e46:	d10c      	bne.n	8005e62 <HAL_RCC_OscConfig+0x4ce>
 8005e48:	4b83      	ldr	r3, [pc, #524]	; (8006058 <HAL_RCC_OscConfig+0x6c4>)
 8005e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e4c:	4a82      	ldr	r2, [pc, #520]	; (8006058 <HAL_RCC_OscConfig+0x6c4>)
 8005e4e:	f043 0304 	orr.w	r3, r3, #4
 8005e52:	6713      	str	r3, [r2, #112]	; 0x70
 8005e54:	4b80      	ldr	r3, [pc, #512]	; (8006058 <HAL_RCC_OscConfig+0x6c4>)
 8005e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e58:	4a7f      	ldr	r2, [pc, #508]	; (8006058 <HAL_RCC_OscConfig+0x6c4>)
 8005e5a:	f043 0301 	orr.w	r3, r3, #1
 8005e5e:	6713      	str	r3, [r2, #112]	; 0x70
 8005e60:	e00b      	b.n	8005e7a <HAL_RCC_OscConfig+0x4e6>
 8005e62:	4b7d      	ldr	r3, [pc, #500]	; (8006058 <HAL_RCC_OscConfig+0x6c4>)
 8005e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e66:	4a7c      	ldr	r2, [pc, #496]	; (8006058 <HAL_RCC_OscConfig+0x6c4>)
 8005e68:	f023 0301 	bic.w	r3, r3, #1
 8005e6c:	6713      	str	r3, [r2, #112]	; 0x70
 8005e6e:	4b7a      	ldr	r3, [pc, #488]	; (8006058 <HAL_RCC_OscConfig+0x6c4>)
 8005e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e72:	4a79      	ldr	r2, [pc, #484]	; (8006058 <HAL_RCC_OscConfig+0x6c4>)
 8005e74:	f023 0304 	bic.w	r3, r3, #4
 8005e78:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d015      	beq.n	8005eae <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e82:	f7fb ff87 	bl	8001d94 <HAL_GetTick>
 8005e86:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e88:	e00a      	b.n	8005ea0 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e8a:	f7fb ff83 	bl	8001d94 <HAL_GetTick>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e92:	1ad3      	subs	r3, r2, r3
 8005e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d901      	bls.n	8005ea0 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8005e9c:	2303      	movs	r3, #3
 8005e9e:	e14b      	b.n	8006138 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ea0:	4b6d      	ldr	r3, [pc, #436]	; (8006058 <HAL_RCC_OscConfig+0x6c4>)
 8005ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ea4:	f003 0302 	and.w	r3, r3, #2
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d0ee      	beq.n	8005e8a <HAL_RCC_OscConfig+0x4f6>
 8005eac:	e014      	b.n	8005ed8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005eae:	f7fb ff71 	bl	8001d94 <HAL_GetTick>
 8005eb2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005eb4:	e00a      	b.n	8005ecc <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005eb6:	f7fb ff6d 	bl	8001d94 <HAL_GetTick>
 8005eba:	4602      	mov	r2, r0
 8005ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebe:	1ad3      	subs	r3, r2, r3
 8005ec0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d901      	bls.n	8005ecc <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8005ec8:	2303      	movs	r3, #3
 8005eca:	e135      	b.n	8006138 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005ecc:	4b62      	ldr	r3, [pc, #392]	; (8006058 <HAL_RCC_OscConfig+0x6c4>)
 8005ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ed0:	f003 0302 	and.w	r3, r3, #2
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d1ee      	bne.n	8005eb6 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	f000 812a 	beq.w	8006136 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005ee2:	4b5d      	ldr	r3, [pc, #372]	; (8006058 <HAL_RCC_OscConfig+0x6c4>)
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005eea:	2b18      	cmp	r3, #24
 8005eec:	f000 80ba 	beq.w	8006064 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef4:	2b02      	cmp	r3, #2
 8005ef6:	f040 8095 	bne.w	8006024 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005efa:	4b57      	ldr	r3, [pc, #348]	; (8006058 <HAL_RCC_OscConfig+0x6c4>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a56      	ldr	r2, [pc, #344]	; (8006058 <HAL_RCC_OscConfig+0x6c4>)
 8005f00:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f06:	f7fb ff45 	bl	8001d94 <HAL_GetTick>
 8005f0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005f0c:	e008      	b.n	8005f20 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f0e:	f7fb ff41 	bl	8001d94 <HAL_GetTick>
 8005f12:	4602      	mov	r2, r0
 8005f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f16:	1ad3      	subs	r3, r2, r3
 8005f18:	2b02      	cmp	r3, #2
 8005f1a:	d901      	bls.n	8005f20 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8005f1c:	2303      	movs	r3, #3
 8005f1e:	e10b      	b.n	8006138 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005f20:	4b4d      	ldr	r3, [pc, #308]	; (8006058 <HAL_RCC_OscConfig+0x6c4>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d1f0      	bne.n	8005f0e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f2c:	4b4a      	ldr	r3, [pc, #296]	; (8006058 <HAL_RCC_OscConfig+0x6c4>)
 8005f2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f30:	4b4a      	ldr	r3, [pc, #296]	; (800605c <HAL_RCC_OscConfig+0x6c8>)
 8005f32:	4013      	ands	r3, r2
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005f3c:	0112      	lsls	r2, r2, #4
 8005f3e:	430a      	orrs	r2, r1
 8005f40:	4945      	ldr	r1, [pc, #276]	; (8006058 <HAL_RCC_OscConfig+0x6c4>)
 8005f42:	4313      	orrs	r3, r2
 8005f44:	628b      	str	r3, [r1, #40]	; 0x28
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f4a:	3b01      	subs	r3, #1
 8005f4c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f54:	3b01      	subs	r3, #1
 8005f56:	025b      	lsls	r3, r3, #9
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	431a      	orrs	r2, r3
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f60:	3b01      	subs	r3, #1
 8005f62:	041b      	lsls	r3, r3, #16
 8005f64:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005f68:	431a      	orrs	r2, r3
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f6e:	3b01      	subs	r3, #1
 8005f70:	061b      	lsls	r3, r3, #24
 8005f72:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005f76:	4938      	ldr	r1, [pc, #224]	; (8006058 <HAL_RCC_OscConfig+0x6c4>)
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005f7c:	4b36      	ldr	r3, [pc, #216]	; (8006058 <HAL_RCC_OscConfig+0x6c4>)
 8005f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f80:	4a35      	ldr	r2, [pc, #212]	; (8006058 <HAL_RCC_OscConfig+0x6c4>)
 8005f82:	f023 0301 	bic.w	r3, r3, #1
 8005f86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005f88:	4b33      	ldr	r3, [pc, #204]	; (8006058 <HAL_RCC_OscConfig+0x6c4>)
 8005f8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f8c:	4b34      	ldr	r3, [pc, #208]	; (8006060 <HAL_RCC_OscConfig+0x6cc>)
 8005f8e:	4013      	ands	r3, r2
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005f94:	00d2      	lsls	r2, r2, #3
 8005f96:	4930      	ldr	r1, [pc, #192]	; (8006058 <HAL_RCC_OscConfig+0x6c4>)
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005f9c:	4b2e      	ldr	r3, [pc, #184]	; (8006058 <HAL_RCC_OscConfig+0x6c4>)
 8005f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa0:	f023 020c 	bic.w	r2, r3, #12
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa8:	492b      	ldr	r1, [pc, #172]	; (8006058 <HAL_RCC_OscConfig+0x6c4>)
 8005faa:	4313      	orrs	r3, r2
 8005fac:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005fae:	4b2a      	ldr	r3, [pc, #168]	; (8006058 <HAL_RCC_OscConfig+0x6c4>)
 8005fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb2:	f023 0202 	bic.w	r2, r3, #2
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fba:	4927      	ldr	r1, [pc, #156]	; (8006058 <HAL_RCC_OscConfig+0x6c4>)
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005fc0:	4b25      	ldr	r3, [pc, #148]	; (8006058 <HAL_RCC_OscConfig+0x6c4>)
 8005fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc4:	4a24      	ldr	r2, [pc, #144]	; (8006058 <HAL_RCC_OscConfig+0x6c4>)
 8005fc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fcc:	4b22      	ldr	r3, [pc, #136]	; (8006058 <HAL_RCC_OscConfig+0x6c4>)
 8005fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd0:	4a21      	ldr	r2, [pc, #132]	; (8006058 <HAL_RCC_OscConfig+0x6c4>)
 8005fd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fd6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005fd8:	4b1f      	ldr	r3, [pc, #124]	; (8006058 <HAL_RCC_OscConfig+0x6c4>)
 8005fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fdc:	4a1e      	ldr	r2, [pc, #120]	; (8006058 <HAL_RCC_OscConfig+0x6c4>)
 8005fde:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005fe2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005fe4:	4b1c      	ldr	r3, [pc, #112]	; (8006058 <HAL_RCC_OscConfig+0x6c4>)
 8005fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe8:	4a1b      	ldr	r2, [pc, #108]	; (8006058 <HAL_RCC_OscConfig+0x6c4>)
 8005fea:	f043 0301 	orr.w	r3, r3, #1
 8005fee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ff0:	4b19      	ldr	r3, [pc, #100]	; (8006058 <HAL_RCC_OscConfig+0x6c4>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a18      	ldr	r2, [pc, #96]	; (8006058 <HAL_RCC_OscConfig+0x6c4>)
 8005ff6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ffa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ffc:	f7fb feca 	bl	8001d94 <HAL_GetTick>
 8006000:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006002:	e008      	b.n	8006016 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006004:	f7fb fec6 	bl	8001d94 <HAL_GetTick>
 8006008:	4602      	mov	r2, r0
 800600a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	2b02      	cmp	r3, #2
 8006010:	d901      	bls.n	8006016 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8006012:	2303      	movs	r3, #3
 8006014:	e090      	b.n	8006138 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006016:	4b10      	ldr	r3, [pc, #64]	; (8006058 <HAL_RCC_OscConfig+0x6c4>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800601e:	2b00      	cmp	r3, #0
 8006020:	d0f0      	beq.n	8006004 <HAL_RCC_OscConfig+0x670>
 8006022:	e088      	b.n	8006136 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006024:	4b0c      	ldr	r3, [pc, #48]	; (8006058 <HAL_RCC_OscConfig+0x6c4>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a0b      	ldr	r2, [pc, #44]	; (8006058 <HAL_RCC_OscConfig+0x6c4>)
 800602a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800602e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006030:	f7fb feb0 	bl	8001d94 <HAL_GetTick>
 8006034:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006036:	e008      	b.n	800604a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006038:	f7fb feac 	bl	8001d94 <HAL_GetTick>
 800603c:	4602      	mov	r2, r0
 800603e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006040:	1ad3      	subs	r3, r2, r3
 8006042:	2b02      	cmp	r3, #2
 8006044:	d901      	bls.n	800604a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8006046:	2303      	movs	r3, #3
 8006048:	e076      	b.n	8006138 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800604a:	4b03      	ldr	r3, [pc, #12]	; (8006058 <HAL_RCC_OscConfig+0x6c4>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006052:	2b00      	cmp	r3, #0
 8006054:	d1f0      	bne.n	8006038 <HAL_RCC_OscConfig+0x6a4>
 8006056:	e06e      	b.n	8006136 <HAL_RCC_OscConfig+0x7a2>
 8006058:	58024400 	.word	0x58024400
 800605c:	fffffc0c 	.word	0xfffffc0c
 8006060:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006064:	4b36      	ldr	r3, [pc, #216]	; (8006140 <HAL_RCC_OscConfig+0x7ac>)
 8006066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006068:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800606a:	4b35      	ldr	r3, [pc, #212]	; (8006140 <HAL_RCC_OscConfig+0x7ac>)
 800606c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800606e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006074:	2b01      	cmp	r3, #1
 8006076:	d031      	beq.n	80060dc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	f003 0203 	and.w	r2, r3, #3
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006082:	429a      	cmp	r2, r3
 8006084:	d12a      	bne.n	80060dc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	091b      	lsrs	r3, r3, #4
 800608a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006092:	429a      	cmp	r2, r3
 8006094:	d122      	bne.n	80060dc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d11a      	bne.n	80060dc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	0a5b      	lsrs	r3, r3, #9
 80060aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060b2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d111      	bne.n	80060dc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	0c1b      	lsrs	r3, r3, #16
 80060bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d108      	bne.n	80060dc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	0e1b      	lsrs	r3, r3, #24
 80060ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060d6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80060d8:	429a      	cmp	r2, r3
 80060da:	d001      	beq.n	80060e0 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80060dc:	2301      	movs	r3, #1
 80060de:	e02b      	b.n	8006138 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80060e0:	4b17      	ldr	r3, [pc, #92]	; (8006140 <HAL_RCC_OscConfig+0x7ac>)
 80060e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060e4:	08db      	lsrs	r3, r3, #3
 80060e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80060ea:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060f0:	693a      	ldr	r2, [r7, #16]
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d01f      	beq.n	8006136 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80060f6:	4b12      	ldr	r3, [pc, #72]	; (8006140 <HAL_RCC_OscConfig+0x7ac>)
 80060f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060fa:	4a11      	ldr	r2, [pc, #68]	; (8006140 <HAL_RCC_OscConfig+0x7ac>)
 80060fc:	f023 0301 	bic.w	r3, r3, #1
 8006100:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006102:	f7fb fe47 	bl	8001d94 <HAL_GetTick>
 8006106:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006108:	bf00      	nop
 800610a:	f7fb fe43 	bl	8001d94 <HAL_GetTick>
 800610e:	4602      	mov	r2, r0
 8006110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006112:	4293      	cmp	r3, r2
 8006114:	d0f9      	beq.n	800610a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006116:	4b0a      	ldr	r3, [pc, #40]	; (8006140 <HAL_RCC_OscConfig+0x7ac>)
 8006118:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800611a:	4b0a      	ldr	r3, [pc, #40]	; (8006144 <HAL_RCC_OscConfig+0x7b0>)
 800611c:	4013      	ands	r3, r2
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006122:	00d2      	lsls	r2, r2, #3
 8006124:	4906      	ldr	r1, [pc, #24]	; (8006140 <HAL_RCC_OscConfig+0x7ac>)
 8006126:	4313      	orrs	r3, r2
 8006128:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800612a:	4b05      	ldr	r3, [pc, #20]	; (8006140 <HAL_RCC_OscConfig+0x7ac>)
 800612c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800612e:	4a04      	ldr	r2, [pc, #16]	; (8006140 <HAL_RCC_OscConfig+0x7ac>)
 8006130:	f043 0301 	orr.w	r3, r3, #1
 8006134:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006136:	2300      	movs	r3, #0
}
 8006138:	4618      	mov	r0, r3
 800613a:	3730      	adds	r7, #48	; 0x30
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}
 8006140:	58024400 	.word	0x58024400
 8006144:	ffff0007 	.word	0xffff0007

08006148 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b086      	sub	sp, #24
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d101      	bne.n	800615c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	e19c      	b.n	8006496 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800615c:	4b8a      	ldr	r3, [pc, #552]	; (8006388 <HAL_RCC_ClockConfig+0x240>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f003 030f 	and.w	r3, r3, #15
 8006164:	683a      	ldr	r2, [r7, #0]
 8006166:	429a      	cmp	r2, r3
 8006168:	d910      	bls.n	800618c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800616a:	4b87      	ldr	r3, [pc, #540]	; (8006388 <HAL_RCC_ClockConfig+0x240>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f023 020f 	bic.w	r2, r3, #15
 8006172:	4985      	ldr	r1, [pc, #532]	; (8006388 <HAL_RCC_ClockConfig+0x240>)
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	4313      	orrs	r3, r2
 8006178:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800617a:	4b83      	ldr	r3, [pc, #524]	; (8006388 <HAL_RCC_ClockConfig+0x240>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f003 030f 	and.w	r3, r3, #15
 8006182:	683a      	ldr	r2, [r7, #0]
 8006184:	429a      	cmp	r2, r3
 8006186:	d001      	beq.n	800618c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006188:	2301      	movs	r3, #1
 800618a:	e184      	b.n	8006496 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f003 0304 	and.w	r3, r3, #4
 8006194:	2b00      	cmp	r3, #0
 8006196:	d010      	beq.n	80061ba <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	691a      	ldr	r2, [r3, #16]
 800619c:	4b7b      	ldr	r3, [pc, #492]	; (800638c <HAL_RCC_ClockConfig+0x244>)
 800619e:	699b      	ldr	r3, [r3, #24]
 80061a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d908      	bls.n	80061ba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80061a8:	4b78      	ldr	r3, [pc, #480]	; (800638c <HAL_RCC_ClockConfig+0x244>)
 80061aa:	699b      	ldr	r3, [r3, #24]
 80061ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	691b      	ldr	r3, [r3, #16]
 80061b4:	4975      	ldr	r1, [pc, #468]	; (800638c <HAL_RCC_ClockConfig+0x244>)
 80061b6:	4313      	orrs	r3, r2
 80061b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f003 0308 	and.w	r3, r3, #8
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d010      	beq.n	80061e8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	695a      	ldr	r2, [r3, #20]
 80061ca:	4b70      	ldr	r3, [pc, #448]	; (800638c <HAL_RCC_ClockConfig+0x244>)
 80061cc:	69db      	ldr	r3, [r3, #28]
 80061ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d908      	bls.n	80061e8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80061d6:	4b6d      	ldr	r3, [pc, #436]	; (800638c <HAL_RCC_ClockConfig+0x244>)
 80061d8:	69db      	ldr	r3, [r3, #28]
 80061da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	695b      	ldr	r3, [r3, #20]
 80061e2:	496a      	ldr	r1, [pc, #424]	; (800638c <HAL_RCC_ClockConfig+0x244>)
 80061e4:	4313      	orrs	r3, r2
 80061e6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f003 0310 	and.w	r3, r3, #16
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d010      	beq.n	8006216 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	699a      	ldr	r2, [r3, #24]
 80061f8:	4b64      	ldr	r3, [pc, #400]	; (800638c <HAL_RCC_ClockConfig+0x244>)
 80061fa:	69db      	ldr	r3, [r3, #28]
 80061fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006200:	429a      	cmp	r2, r3
 8006202:	d908      	bls.n	8006216 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006204:	4b61      	ldr	r3, [pc, #388]	; (800638c <HAL_RCC_ClockConfig+0x244>)
 8006206:	69db      	ldr	r3, [r3, #28]
 8006208:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	699b      	ldr	r3, [r3, #24]
 8006210:	495e      	ldr	r1, [pc, #376]	; (800638c <HAL_RCC_ClockConfig+0x244>)
 8006212:	4313      	orrs	r3, r2
 8006214:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f003 0320 	and.w	r3, r3, #32
 800621e:	2b00      	cmp	r3, #0
 8006220:	d010      	beq.n	8006244 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	69da      	ldr	r2, [r3, #28]
 8006226:	4b59      	ldr	r3, [pc, #356]	; (800638c <HAL_RCC_ClockConfig+0x244>)
 8006228:	6a1b      	ldr	r3, [r3, #32]
 800622a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800622e:	429a      	cmp	r2, r3
 8006230:	d908      	bls.n	8006244 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006232:	4b56      	ldr	r3, [pc, #344]	; (800638c <HAL_RCC_ClockConfig+0x244>)
 8006234:	6a1b      	ldr	r3, [r3, #32]
 8006236:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	69db      	ldr	r3, [r3, #28]
 800623e:	4953      	ldr	r1, [pc, #332]	; (800638c <HAL_RCC_ClockConfig+0x244>)
 8006240:	4313      	orrs	r3, r2
 8006242:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 0302 	and.w	r3, r3, #2
 800624c:	2b00      	cmp	r3, #0
 800624e:	d010      	beq.n	8006272 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	68da      	ldr	r2, [r3, #12]
 8006254:	4b4d      	ldr	r3, [pc, #308]	; (800638c <HAL_RCC_ClockConfig+0x244>)
 8006256:	699b      	ldr	r3, [r3, #24]
 8006258:	f003 030f 	and.w	r3, r3, #15
 800625c:	429a      	cmp	r2, r3
 800625e:	d908      	bls.n	8006272 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006260:	4b4a      	ldr	r3, [pc, #296]	; (800638c <HAL_RCC_ClockConfig+0x244>)
 8006262:	699b      	ldr	r3, [r3, #24]
 8006264:	f023 020f 	bic.w	r2, r3, #15
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	4947      	ldr	r1, [pc, #284]	; (800638c <HAL_RCC_ClockConfig+0x244>)
 800626e:	4313      	orrs	r3, r2
 8006270:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f003 0301 	and.w	r3, r3, #1
 800627a:	2b00      	cmp	r3, #0
 800627c:	d055      	beq.n	800632a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800627e:	4b43      	ldr	r3, [pc, #268]	; (800638c <HAL_RCC_ClockConfig+0x244>)
 8006280:	699b      	ldr	r3, [r3, #24]
 8006282:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	4940      	ldr	r1, [pc, #256]	; (800638c <HAL_RCC_ClockConfig+0x244>)
 800628c:	4313      	orrs	r3, r2
 800628e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	2b02      	cmp	r3, #2
 8006296:	d107      	bne.n	80062a8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006298:	4b3c      	ldr	r3, [pc, #240]	; (800638c <HAL_RCC_ClockConfig+0x244>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d121      	bne.n	80062e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	e0f6      	b.n	8006496 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	2b03      	cmp	r3, #3
 80062ae:	d107      	bne.n	80062c0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80062b0:	4b36      	ldr	r3, [pc, #216]	; (800638c <HAL_RCC_ClockConfig+0x244>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d115      	bne.n	80062e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	e0ea      	b.n	8006496 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d107      	bne.n	80062d8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80062c8:	4b30      	ldr	r3, [pc, #192]	; (800638c <HAL_RCC_ClockConfig+0x244>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d109      	bne.n	80062e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80062d4:	2301      	movs	r3, #1
 80062d6:	e0de      	b.n	8006496 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80062d8:	4b2c      	ldr	r3, [pc, #176]	; (800638c <HAL_RCC_ClockConfig+0x244>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f003 0304 	and.w	r3, r3, #4
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d101      	bne.n	80062e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80062e4:	2301      	movs	r3, #1
 80062e6:	e0d6      	b.n	8006496 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80062e8:	4b28      	ldr	r3, [pc, #160]	; (800638c <HAL_RCC_ClockConfig+0x244>)
 80062ea:	691b      	ldr	r3, [r3, #16]
 80062ec:	f023 0207 	bic.w	r2, r3, #7
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	4925      	ldr	r1, [pc, #148]	; (800638c <HAL_RCC_ClockConfig+0x244>)
 80062f6:	4313      	orrs	r3, r2
 80062f8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062fa:	f7fb fd4b 	bl	8001d94 <HAL_GetTick>
 80062fe:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006300:	e00a      	b.n	8006318 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006302:	f7fb fd47 	bl	8001d94 <HAL_GetTick>
 8006306:	4602      	mov	r2, r0
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	1ad3      	subs	r3, r2, r3
 800630c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006310:	4293      	cmp	r3, r2
 8006312:	d901      	bls.n	8006318 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006314:	2303      	movs	r3, #3
 8006316:	e0be      	b.n	8006496 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006318:	4b1c      	ldr	r3, [pc, #112]	; (800638c <HAL_RCC_ClockConfig+0x244>)
 800631a:	691b      	ldr	r3, [r3, #16]
 800631c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	00db      	lsls	r3, r3, #3
 8006326:	429a      	cmp	r2, r3
 8006328:	d1eb      	bne.n	8006302 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f003 0302 	and.w	r3, r3, #2
 8006332:	2b00      	cmp	r3, #0
 8006334:	d010      	beq.n	8006358 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	68da      	ldr	r2, [r3, #12]
 800633a:	4b14      	ldr	r3, [pc, #80]	; (800638c <HAL_RCC_ClockConfig+0x244>)
 800633c:	699b      	ldr	r3, [r3, #24]
 800633e:	f003 030f 	and.w	r3, r3, #15
 8006342:	429a      	cmp	r2, r3
 8006344:	d208      	bcs.n	8006358 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006346:	4b11      	ldr	r3, [pc, #68]	; (800638c <HAL_RCC_ClockConfig+0x244>)
 8006348:	699b      	ldr	r3, [r3, #24]
 800634a:	f023 020f 	bic.w	r2, r3, #15
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	490e      	ldr	r1, [pc, #56]	; (800638c <HAL_RCC_ClockConfig+0x244>)
 8006354:	4313      	orrs	r3, r2
 8006356:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006358:	4b0b      	ldr	r3, [pc, #44]	; (8006388 <HAL_RCC_ClockConfig+0x240>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f003 030f 	and.w	r3, r3, #15
 8006360:	683a      	ldr	r2, [r7, #0]
 8006362:	429a      	cmp	r2, r3
 8006364:	d214      	bcs.n	8006390 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006366:	4b08      	ldr	r3, [pc, #32]	; (8006388 <HAL_RCC_ClockConfig+0x240>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f023 020f 	bic.w	r2, r3, #15
 800636e:	4906      	ldr	r1, [pc, #24]	; (8006388 <HAL_RCC_ClockConfig+0x240>)
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	4313      	orrs	r3, r2
 8006374:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006376:	4b04      	ldr	r3, [pc, #16]	; (8006388 <HAL_RCC_ClockConfig+0x240>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f003 030f 	and.w	r3, r3, #15
 800637e:	683a      	ldr	r2, [r7, #0]
 8006380:	429a      	cmp	r2, r3
 8006382:	d005      	beq.n	8006390 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	e086      	b.n	8006496 <HAL_RCC_ClockConfig+0x34e>
 8006388:	52002000 	.word	0x52002000
 800638c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 0304 	and.w	r3, r3, #4
 8006398:	2b00      	cmp	r3, #0
 800639a:	d010      	beq.n	80063be <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	691a      	ldr	r2, [r3, #16]
 80063a0:	4b3f      	ldr	r3, [pc, #252]	; (80064a0 <HAL_RCC_ClockConfig+0x358>)
 80063a2:	699b      	ldr	r3, [r3, #24]
 80063a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d208      	bcs.n	80063be <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80063ac:	4b3c      	ldr	r3, [pc, #240]	; (80064a0 <HAL_RCC_ClockConfig+0x358>)
 80063ae:	699b      	ldr	r3, [r3, #24]
 80063b0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	691b      	ldr	r3, [r3, #16]
 80063b8:	4939      	ldr	r1, [pc, #228]	; (80064a0 <HAL_RCC_ClockConfig+0x358>)
 80063ba:	4313      	orrs	r3, r2
 80063bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f003 0308 	and.w	r3, r3, #8
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d010      	beq.n	80063ec <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	695a      	ldr	r2, [r3, #20]
 80063ce:	4b34      	ldr	r3, [pc, #208]	; (80064a0 <HAL_RCC_ClockConfig+0x358>)
 80063d0:	69db      	ldr	r3, [r3, #28]
 80063d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d208      	bcs.n	80063ec <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80063da:	4b31      	ldr	r3, [pc, #196]	; (80064a0 <HAL_RCC_ClockConfig+0x358>)
 80063dc:	69db      	ldr	r3, [r3, #28]
 80063de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	695b      	ldr	r3, [r3, #20]
 80063e6:	492e      	ldr	r1, [pc, #184]	; (80064a0 <HAL_RCC_ClockConfig+0x358>)
 80063e8:	4313      	orrs	r3, r2
 80063ea:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f003 0310 	and.w	r3, r3, #16
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d010      	beq.n	800641a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	699a      	ldr	r2, [r3, #24]
 80063fc:	4b28      	ldr	r3, [pc, #160]	; (80064a0 <HAL_RCC_ClockConfig+0x358>)
 80063fe:	69db      	ldr	r3, [r3, #28]
 8006400:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006404:	429a      	cmp	r2, r3
 8006406:	d208      	bcs.n	800641a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006408:	4b25      	ldr	r3, [pc, #148]	; (80064a0 <HAL_RCC_ClockConfig+0x358>)
 800640a:	69db      	ldr	r3, [r3, #28]
 800640c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	699b      	ldr	r3, [r3, #24]
 8006414:	4922      	ldr	r1, [pc, #136]	; (80064a0 <HAL_RCC_ClockConfig+0x358>)
 8006416:	4313      	orrs	r3, r2
 8006418:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f003 0320 	and.w	r3, r3, #32
 8006422:	2b00      	cmp	r3, #0
 8006424:	d010      	beq.n	8006448 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	69da      	ldr	r2, [r3, #28]
 800642a:	4b1d      	ldr	r3, [pc, #116]	; (80064a0 <HAL_RCC_ClockConfig+0x358>)
 800642c:	6a1b      	ldr	r3, [r3, #32]
 800642e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006432:	429a      	cmp	r2, r3
 8006434:	d208      	bcs.n	8006448 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006436:	4b1a      	ldr	r3, [pc, #104]	; (80064a0 <HAL_RCC_ClockConfig+0x358>)
 8006438:	6a1b      	ldr	r3, [r3, #32]
 800643a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	69db      	ldr	r3, [r3, #28]
 8006442:	4917      	ldr	r1, [pc, #92]	; (80064a0 <HAL_RCC_ClockConfig+0x358>)
 8006444:	4313      	orrs	r3, r2
 8006446:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006448:	f000 f834 	bl	80064b4 <HAL_RCC_GetSysClockFreq>
 800644c:	4602      	mov	r2, r0
 800644e:	4b14      	ldr	r3, [pc, #80]	; (80064a0 <HAL_RCC_ClockConfig+0x358>)
 8006450:	699b      	ldr	r3, [r3, #24]
 8006452:	0a1b      	lsrs	r3, r3, #8
 8006454:	f003 030f 	and.w	r3, r3, #15
 8006458:	4912      	ldr	r1, [pc, #72]	; (80064a4 <HAL_RCC_ClockConfig+0x35c>)
 800645a:	5ccb      	ldrb	r3, [r1, r3]
 800645c:	f003 031f 	and.w	r3, r3, #31
 8006460:	fa22 f303 	lsr.w	r3, r2, r3
 8006464:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006466:	4b0e      	ldr	r3, [pc, #56]	; (80064a0 <HAL_RCC_ClockConfig+0x358>)
 8006468:	699b      	ldr	r3, [r3, #24]
 800646a:	f003 030f 	and.w	r3, r3, #15
 800646e:	4a0d      	ldr	r2, [pc, #52]	; (80064a4 <HAL_RCC_ClockConfig+0x35c>)
 8006470:	5cd3      	ldrb	r3, [r2, r3]
 8006472:	f003 031f 	and.w	r3, r3, #31
 8006476:	693a      	ldr	r2, [r7, #16]
 8006478:	fa22 f303 	lsr.w	r3, r2, r3
 800647c:	4a0a      	ldr	r2, [pc, #40]	; (80064a8 <HAL_RCC_ClockConfig+0x360>)
 800647e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006480:	4a0a      	ldr	r2, [pc, #40]	; (80064ac <HAL_RCC_ClockConfig+0x364>)
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006486:	4b0a      	ldr	r3, [pc, #40]	; (80064b0 <HAL_RCC_ClockConfig+0x368>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4618      	mov	r0, r3
 800648c:	f7fb f9e6 	bl	800185c <HAL_InitTick>
 8006490:	4603      	mov	r3, r0
 8006492:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006494:	7bfb      	ldrb	r3, [r7, #15]
}
 8006496:	4618      	mov	r0, r3
 8006498:	3718      	adds	r7, #24
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop
 80064a0:	58024400 	.word	0x58024400
 80064a4:	08010fe4 	.word	0x08010fe4
 80064a8:	24000004 	.word	0x24000004
 80064ac:	24000000 	.word	0x24000000
 80064b0:	24000008 	.word	0x24000008

080064b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b089      	sub	sp, #36	; 0x24
 80064b8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80064ba:	4bb3      	ldr	r3, [pc, #716]	; (8006788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80064c2:	2b18      	cmp	r3, #24
 80064c4:	f200 8155 	bhi.w	8006772 <HAL_RCC_GetSysClockFreq+0x2be>
 80064c8:	a201      	add	r2, pc, #4	; (adr r2, 80064d0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80064ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ce:	bf00      	nop
 80064d0:	08006535 	.word	0x08006535
 80064d4:	08006773 	.word	0x08006773
 80064d8:	08006773 	.word	0x08006773
 80064dc:	08006773 	.word	0x08006773
 80064e0:	08006773 	.word	0x08006773
 80064e4:	08006773 	.word	0x08006773
 80064e8:	08006773 	.word	0x08006773
 80064ec:	08006773 	.word	0x08006773
 80064f0:	0800655b 	.word	0x0800655b
 80064f4:	08006773 	.word	0x08006773
 80064f8:	08006773 	.word	0x08006773
 80064fc:	08006773 	.word	0x08006773
 8006500:	08006773 	.word	0x08006773
 8006504:	08006773 	.word	0x08006773
 8006508:	08006773 	.word	0x08006773
 800650c:	08006773 	.word	0x08006773
 8006510:	08006561 	.word	0x08006561
 8006514:	08006773 	.word	0x08006773
 8006518:	08006773 	.word	0x08006773
 800651c:	08006773 	.word	0x08006773
 8006520:	08006773 	.word	0x08006773
 8006524:	08006773 	.word	0x08006773
 8006528:	08006773 	.word	0x08006773
 800652c:	08006773 	.word	0x08006773
 8006530:	08006567 	.word	0x08006567
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006534:	4b94      	ldr	r3, [pc, #592]	; (8006788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f003 0320 	and.w	r3, r3, #32
 800653c:	2b00      	cmp	r3, #0
 800653e:	d009      	beq.n	8006554 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006540:	4b91      	ldr	r3, [pc, #580]	; (8006788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	08db      	lsrs	r3, r3, #3
 8006546:	f003 0303 	and.w	r3, r3, #3
 800654a:	4a90      	ldr	r2, [pc, #576]	; (800678c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800654c:	fa22 f303 	lsr.w	r3, r2, r3
 8006550:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006552:	e111      	b.n	8006778 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006554:	4b8d      	ldr	r3, [pc, #564]	; (800678c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006556:	61bb      	str	r3, [r7, #24]
      break;
 8006558:	e10e      	b.n	8006778 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800655a:	4b8d      	ldr	r3, [pc, #564]	; (8006790 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800655c:	61bb      	str	r3, [r7, #24]
      break;
 800655e:	e10b      	b.n	8006778 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006560:	4b8c      	ldr	r3, [pc, #560]	; (8006794 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006562:	61bb      	str	r3, [r7, #24]
      break;
 8006564:	e108      	b.n	8006778 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006566:	4b88      	ldr	r3, [pc, #544]	; (8006788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800656a:	f003 0303 	and.w	r3, r3, #3
 800656e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006570:	4b85      	ldr	r3, [pc, #532]	; (8006788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006574:	091b      	lsrs	r3, r3, #4
 8006576:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800657a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800657c:	4b82      	ldr	r3, [pc, #520]	; (8006788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800657e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006580:	f003 0301 	and.w	r3, r3, #1
 8006584:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006586:	4b80      	ldr	r3, [pc, #512]	; (8006788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800658a:	08db      	lsrs	r3, r3, #3
 800658c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006590:	68fa      	ldr	r2, [r7, #12]
 8006592:	fb02 f303 	mul.w	r3, r2, r3
 8006596:	ee07 3a90 	vmov	s15, r3
 800659a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800659e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	f000 80e1 	beq.w	800676c <HAL_RCC_GetSysClockFreq+0x2b8>
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	2b02      	cmp	r3, #2
 80065ae:	f000 8083 	beq.w	80066b8 <HAL_RCC_GetSysClockFreq+0x204>
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	2b02      	cmp	r3, #2
 80065b6:	f200 80a1 	bhi.w	80066fc <HAL_RCC_GetSysClockFreq+0x248>
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d003      	beq.n	80065c8 <HAL_RCC_GetSysClockFreq+0x114>
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d056      	beq.n	8006674 <HAL_RCC_GetSysClockFreq+0x1c0>
 80065c6:	e099      	b.n	80066fc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065c8:	4b6f      	ldr	r3, [pc, #444]	; (8006788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f003 0320 	and.w	r3, r3, #32
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d02d      	beq.n	8006630 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80065d4:	4b6c      	ldr	r3, [pc, #432]	; (8006788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	08db      	lsrs	r3, r3, #3
 80065da:	f003 0303 	and.w	r3, r3, #3
 80065de:	4a6b      	ldr	r2, [pc, #428]	; (800678c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80065e0:	fa22 f303 	lsr.w	r3, r2, r3
 80065e4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	ee07 3a90 	vmov	s15, r3
 80065ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	ee07 3a90 	vmov	s15, r3
 80065f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065fe:	4b62      	ldr	r3, [pc, #392]	; (8006788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006602:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006606:	ee07 3a90 	vmov	s15, r3
 800660a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800660e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006612:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006798 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006616:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800661a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800661e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006622:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006626:	ee67 7a27 	vmul.f32	s15, s14, s15
 800662a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800662e:	e087      	b.n	8006740 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	ee07 3a90 	vmov	s15, r3
 8006636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800663a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800679c <HAL_RCC_GetSysClockFreq+0x2e8>
 800663e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006642:	4b51      	ldr	r3, [pc, #324]	; (8006788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006646:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800664a:	ee07 3a90 	vmov	s15, r3
 800664e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006652:	ed97 6a02 	vldr	s12, [r7, #8]
 8006656:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006798 <HAL_RCC_GetSysClockFreq+0x2e4>
 800665a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800665e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006662:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006666:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800666a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800666e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006672:	e065      	b.n	8006740 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	ee07 3a90 	vmov	s15, r3
 800667a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800667e:	eddf 6a48 	vldr	s13, [pc, #288]	; 80067a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006682:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006686:	4b40      	ldr	r3, [pc, #256]	; (8006788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800668a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800668e:	ee07 3a90 	vmov	s15, r3
 8006692:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006696:	ed97 6a02 	vldr	s12, [r7, #8]
 800669a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006798 <HAL_RCC_GetSysClockFreq+0x2e4>
 800669e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80066b6:	e043      	b.n	8006740 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	ee07 3a90 	vmov	s15, r3
 80066be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066c2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80067a4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80066c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066ca:	4b2f      	ldr	r3, [pc, #188]	; (8006788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066d2:	ee07 3a90 	vmov	s15, r3
 80066d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066da:	ed97 6a02 	vldr	s12, [r7, #8]
 80066de:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006798 <HAL_RCC_GetSysClockFreq+0x2e4>
 80066e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80066fa:	e021      	b.n	8006740 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	ee07 3a90 	vmov	s15, r3
 8006702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006706:	eddf 6a26 	vldr	s13, [pc, #152]	; 80067a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800670a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800670e:	4b1e      	ldr	r3, [pc, #120]	; (8006788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006716:	ee07 3a90 	vmov	s15, r3
 800671a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800671e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006722:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006798 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006726:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800672a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800672e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800673a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800673e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006740:	4b11      	ldr	r3, [pc, #68]	; (8006788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006744:	0a5b      	lsrs	r3, r3, #9
 8006746:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800674a:	3301      	adds	r3, #1
 800674c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	ee07 3a90 	vmov	s15, r3
 8006754:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006758:	edd7 6a07 	vldr	s13, [r7, #28]
 800675c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006760:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006764:	ee17 3a90 	vmov	r3, s15
 8006768:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800676a:	e005      	b.n	8006778 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800676c:	2300      	movs	r3, #0
 800676e:	61bb      	str	r3, [r7, #24]
      break;
 8006770:	e002      	b.n	8006778 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006772:	4b07      	ldr	r3, [pc, #28]	; (8006790 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006774:	61bb      	str	r3, [r7, #24]
      break;
 8006776:	bf00      	nop
  }

  return sysclockfreq;
 8006778:	69bb      	ldr	r3, [r7, #24]
}
 800677a:	4618      	mov	r0, r3
 800677c:	3724      	adds	r7, #36	; 0x24
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr
 8006786:	bf00      	nop
 8006788:	58024400 	.word	0x58024400
 800678c:	03d09000 	.word	0x03d09000
 8006790:	003d0900 	.word	0x003d0900
 8006794:	007a1200 	.word	0x007a1200
 8006798:	46000000 	.word	0x46000000
 800679c:	4c742400 	.word	0x4c742400
 80067a0:	4a742400 	.word	0x4a742400
 80067a4:	4af42400 	.word	0x4af42400

080067a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b082      	sub	sp, #8
 80067ac:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80067ae:	f7ff fe81 	bl	80064b4 <HAL_RCC_GetSysClockFreq>
 80067b2:	4602      	mov	r2, r0
 80067b4:	4b10      	ldr	r3, [pc, #64]	; (80067f8 <HAL_RCC_GetHCLKFreq+0x50>)
 80067b6:	699b      	ldr	r3, [r3, #24]
 80067b8:	0a1b      	lsrs	r3, r3, #8
 80067ba:	f003 030f 	and.w	r3, r3, #15
 80067be:	490f      	ldr	r1, [pc, #60]	; (80067fc <HAL_RCC_GetHCLKFreq+0x54>)
 80067c0:	5ccb      	ldrb	r3, [r1, r3]
 80067c2:	f003 031f 	and.w	r3, r3, #31
 80067c6:	fa22 f303 	lsr.w	r3, r2, r3
 80067ca:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80067cc:	4b0a      	ldr	r3, [pc, #40]	; (80067f8 <HAL_RCC_GetHCLKFreq+0x50>)
 80067ce:	699b      	ldr	r3, [r3, #24]
 80067d0:	f003 030f 	and.w	r3, r3, #15
 80067d4:	4a09      	ldr	r2, [pc, #36]	; (80067fc <HAL_RCC_GetHCLKFreq+0x54>)
 80067d6:	5cd3      	ldrb	r3, [r2, r3]
 80067d8:	f003 031f 	and.w	r3, r3, #31
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	fa22 f303 	lsr.w	r3, r2, r3
 80067e2:	4a07      	ldr	r2, [pc, #28]	; (8006800 <HAL_RCC_GetHCLKFreq+0x58>)
 80067e4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80067e6:	4a07      	ldr	r2, [pc, #28]	; (8006804 <HAL_RCC_GetHCLKFreq+0x5c>)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80067ec:	4b04      	ldr	r3, [pc, #16]	; (8006800 <HAL_RCC_GetHCLKFreq+0x58>)
 80067ee:	681b      	ldr	r3, [r3, #0]
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3708      	adds	r7, #8
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}
 80067f8:	58024400 	.word	0x58024400
 80067fc:	08010fe4 	.word	0x08010fe4
 8006800:	24000004 	.word	0x24000004
 8006804:	24000000 	.word	0x24000000

08006808 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800680c:	f7ff ffcc 	bl	80067a8 <HAL_RCC_GetHCLKFreq>
 8006810:	4602      	mov	r2, r0
 8006812:	4b06      	ldr	r3, [pc, #24]	; (800682c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006814:	69db      	ldr	r3, [r3, #28]
 8006816:	091b      	lsrs	r3, r3, #4
 8006818:	f003 0307 	and.w	r3, r3, #7
 800681c:	4904      	ldr	r1, [pc, #16]	; (8006830 <HAL_RCC_GetPCLK1Freq+0x28>)
 800681e:	5ccb      	ldrb	r3, [r1, r3]
 8006820:	f003 031f 	and.w	r3, r3, #31
 8006824:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006828:	4618      	mov	r0, r3
 800682a:	bd80      	pop	{r7, pc}
 800682c:	58024400 	.word	0x58024400
 8006830:	08010fe4 	.word	0x08010fe4

08006834 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006838:	f7ff ffb6 	bl	80067a8 <HAL_RCC_GetHCLKFreq>
 800683c:	4602      	mov	r2, r0
 800683e:	4b06      	ldr	r3, [pc, #24]	; (8006858 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006840:	69db      	ldr	r3, [r3, #28]
 8006842:	0a1b      	lsrs	r3, r3, #8
 8006844:	f003 0307 	and.w	r3, r3, #7
 8006848:	4904      	ldr	r1, [pc, #16]	; (800685c <HAL_RCC_GetPCLK2Freq+0x28>)
 800684a:	5ccb      	ldrb	r3, [r1, r3]
 800684c:	f003 031f 	and.w	r3, r3, #31
 8006850:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006854:	4618      	mov	r0, r3
 8006856:	bd80      	pop	{r7, pc}
 8006858:	58024400 	.word	0x58024400
 800685c:	08010fe4 	.word	0x08010fe4

08006860 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006860:	b480      	push	{r7}
 8006862:	b083      	sub	sp, #12
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	223f      	movs	r2, #63	; 0x3f
 800686e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006870:	4b1a      	ldr	r3, [pc, #104]	; (80068dc <HAL_RCC_GetClockConfig+0x7c>)
 8006872:	691b      	ldr	r3, [r3, #16]
 8006874:	f003 0207 	and.w	r2, r3, #7
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800687c:	4b17      	ldr	r3, [pc, #92]	; (80068dc <HAL_RCC_GetClockConfig+0x7c>)
 800687e:	699b      	ldr	r3, [r3, #24]
 8006880:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8006888:	4b14      	ldr	r3, [pc, #80]	; (80068dc <HAL_RCC_GetClockConfig+0x7c>)
 800688a:	699b      	ldr	r3, [r3, #24]
 800688c:	f003 020f 	and.w	r2, r3, #15
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8006894:	4b11      	ldr	r3, [pc, #68]	; (80068dc <HAL_RCC_GetClockConfig+0x7c>)
 8006896:	699b      	ldr	r3, [r3, #24]
 8006898:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80068a0:	4b0e      	ldr	r3, [pc, #56]	; (80068dc <HAL_RCC_GetClockConfig+0x7c>)
 80068a2:	69db      	ldr	r3, [r3, #28]
 80068a4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80068ac:	4b0b      	ldr	r3, [pc, #44]	; (80068dc <HAL_RCC_GetClockConfig+0x7c>)
 80068ae:	69db      	ldr	r3, [r3, #28]
 80068b0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80068b8:	4b08      	ldr	r3, [pc, #32]	; (80068dc <HAL_RCC_GetClockConfig+0x7c>)
 80068ba:	6a1b      	ldr	r3, [r3, #32]
 80068bc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80068c4:	4b06      	ldr	r3, [pc, #24]	; (80068e0 <HAL_RCC_GetClockConfig+0x80>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f003 020f 	and.w	r2, r3, #15
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	601a      	str	r2, [r3, #0]
}
 80068d0:	bf00      	nop
 80068d2:	370c      	adds	r7, #12
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr
 80068dc:	58024400 	.word	0x58024400
 80068e0:	52002000 	.word	0x52002000

080068e4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80068e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068e8:	b0c6      	sub	sp, #280	; 0x118
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80068f0:	2300      	movs	r3, #0
 80068f2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80068f6:	2300      	movs	r3, #0
 80068f8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80068fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006904:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8006908:	2500      	movs	r5, #0
 800690a:	ea54 0305 	orrs.w	r3, r4, r5
 800690e:	d049      	beq.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006910:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006914:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006916:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800691a:	d02f      	beq.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800691c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006920:	d828      	bhi.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006922:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006926:	d01a      	beq.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006928:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800692c:	d822      	bhi.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800692e:	2b00      	cmp	r3, #0
 8006930:	d003      	beq.n	800693a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006932:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006936:	d007      	beq.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006938:	e01c      	b.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800693a:	4bab      	ldr	r3, [pc, #684]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800693c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800693e:	4aaa      	ldr	r2, [pc, #680]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006940:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006944:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006946:	e01a      	b.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006948:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800694c:	3308      	adds	r3, #8
 800694e:	2102      	movs	r1, #2
 8006950:	4618      	mov	r0, r3
 8006952:	f001 fc25 	bl	80081a0 <RCCEx_PLL2_Config>
 8006956:	4603      	mov	r3, r0
 8006958:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800695c:	e00f      	b.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800695e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006962:	3328      	adds	r3, #40	; 0x28
 8006964:	2102      	movs	r1, #2
 8006966:	4618      	mov	r0, r3
 8006968:	f001 fccc 	bl	8008304 <RCCEx_PLL3_Config>
 800696c:	4603      	mov	r3, r0
 800696e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006972:	e004      	b.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006974:	2301      	movs	r3, #1
 8006976:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800697a:	e000      	b.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800697c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800697e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006982:	2b00      	cmp	r3, #0
 8006984:	d10a      	bne.n	800699c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006986:	4b98      	ldr	r3, [pc, #608]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006988:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800698a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800698e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006992:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006994:	4a94      	ldr	r2, [pc, #592]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006996:	430b      	orrs	r3, r1
 8006998:	6513      	str	r3, [r2, #80]	; 0x50
 800699a:	e003      	b.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800699c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80069a0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80069a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ac:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80069b0:	f04f 0900 	mov.w	r9, #0
 80069b4:	ea58 0309 	orrs.w	r3, r8, r9
 80069b8:	d047      	beq.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80069ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069c0:	2b04      	cmp	r3, #4
 80069c2:	d82a      	bhi.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80069c4:	a201      	add	r2, pc, #4	; (adr r2, 80069cc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80069c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ca:	bf00      	nop
 80069cc:	080069e1 	.word	0x080069e1
 80069d0:	080069ef 	.word	0x080069ef
 80069d4:	08006a05 	.word	0x08006a05
 80069d8:	08006a23 	.word	0x08006a23
 80069dc:	08006a23 	.word	0x08006a23
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069e0:	4b81      	ldr	r3, [pc, #516]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80069e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e4:	4a80      	ldr	r2, [pc, #512]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80069e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80069ec:	e01a      	b.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80069ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069f2:	3308      	adds	r3, #8
 80069f4:	2100      	movs	r1, #0
 80069f6:	4618      	mov	r0, r3
 80069f8:	f001 fbd2 	bl	80081a0 <RCCEx_PLL2_Config>
 80069fc:	4603      	mov	r3, r0
 80069fe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006a02:	e00f      	b.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006a04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a08:	3328      	adds	r3, #40	; 0x28
 8006a0a:	2100      	movs	r1, #0
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f001 fc79 	bl	8008304 <RCCEx_PLL3_Config>
 8006a12:	4603      	mov	r3, r0
 8006a14:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006a18:	e004      	b.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006a20:	e000      	b.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006a22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a24:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d10a      	bne.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006a2c:	4b6e      	ldr	r3, [pc, #440]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006a2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a30:	f023 0107 	bic.w	r1, r3, #7
 8006a34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a3a:	4a6b      	ldr	r2, [pc, #428]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006a3c:	430b      	orrs	r3, r1
 8006a3e:	6513      	str	r3, [r2, #80]	; 0x50
 8006a40:	e003      	b.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a42:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006a46:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006a4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a52:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8006a56:	f04f 0b00 	mov.w	fp, #0
 8006a5a:	ea5a 030b 	orrs.w	r3, sl, fp
 8006a5e:	d05b      	beq.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006a60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a64:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006a68:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8006a6c:	d03b      	beq.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8006a6e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8006a72:	d834      	bhi.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006a74:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006a78:	d037      	beq.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006a7a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006a7e:	d82e      	bhi.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006a80:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006a84:	d033      	beq.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8006a86:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006a8a:	d828      	bhi.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006a8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a90:	d01a      	beq.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8006a92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a96:	d822      	bhi.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d003      	beq.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8006a9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006aa0:	d007      	beq.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8006aa2:	e01c      	b.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006aa4:	4b50      	ldr	r3, [pc, #320]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa8:	4a4f      	ldr	r2, [pc, #316]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006aaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006aae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006ab0:	e01e      	b.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ab2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ab6:	3308      	adds	r3, #8
 8006ab8:	2100      	movs	r1, #0
 8006aba:	4618      	mov	r0, r3
 8006abc:	f001 fb70 	bl	80081a0 <RCCEx_PLL2_Config>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006ac6:	e013      	b.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006acc:	3328      	adds	r3, #40	; 0x28
 8006ace:	2100      	movs	r1, #0
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f001 fc17 	bl	8008304 <RCCEx_PLL3_Config>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006adc:	e008      	b.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006ae4:	e004      	b.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006ae6:	bf00      	nop
 8006ae8:	e002      	b.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006aea:	bf00      	nop
 8006aec:	e000      	b.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006aee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006af0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d10b      	bne.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006af8:	4b3b      	ldr	r3, [pc, #236]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006afc:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8006b00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b04:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006b08:	4a37      	ldr	r2, [pc, #220]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006b0a:	430b      	orrs	r3, r1
 8006b0c:	6593      	str	r3, [r2, #88]	; 0x58
 8006b0e:	e003      	b.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b10:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006b14:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006b18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b20:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8006b24:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006b28:	2300      	movs	r3, #0
 8006b2a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006b2e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8006b32:	460b      	mov	r3, r1
 8006b34:	4313      	orrs	r3, r2
 8006b36:	d05d      	beq.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006b38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b3c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006b40:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006b44:	d03b      	beq.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006b46:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006b4a:	d834      	bhi.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006b4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006b50:	d037      	beq.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8006b52:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006b56:	d82e      	bhi.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006b58:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006b5c:	d033      	beq.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8006b5e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006b62:	d828      	bhi.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006b64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b68:	d01a      	beq.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8006b6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b6e:	d822      	bhi.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d003      	beq.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006b74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006b78:	d007      	beq.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006b7a:	e01c      	b.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b7c:	4b1a      	ldr	r3, [pc, #104]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b80:	4a19      	ldr	r2, [pc, #100]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006b82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006b88:	e01e      	b.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b8e:	3308      	adds	r3, #8
 8006b90:	2100      	movs	r1, #0
 8006b92:	4618      	mov	r0, r3
 8006b94:	f001 fb04 	bl	80081a0 <RCCEx_PLL2_Config>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006b9e:	e013      	b.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ba0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ba4:	3328      	adds	r3, #40	; 0x28
 8006ba6:	2100      	movs	r1, #0
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f001 fbab 	bl	8008304 <RCCEx_PLL3_Config>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006bb4:	e008      	b.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006bbc:	e004      	b.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006bbe:	bf00      	nop
 8006bc0:	e002      	b.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006bc2:	bf00      	nop
 8006bc4:	e000      	b.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006bc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bc8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d10d      	bne.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006bd0:	4b05      	ldr	r3, [pc, #20]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bd4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8006bd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bdc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006be0:	4a01      	ldr	r2, [pc, #4]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006be2:	430b      	orrs	r3, r1
 8006be4:	6593      	str	r3, [r2, #88]	; 0x58
 8006be6:	e005      	b.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8006be8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006bf0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006bf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bfc:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006c00:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006c04:	2300      	movs	r3, #0
 8006c06:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006c0a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8006c0e:	460b      	mov	r3, r1
 8006c10:	4313      	orrs	r3, r2
 8006c12:	d03a      	beq.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8006c14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c1a:	2b30      	cmp	r3, #48	; 0x30
 8006c1c:	d01f      	beq.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8006c1e:	2b30      	cmp	r3, #48	; 0x30
 8006c20:	d819      	bhi.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006c22:	2b20      	cmp	r3, #32
 8006c24:	d00c      	beq.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006c26:	2b20      	cmp	r3, #32
 8006c28:	d815      	bhi.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d019      	beq.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006c2e:	2b10      	cmp	r3, #16
 8006c30:	d111      	bne.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c32:	4baa      	ldr	r3, [pc, #680]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c36:	4aa9      	ldr	r2, [pc, #676]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006c38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c3c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006c3e:	e011      	b.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006c40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c44:	3308      	adds	r3, #8
 8006c46:	2102      	movs	r1, #2
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f001 faa9 	bl	80081a0 <RCCEx_PLL2_Config>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006c54:	e006      	b.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006c5c:	e002      	b.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006c5e:	bf00      	nop
 8006c60:	e000      	b.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006c62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c64:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d10a      	bne.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006c6c:	4b9b      	ldr	r3, [pc, #620]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006c6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c70:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8006c74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c7a:	4a98      	ldr	r2, [pc, #608]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006c7c:	430b      	orrs	r3, r1
 8006c7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006c80:	e003      	b.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c82:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006c86:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006c8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c92:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8006c96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006ca0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	d051      	beq.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006caa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006cb4:	d035      	beq.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8006cb6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006cba:	d82e      	bhi.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006cbc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006cc0:	d031      	beq.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8006cc2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006cc6:	d828      	bhi.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006cc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ccc:	d01a      	beq.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8006cce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cd2:	d822      	bhi.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d003      	beq.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8006cd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cdc:	d007      	beq.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8006cde:	e01c      	b.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ce0:	4b7e      	ldr	r3, [pc, #504]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce4:	4a7d      	ldr	r2, [pc, #500]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006ce6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006cec:	e01c      	b.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006cee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cf2:	3308      	adds	r3, #8
 8006cf4:	2100      	movs	r1, #0
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f001 fa52 	bl	80081a0 <RCCEx_PLL2_Config>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006d02:	e011      	b.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d08:	3328      	adds	r3, #40	; 0x28
 8006d0a:	2100      	movs	r1, #0
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f001 faf9 	bl	8008304 <RCCEx_PLL3_Config>
 8006d12:	4603      	mov	r3, r0
 8006d14:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006d18:	e006      	b.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006d20:	e002      	b.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006d22:	bf00      	nop
 8006d24:	e000      	b.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006d26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d28:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d10a      	bne.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006d30:	4b6a      	ldr	r3, [pc, #424]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d34:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006d38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d3e:	4a67      	ldr	r2, [pc, #412]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006d40:	430b      	orrs	r3, r1
 8006d42:	6513      	str	r3, [r2, #80]	; 0x50
 8006d44:	e003      	b.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d46:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006d4a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006d4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d56:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8006d5a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006d5e:	2300      	movs	r3, #0
 8006d60:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006d64:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8006d68:	460b      	mov	r3, r1
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	d053      	beq.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006d6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d78:	d033      	beq.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8006d7a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d7e:	d82c      	bhi.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006d80:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006d84:	d02f      	beq.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8006d86:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006d8a:	d826      	bhi.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006d8c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006d90:	d02b      	beq.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x506>
 8006d92:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006d96:	d820      	bhi.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006d98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d9c:	d012      	beq.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8006d9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006da2:	d81a      	bhi.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d022      	beq.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8006da8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dac:	d115      	bne.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006dae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006db2:	3308      	adds	r3, #8
 8006db4:	2101      	movs	r1, #1
 8006db6:	4618      	mov	r0, r3
 8006db8:	f001 f9f2 	bl	80081a0 <RCCEx_PLL2_Config>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006dc2:	e015      	b.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006dc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dc8:	3328      	adds	r3, #40	; 0x28
 8006dca:	2101      	movs	r1, #1
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f001 fa99 	bl	8008304 <RCCEx_PLL3_Config>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006dd8:	e00a      	b.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006de0:	e006      	b.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006de2:	bf00      	nop
 8006de4:	e004      	b.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006de6:	bf00      	nop
 8006de8:	e002      	b.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006dea:	bf00      	nop
 8006dec:	e000      	b.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006dee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006df0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d10a      	bne.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006df8:	4b38      	ldr	r3, [pc, #224]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dfc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006e00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e06:	4a35      	ldr	r2, [pc, #212]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006e08:	430b      	orrs	r3, r1
 8006e0a:	6513      	str	r3, [r2, #80]	; 0x50
 8006e0c:	e003      	b.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e0e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006e12:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006e16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e1e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8006e22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006e26:	2300      	movs	r3, #0
 8006e28:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006e2c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006e30:	460b      	mov	r3, r1
 8006e32:	4313      	orrs	r3, r2
 8006e34:	d058      	beq.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006e36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e3a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006e3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006e42:	d033      	beq.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006e44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006e48:	d82c      	bhi.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e4e:	d02f      	beq.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006e50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e54:	d826      	bhi.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006e56:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006e5a:	d02b      	beq.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006e5c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006e60:	d820      	bhi.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006e62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e66:	d012      	beq.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8006e68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e6c:	d81a      	bhi.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d022      	beq.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006e72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e76:	d115      	bne.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006e78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e7c:	3308      	adds	r3, #8
 8006e7e:	2101      	movs	r1, #1
 8006e80:	4618      	mov	r0, r3
 8006e82:	f001 f98d 	bl	80081a0 <RCCEx_PLL2_Config>
 8006e86:	4603      	mov	r3, r0
 8006e88:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006e8c:	e015      	b.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006e8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e92:	3328      	adds	r3, #40	; 0x28
 8006e94:	2101      	movs	r1, #1
 8006e96:	4618      	mov	r0, r3
 8006e98:	f001 fa34 	bl	8008304 <RCCEx_PLL3_Config>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006ea2:	e00a      	b.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006eaa:	e006      	b.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006eac:	bf00      	nop
 8006eae:	e004      	b.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006eb0:	bf00      	nop
 8006eb2:	e002      	b.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006eb4:	bf00      	nop
 8006eb6:	e000      	b.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006eb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006eba:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d10e      	bne.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006ec2:	4b06      	ldr	r3, [pc, #24]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ec6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006eca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ece:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006ed2:	4a02      	ldr	r2, [pc, #8]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006ed4:	430b      	orrs	r3, r1
 8006ed6:	6593      	str	r3, [r2, #88]	; 0x58
 8006ed8:	e006      	b.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006eda:	bf00      	nop
 8006edc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ee0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006ee4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006ee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8006ef4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006ef8:	2300      	movs	r3, #0
 8006efa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006efe:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8006f02:	460b      	mov	r3, r1
 8006f04:	4313      	orrs	r3, r2
 8006f06:	d037      	beq.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006f08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f12:	d00e      	beq.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006f14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f18:	d816      	bhi.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d018      	beq.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8006f1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f22:	d111      	bne.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f24:	4bc4      	ldr	r3, [pc, #784]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f28:	4ac3      	ldr	r2, [pc, #780]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006f2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006f30:	e00f      	b.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006f32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f36:	3308      	adds	r3, #8
 8006f38:	2101      	movs	r1, #1
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f001 f930 	bl	80081a0 <RCCEx_PLL2_Config>
 8006f40:	4603      	mov	r3, r0
 8006f42:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006f46:	e004      	b.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006f4e:	e000      	b.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006f50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f52:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d10a      	bne.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006f5a:	4bb7      	ldr	r3, [pc, #732]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006f5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f5e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006f62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f68:	4ab3      	ldr	r2, [pc, #716]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006f6a:	430b      	orrs	r3, r1
 8006f6c:	6513      	str	r3, [r2, #80]	; 0x50
 8006f6e:	e003      	b.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f70:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006f74:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006f78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f80:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8006f84:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006f88:	2300      	movs	r3, #0
 8006f8a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006f8e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8006f92:	460b      	mov	r3, r1
 8006f94:	4313      	orrs	r3, r2
 8006f96:	d039      	beq.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006f98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f9e:	2b03      	cmp	r3, #3
 8006fa0:	d81c      	bhi.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8006fa2:	a201      	add	r2, pc, #4	; (adr r2, 8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8006fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa8:	08006fe5 	.word	0x08006fe5
 8006fac:	08006fb9 	.word	0x08006fb9
 8006fb0:	08006fc7 	.word	0x08006fc7
 8006fb4:	08006fe5 	.word	0x08006fe5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fb8:	4b9f      	ldr	r3, [pc, #636]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fbc:	4a9e      	ldr	r2, [pc, #632]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006fbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fc2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006fc4:	e00f      	b.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006fc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fca:	3308      	adds	r3, #8
 8006fcc:	2102      	movs	r1, #2
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f001 f8e6 	bl	80081a0 <RCCEx_PLL2_Config>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006fda:	e004      	b.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006fe2:	e000      	b.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8006fe4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fe6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d10a      	bne.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006fee:	4b92      	ldr	r3, [pc, #584]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ff2:	f023 0103 	bic.w	r1, r3, #3
 8006ff6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ffa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ffc:	4a8e      	ldr	r2, [pc, #568]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ffe:	430b      	orrs	r3, r1
 8007000:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007002:	e003      	b.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007004:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007008:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800700c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007014:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8007018:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800701c:	2300      	movs	r3, #0
 800701e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007022:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007026:	460b      	mov	r3, r1
 8007028:	4313      	orrs	r3, r2
 800702a:	f000 8099 	beq.w	8007160 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800702e:	4b83      	ldr	r3, [pc, #524]	; (800723c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a82      	ldr	r2, [pc, #520]	; (800723c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007038:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800703a:	f7fa feab 	bl	8001d94 <HAL_GetTick>
 800703e:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007042:	e00b      	b.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007044:	f7fa fea6 	bl	8001d94 <HAL_GetTick>
 8007048:	4602      	mov	r2, r0
 800704a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800704e:	1ad3      	subs	r3, r2, r3
 8007050:	2b64      	cmp	r3, #100	; 0x64
 8007052:	d903      	bls.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8007054:	2303      	movs	r3, #3
 8007056:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800705a:	e005      	b.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800705c:	4b77      	ldr	r3, [pc, #476]	; (800723c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007064:	2b00      	cmp	r3, #0
 8007066:	d0ed      	beq.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8007068:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800706c:	2b00      	cmp	r3, #0
 800706e:	d173      	bne.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007070:	4b71      	ldr	r3, [pc, #452]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007072:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007074:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007078:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800707c:	4053      	eors	r3, r2
 800707e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007082:	2b00      	cmp	r3, #0
 8007084:	d015      	beq.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007086:	4b6c      	ldr	r3, [pc, #432]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800708a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800708e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007092:	4b69      	ldr	r3, [pc, #420]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007096:	4a68      	ldr	r2, [pc, #416]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800709c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800709e:	4b66      	ldr	r3, [pc, #408]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80070a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070a2:	4a65      	ldr	r2, [pc, #404]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80070a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070a8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80070aa:	4a63      	ldr	r2, [pc, #396]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80070ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80070b0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80070b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80070ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070be:	d118      	bne.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070c0:	f7fa fe68 	bl	8001d94 <HAL_GetTick>
 80070c4:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80070c8:	e00d      	b.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070ca:	f7fa fe63 	bl	8001d94 <HAL_GetTick>
 80070ce:	4602      	mov	r2, r0
 80070d0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80070d4:	1ad2      	subs	r2, r2, r3
 80070d6:	f241 3388 	movw	r3, #5000	; 0x1388
 80070da:	429a      	cmp	r2, r3
 80070dc:	d903      	bls.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80070de:	2303      	movs	r3, #3
 80070e0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 80070e4:	e005      	b.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80070e6:	4b54      	ldr	r3, [pc, #336]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80070e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070ea:	f003 0302 	and.w	r3, r3, #2
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d0eb      	beq.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80070f2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d129      	bne.n	800714e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80070fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007102:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007106:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800710a:	d10e      	bne.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800710c:	4b4a      	ldr	r3, [pc, #296]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800710e:	691b      	ldr	r3, [r3, #16]
 8007110:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8007114:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007118:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800711c:	091a      	lsrs	r2, r3, #4
 800711e:	4b48      	ldr	r3, [pc, #288]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8007120:	4013      	ands	r3, r2
 8007122:	4a45      	ldr	r2, [pc, #276]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007124:	430b      	orrs	r3, r1
 8007126:	6113      	str	r3, [r2, #16]
 8007128:	e005      	b.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800712a:	4b43      	ldr	r3, [pc, #268]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800712c:	691b      	ldr	r3, [r3, #16]
 800712e:	4a42      	ldr	r2, [pc, #264]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007130:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007134:	6113      	str	r3, [r2, #16]
 8007136:	4b40      	ldr	r3, [pc, #256]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007138:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800713a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800713e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007142:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007146:	4a3c      	ldr	r2, [pc, #240]	; (8007238 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007148:	430b      	orrs	r3, r1
 800714a:	6713      	str	r3, [r2, #112]	; 0x70
 800714c:	e008      	b.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800714e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007152:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8007156:	e003      	b.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007158:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800715c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007160:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007168:	f002 0301 	and.w	r3, r2, #1
 800716c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007170:	2300      	movs	r3, #0
 8007172:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007176:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800717a:	460b      	mov	r3, r1
 800717c:	4313      	orrs	r3, r2
 800717e:	f000 808f 	beq.w	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007182:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007186:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007188:	2b28      	cmp	r3, #40	; 0x28
 800718a:	d871      	bhi.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800718c:	a201      	add	r2, pc, #4	; (adr r2, 8007194 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800718e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007192:	bf00      	nop
 8007194:	08007279 	.word	0x08007279
 8007198:	08007271 	.word	0x08007271
 800719c:	08007271 	.word	0x08007271
 80071a0:	08007271 	.word	0x08007271
 80071a4:	08007271 	.word	0x08007271
 80071a8:	08007271 	.word	0x08007271
 80071ac:	08007271 	.word	0x08007271
 80071b0:	08007271 	.word	0x08007271
 80071b4:	08007245 	.word	0x08007245
 80071b8:	08007271 	.word	0x08007271
 80071bc:	08007271 	.word	0x08007271
 80071c0:	08007271 	.word	0x08007271
 80071c4:	08007271 	.word	0x08007271
 80071c8:	08007271 	.word	0x08007271
 80071cc:	08007271 	.word	0x08007271
 80071d0:	08007271 	.word	0x08007271
 80071d4:	0800725b 	.word	0x0800725b
 80071d8:	08007271 	.word	0x08007271
 80071dc:	08007271 	.word	0x08007271
 80071e0:	08007271 	.word	0x08007271
 80071e4:	08007271 	.word	0x08007271
 80071e8:	08007271 	.word	0x08007271
 80071ec:	08007271 	.word	0x08007271
 80071f0:	08007271 	.word	0x08007271
 80071f4:	08007279 	.word	0x08007279
 80071f8:	08007271 	.word	0x08007271
 80071fc:	08007271 	.word	0x08007271
 8007200:	08007271 	.word	0x08007271
 8007204:	08007271 	.word	0x08007271
 8007208:	08007271 	.word	0x08007271
 800720c:	08007271 	.word	0x08007271
 8007210:	08007271 	.word	0x08007271
 8007214:	08007279 	.word	0x08007279
 8007218:	08007271 	.word	0x08007271
 800721c:	08007271 	.word	0x08007271
 8007220:	08007271 	.word	0x08007271
 8007224:	08007271 	.word	0x08007271
 8007228:	08007271 	.word	0x08007271
 800722c:	08007271 	.word	0x08007271
 8007230:	08007271 	.word	0x08007271
 8007234:	08007279 	.word	0x08007279
 8007238:	58024400 	.word	0x58024400
 800723c:	58024800 	.word	0x58024800
 8007240:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007244:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007248:	3308      	adds	r3, #8
 800724a:	2101      	movs	r1, #1
 800724c:	4618      	mov	r0, r3
 800724e:	f000 ffa7 	bl	80081a0 <RCCEx_PLL2_Config>
 8007252:	4603      	mov	r3, r0
 8007254:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007258:	e00f      	b.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800725a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800725e:	3328      	adds	r3, #40	; 0x28
 8007260:	2101      	movs	r1, #1
 8007262:	4618      	mov	r0, r3
 8007264:	f001 f84e 	bl	8008304 <RCCEx_PLL3_Config>
 8007268:	4603      	mov	r3, r0
 800726a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800726e:	e004      	b.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007270:	2301      	movs	r3, #1
 8007272:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007276:	e000      	b.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8007278:	bf00      	nop
    }

    if (ret == HAL_OK)
 800727a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800727e:	2b00      	cmp	r3, #0
 8007280:	d10a      	bne.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007282:	4bbf      	ldr	r3, [pc, #764]	; (8007580 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007286:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800728a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800728e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007290:	4abb      	ldr	r2, [pc, #748]	; (8007580 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007292:	430b      	orrs	r3, r1
 8007294:	6553      	str	r3, [r2, #84]	; 0x54
 8007296:	e003      	b.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007298:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800729c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80072a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a8:	f002 0302 	and.w	r3, r2, #2
 80072ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80072b0:	2300      	movs	r3, #0
 80072b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80072b6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80072ba:	460b      	mov	r3, r1
 80072bc:	4313      	orrs	r3, r2
 80072be:	d041      	beq.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80072c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072c6:	2b05      	cmp	r3, #5
 80072c8:	d824      	bhi.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80072ca:	a201      	add	r2, pc, #4	; (adr r2, 80072d0 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80072cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072d0:	0800731d 	.word	0x0800731d
 80072d4:	080072e9 	.word	0x080072e9
 80072d8:	080072ff 	.word	0x080072ff
 80072dc:	0800731d 	.word	0x0800731d
 80072e0:	0800731d 	.word	0x0800731d
 80072e4:	0800731d 	.word	0x0800731d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80072e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072ec:	3308      	adds	r3, #8
 80072ee:	2101      	movs	r1, #1
 80072f0:	4618      	mov	r0, r3
 80072f2:	f000 ff55 	bl	80081a0 <RCCEx_PLL2_Config>
 80072f6:	4603      	mov	r3, r0
 80072f8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80072fc:	e00f      	b.n	800731e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80072fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007302:	3328      	adds	r3, #40	; 0x28
 8007304:	2101      	movs	r1, #1
 8007306:	4618      	mov	r0, r3
 8007308:	f000 fffc 	bl	8008304 <RCCEx_PLL3_Config>
 800730c:	4603      	mov	r3, r0
 800730e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007312:	e004      	b.n	800731e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007314:	2301      	movs	r3, #1
 8007316:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800731a:	e000      	b.n	800731e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800731c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800731e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007322:	2b00      	cmp	r3, #0
 8007324:	d10a      	bne.n	800733c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007326:	4b96      	ldr	r3, [pc, #600]	; (8007580 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800732a:	f023 0107 	bic.w	r1, r3, #7
 800732e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007332:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007334:	4a92      	ldr	r2, [pc, #584]	; (8007580 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007336:	430b      	orrs	r3, r1
 8007338:	6553      	str	r3, [r2, #84]	; 0x54
 800733a:	e003      	b.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800733c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007340:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007344:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800734c:	f002 0304 	and.w	r3, r2, #4
 8007350:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007354:	2300      	movs	r3, #0
 8007356:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800735a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800735e:	460b      	mov	r3, r1
 8007360:	4313      	orrs	r3, r2
 8007362:	d044      	beq.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007364:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800736c:	2b05      	cmp	r3, #5
 800736e:	d825      	bhi.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8007370:	a201      	add	r2, pc, #4	; (adr r2, 8007378 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8007372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007376:	bf00      	nop
 8007378:	080073c5 	.word	0x080073c5
 800737c:	08007391 	.word	0x08007391
 8007380:	080073a7 	.word	0x080073a7
 8007384:	080073c5 	.word	0x080073c5
 8007388:	080073c5 	.word	0x080073c5
 800738c:	080073c5 	.word	0x080073c5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007390:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007394:	3308      	adds	r3, #8
 8007396:	2101      	movs	r1, #1
 8007398:	4618      	mov	r0, r3
 800739a:	f000 ff01 	bl	80081a0 <RCCEx_PLL2_Config>
 800739e:	4603      	mov	r3, r0
 80073a0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80073a4:	e00f      	b.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80073a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073aa:	3328      	adds	r3, #40	; 0x28
 80073ac:	2101      	movs	r1, #1
 80073ae:	4618      	mov	r0, r3
 80073b0:	f000 ffa8 	bl	8008304 <RCCEx_PLL3_Config>
 80073b4:	4603      	mov	r3, r0
 80073b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80073ba:	e004      	b.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073bc:	2301      	movs	r3, #1
 80073be:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80073c2:	e000      	b.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80073c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073c6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d10b      	bne.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80073ce:	4b6c      	ldr	r3, [pc, #432]	; (8007580 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80073d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073d2:	f023 0107 	bic.w	r1, r3, #7
 80073d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073de:	4a68      	ldr	r2, [pc, #416]	; (8007580 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80073e0:	430b      	orrs	r3, r1
 80073e2:	6593      	str	r3, [r2, #88]	; 0x58
 80073e4:	e003      	b.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073e6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80073ea:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80073ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f6:	f002 0320 	and.w	r3, r2, #32
 80073fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80073fe:	2300      	movs	r3, #0
 8007400:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007404:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8007408:	460b      	mov	r3, r1
 800740a:	4313      	orrs	r3, r2
 800740c:	d055      	beq.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800740e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007412:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007416:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800741a:	d033      	beq.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800741c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007420:	d82c      	bhi.n	800747c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007422:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007426:	d02f      	beq.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8007428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800742c:	d826      	bhi.n	800747c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800742e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007432:	d02b      	beq.n	800748c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8007434:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007438:	d820      	bhi.n	800747c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800743a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800743e:	d012      	beq.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8007440:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007444:	d81a      	bhi.n	800747c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007446:	2b00      	cmp	r3, #0
 8007448:	d022      	beq.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800744a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800744e:	d115      	bne.n	800747c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007450:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007454:	3308      	adds	r3, #8
 8007456:	2100      	movs	r1, #0
 8007458:	4618      	mov	r0, r3
 800745a:	f000 fea1 	bl	80081a0 <RCCEx_PLL2_Config>
 800745e:	4603      	mov	r3, r0
 8007460:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007464:	e015      	b.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007466:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800746a:	3328      	adds	r3, #40	; 0x28
 800746c:	2102      	movs	r1, #2
 800746e:	4618      	mov	r0, r3
 8007470:	f000 ff48 	bl	8008304 <RCCEx_PLL3_Config>
 8007474:	4603      	mov	r3, r0
 8007476:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800747a:	e00a      	b.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800747c:	2301      	movs	r3, #1
 800747e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007482:	e006      	b.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007484:	bf00      	nop
 8007486:	e004      	b.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007488:	bf00      	nop
 800748a:	e002      	b.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800748c:	bf00      	nop
 800748e:	e000      	b.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007490:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007492:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007496:	2b00      	cmp	r3, #0
 8007498:	d10b      	bne.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800749a:	4b39      	ldr	r3, [pc, #228]	; (8007580 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800749c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800749e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80074a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074aa:	4a35      	ldr	r2, [pc, #212]	; (8007580 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80074ac:	430b      	orrs	r3, r1
 80074ae:	6553      	str	r3, [r2, #84]	; 0x54
 80074b0:	e003      	b.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074b2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80074b6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80074ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80074c6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80074ca:	2300      	movs	r3, #0
 80074cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80074d0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80074d4:	460b      	mov	r3, r1
 80074d6:	4313      	orrs	r3, r2
 80074d8:	d058      	beq.n	800758c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80074da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80074e2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80074e6:	d033      	beq.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80074e8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80074ec:	d82c      	bhi.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80074ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074f2:	d02f      	beq.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80074f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074f8:	d826      	bhi.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80074fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80074fe:	d02b      	beq.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007500:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007504:	d820      	bhi.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007506:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800750a:	d012      	beq.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800750c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007510:	d81a      	bhi.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007512:	2b00      	cmp	r3, #0
 8007514:	d022      	beq.n	800755c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8007516:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800751a:	d115      	bne.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800751c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007520:	3308      	adds	r3, #8
 8007522:	2100      	movs	r1, #0
 8007524:	4618      	mov	r0, r3
 8007526:	f000 fe3b 	bl	80081a0 <RCCEx_PLL2_Config>
 800752a:	4603      	mov	r3, r0
 800752c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007530:	e015      	b.n	800755e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007532:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007536:	3328      	adds	r3, #40	; 0x28
 8007538:	2102      	movs	r1, #2
 800753a:	4618      	mov	r0, r3
 800753c:	f000 fee2 	bl	8008304 <RCCEx_PLL3_Config>
 8007540:	4603      	mov	r3, r0
 8007542:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007546:	e00a      	b.n	800755e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007548:	2301      	movs	r3, #1
 800754a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800754e:	e006      	b.n	800755e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007550:	bf00      	nop
 8007552:	e004      	b.n	800755e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007554:	bf00      	nop
 8007556:	e002      	b.n	800755e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007558:	bf00      	nop
 800755a:	e000      	b.n	800755e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800755c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800755e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007562:	2b00      	cmp	r3, #0
 8007564:	d10e      	bne.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007566:	4b06      	ldr	r3, [pc, #24]	; (8007580 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800756a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800756e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007572:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007576:	4a02      	ldr	r2, [pc, #8]	; (8007580 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007578:	430b      	orrs	r3, r1
 800757a:	6593      	str	r3, [r2, #88]	; 0x58
 800757c:	e006      	b.n	800758c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800757e:	bf00      	nop
 8007580:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007584:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007588:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800758c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007594:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8007598:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800759c:	2300      	movs	r3, #0
 800759e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80075a2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80075a6:	460b      	mov	r3, r1
 80075a8:	4313      	orrs	r3, r2
 80075aa:	d055      	beq.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80075ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80075b4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80075b8:	d033      	beq.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80075ba:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80075be:	d82c      	bhi.n	800761a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80075c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075c4:	d02f      	beq.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80075c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075ca:	d826      	bhi.n	800761a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80075cc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80075d0:	d02b      	beq.n	800762a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80075d2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80075d6:	d820      	bhi.n	800761a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80075d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80075dc:	d012      	beq.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80075de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80075e2:	d81a      	bhi.n	800761a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d022      	beq.n	800762e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80075e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075ec:	d115      	bne.n	800761a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80075ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075f2:	3308      	adds	r3, #8
 80075f4:	2100      	movs	r1, #0
 80075f6:	4618      	mov	r0, r3
 80075f8:	f000 fdd2 	bl	80081a0 <RCCEx_PLL2_Config>
 80075fc:	4603      	mov	r3, r0
 80075fe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007602:	e015      	b.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007604:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007608:	3328      	adds	r3, #40	; 0x28
 800760a:	2102      	movs	r1, #2
 800760c:	4618      	mov	r0, r3
 800760e:	f000 fe79 	bl	8008304 <RCCEx_PLL3_Config>
 8007612:	4603      	mov	r3, r0
 8007614:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007618:	e00a      	b.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800761a:	2301      	movs	r3, #1
 800761c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007620:	e006      	b.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007622:	bf00      	nop
 8007624:	e004      	b.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007626:	bf00      	nop
 8007628:	e002      	b.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800762a:	bf00      	nop
 800762c:	e000      	b.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800762e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007630:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007634:	2b00      	cmp	r3, #0
 8007636:	d10b      	bne.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007638:	4ba0      	ldr	r3, [pc, #640]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800763a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800763c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8007640:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007644:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007648:	4a9c      	ldr	r2, [pc, #624]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800764a:	430b      	orrs	r3, r1
 800764c:	6593      	str	r3, [r2, #88]	; 0x58
 800764e:	e003      	b.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007650:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007654:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8007658:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800765c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007660:	f002 0308 	and.w	r3, r2, #8
 8007664:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007668:	2300      	movs	r3, #0
 800766a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800766e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8007672:	460b      	mov	r3, r1
 8007674:	4313      	orrs	r3, r2
 8007676:	d01e      	beq.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8007678:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800767c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007680:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007684:	d10c      	bne.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007686:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800768a:	3328      	adds	r3, #40	; 0x28
 800768c:	2102      	movs	r1, #2
 800768e:	4618      	mov	r0, r3
 8007690:	f000 fe38 	bl	8008304 <RCCEx_PLL3_Config>
 8007694:	4603      	mov	r3, r0
 8007696:	2b00      	cmp	r3, #0
 8007698:	d002      	beq.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800769a:	2301      	movs	r3, #1
 800769c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80076a0:	4b86      	ldr	r3, [pc, #536]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80076a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076a4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80076a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076b0:	4a82      	ldr	r2, [pc, #520]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80076b2:	430b      	orrs	r3, r1
 80076b4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80076b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076be:	f002 0310 	and.w	r3, r2, #16
 80076c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80076c6:	2300      	movs	r3, #0
 80076c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80076cc:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80076d0:	460b      	mov	r3, r1
 80076d2:	4313      	orrs	r3, r2
 80076d4:	d01e      	beq.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80076d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80076de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076e2:	d10c      	bne.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80076e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076e8:	3328      	adds	r3, #40	; 0x28
 80076ea:	2102      	movs	r1, #2
 80076ec:	4618      	mov	r0, r3
 80076ee:	f000 fe09 	bl	8008304 <RCCEx_PLL3_Config>
 80076f2:	4603      	mov	r3, r0
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d002      	beq.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80076f8:	2301      	movs	r3, #1
 80076fa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80076fe:	4b6f      	ldr	r3, [pc, #444]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007702:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007706:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800770a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800770e:	4a6b      	ldr	r2, [pc, #428]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007710:	430b      	orrs	r3, r1
 8007712:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007714:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800771c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8007720:	67bb      	str	r3, [r7, #120]	; 0x78
 8007722:	2300      	movs	r3, #0
 8007724:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007726:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800772a:	460b      	mov	r3, r1
 800772c:	4313      	orrs	r3, r2
 800772e:	d03e      	beq.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007730:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007734:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007738:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800773c:	d022      	beq.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800773e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007742:	d81b      	bhi.n	800777c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8007744:	2b00      	cmp	r3, #0
 8007746:	d003      	beq.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8007748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800774c:	d00b      	beq.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800774e:	e015      	b.n	800777c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007750:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007754:	3308      	adds	r3, #8
 8007756:	2100      	movs	r1, #0
 8007758:	4618      	mov	r0, r3
 800775a:	f000 fd21 	bl	80081a0 <RCCEx_PLL2_Config>
 800775e:	4603      	mov	r3, r0
 8007760:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007764:	e00f      	b.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007766:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800776a:	3328      	adds	r3, #40	; 0x28
 800776c:	2102      	movs	r1, #2
 800776e:	4618      	mov	r0, r3
 8007770:	f000 fdc8 	bl	8008304 <RCCEx_PLL3_Config>
 8007774:	4603      	mov	r3, r0
 8007776:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800777a:	e004      	b.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800777c:	2301      	movs	r3, #1
 800777e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007782:	e000      	b.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8007784:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007786:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800778a:	2b00      	cmp	r3, #0
 800778c:	d10b      	bne.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800778e:	4b4b      	ldr	r3, [pc, #300]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007792:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8007796:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800779a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800779e:	4a47      	ldr	r2, [pc, #284]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80077a0:	430b      	orrs	r3, r1
 80077a2:	6593      	str	r3, [r2, #88]	; 0x58
 80077a4:	e003      	b.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077a6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80077aa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80077ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80077ba:	673b      	str	r3, [r7, #112]	; 0x70
 80077bc:	2300      	movs	r3, #0
 80077be:	677b      	str	r3, [r7, #116]	; 0x74
 80077c0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80077c4:	460b      	mov	r3, r1
 80077c6:	4313      	orrs	r3, r2
 80077c8:	d03b      	beq.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80077ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077d2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80077d6:	d01f      	beq.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80077d8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80077dc:	d818      	bhi.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80077de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077e2:	d003      	beq.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80077e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80077e8:	d007      	beq.n	80077fa <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80077ea:	e011      	b.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077ec:	4b33      	ldr	r3, [pc, #204]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80077ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f0:	4a32      	ldr	r2, [pc, #200]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80077f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80077f8:	e00f      	b.n	800781a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80077fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077fe:	3328      	adds	r3, #40	; 0x28
 8007800:	2101      	movs	r1, #1
 8007802:	4618      	mov	r0, r3
 8007804:	f000 fd7e 	bl	8008304 <RCCEx_PLL3_Config>
 8007808:	4603      	mov	r3, r0
 800780a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800780e:	e004      	b.n	800781a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007810:	2301      	movs	r3, #1
 8007812:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007816:	e000      	b.n	800781a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8007818:	bf00      	nop
    }

    if (ret == HAL_OK)
 800781a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800781e:	2b00      	cmp	r3, #0
 8007820:	d10b      	bne.n	800783a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007822:	4b26      	ldr	r3, [pc, #152]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007826:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800782a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800782e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007832:	4a22      	ldr	r2, [pc, #136]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007834:	430b      	orrs	r3, r1
 8007836:	6553      	str	r3, [r2, #84]	; 0x54
 8007838:	e003      	b.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800783a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800783e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007842:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800784a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800784e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007850:	2300      	movs	r3, #0
 8007852:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007854:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8007858:	460b      	mov	r3, r1
 800785a:	4313      	orrs	r3, r2
 800785c:	d034      	beq.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800785e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007862:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007864:	2b00      	cmp	r3, #0
 8007866:	d003      	beq.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8007868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800786c:	d007      	beq.n	800787e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800786e:	e011      	b.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007870:	4b12      	ldr	r3, [pc, #72]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007874:	4a11      	ldr	r2, [pc, #68]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007876:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800787a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800787c:	e00e      	b.n	800789c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800787e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007882:	3308      	adds	r3, #8
 8007884:	2102      	movs	r1, #2
 8007886:	4618      	mov	r0, r3
 8007888:	f000 fc8a 	bl	80081a0 <RCCEx_PLL2_Config>
 800788c:	4603      	mov	r3, r0
 800788e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007892:	e003      	b.n	800789c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8007894:	2301      	movs	r3, #1
 8007896:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800789a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800789c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d10d      	bne.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80078a4:	4b05      	ldr	r3, [pc, #20]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80078a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80078ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078b2:	4a02      	ldr	r2, [pc, #8]	; (80078bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80078b4:	430b      	orrs	r3, r1
 80078b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80078b8:	e006      	b.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80078ba:	bf00      	nop
 80078bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078c0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80078c4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80078c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80078d4:	663b      	str	r3, [r7, #96]	; 0x60
 80078d6:	2300      	movs	r3, #0
 80078d8:	667b      	str	r3, [r7, #100]	; 0x64
 80078da:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80078de:	460b      	mov	r3, r1
 80078e0:	4313      	orrs	r3, r2
 80078e2:	d00c      	beq.n	80078fe <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80078e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078e8:	3328      	adds	r3, #40	; 0x28
 80078ea:	2102      	movs	r1, #2
 80078ec:	4618      	mov	r0, r3
 80078ee:	f000 fd09 	bl	8008304 <RCCEx_PLL3_Config>
 80078f2:	4603      	mov	r3, r0
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d002      	beq.n	80078fe <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80078f8:	2301      	movs	r3, #1
 80078fa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80078fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007906:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800790a:	65bb      	str	r3, [r7, #88]	; 0x58
 800790c:	2300      	movs	r3, #0
 800790e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007910:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8007914:	460b      	mov	r3, r1
 8007916:	4313      	orrs	r3, r2
 8007918:	d036      	beq.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800791a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800791e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007920:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007924:	d018      	beq.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8007926:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800792a:	d811      	bhi.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800792c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007930:	d014      	beq.n	800795c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8007932:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007936:	d80b      	bhi.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007938:	2b00      	cmp	r3, #0
 800793a:	d011      	beq.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800793c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007940:	d106      	bne.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007942:	4bb7      	ldr	r3, [pc, #732]	; (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007946:	4ab6      	ldr	r2, [pc, #728]	; (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007948:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800794c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800794e:	e008      	b.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007950:	2301      	movs	r3, #1
 8007952:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007956:	e004      	b.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007958:	bf00      	nop
 800795a:	e002      	b.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800795c:	bf00      	nop
 800795e:	e000      	b.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007960:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007962:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007966:	2b00      	cmp	r3, #0
 8007968:	d10a      	bne.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800796a:	4bad      	ldr	r3, [pc, #692]	; (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800796c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800796e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007972:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007976:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007978:	4aa9      	ldr	r2, [pc, #676]	; (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800797a:	430b      	orrs	r3, r1
 800797c:	6553      	str	r3, [r2, #84]	; 0x54
 800797e:	e003      	b.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007980:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007984:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007988:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800798c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007990:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8007994:	653b      	str	r3, [r7, #80]	; 0x50
 8007996:	2300      	movs	r3, #0
 8007998:	657b      	str	r3, [r7, #84]	; 0x54
 800799a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800799e:	460b      	mov	r3, r1
 80079a0:	4313      	orrs	r3, r2
 80079a2:	d009      	beq.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80079a4:	4b9e      	ldr	r3, [pc, #632]	; (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80079a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079a8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80079ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079b2:	4a9b      	ldr	r2, [pc, #620]	; (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80079b4:	430b      	orrs	r3, r1
 80079b6:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80079b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c0:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80079c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80079c6:	2300      	movs	r3, #0
 80079c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079ca:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80079ce:	460b      	mov	r3, r1
 80079d0:	4313      	orrs	r3, r2
 80079d2:	d009      	beq.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80079d4:	4b92      	ldr	r3, [pc, #584]	; (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80079d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079d8:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80079dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80079e2:	4a8f      	ldr	r2, [pc, #572]	; (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80079e4:	430b      	orrs	r3, r1
 80079e6:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80079e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f0:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80079f4:	643b      	str	r3, [r7, #64]	; 0x40
 80079f6:	2300      	movs	r3, #0
 80079f8:	647b      	str	r3, [r7, #68]	; 0x44
 80079fa:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80079fe:	460b      	mov	r3, r1
 8007a00:	4313      	orrs	r3, r2
 8007a02:	d00e      	beq.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007a04:	4b86      	ldr	r3, [pc, #536]	; (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007a06:	691b      	ldr	r3, [r3, #16]
 8007a08:	4a85      	ldr	r2, [pc, #532]	; (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007a0a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007a0e:	6113      	str	r3, [r2, #16]
 8007a10:	4b83      	ldr	r3, [pc, #524]	; (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007a12:	6919      	ldr	r1, [r3, #16]
 8007a14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a18:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007a1c:	4a80      	ldr	r2, [pc, #512]	; (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007a1e:	430b      	orrs	r3, r1
 8007a20:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007a22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a2a:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8007a2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007a30:	2300      	movs	r3, #0
 8007a32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a34:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8007a38:	460b      	mov	r3, r1
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	d009      	beq.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007a3e:	4b78      	ldr	r3, [pc, #480]	; (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a42:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007a46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a4c:	4a74      	ldr	r2, [pc, #464]	; (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007a4e:	430b      	orrs	r3, r1
 8007a50:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007a52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a5a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8007a5e:	633b      	str	r3, [r7, #48]	; 0x30
 8007a60:	2300      	movs	r3, #0
 8007a62:	637b      	str	r3, [r7, #52]	; 0x34
 8007a64:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8007a68:	460b      	mov	r3, r1
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	d00a      	beq.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007a6e:	4b6c      	ldr	r3, [pc, #432]	; (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a72:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8007a76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a7e:	4a68      	ldr	r2, [pc, #416]	; (8007c20 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007a80:	430b      	orrs	r3, r1
 8007a82:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007a84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a8c:	2100      	movs	r1, #0
 8007a8e:	62b9      	str	r1, [r7, #40]	; 0x28
 8007a90:	f003 0301 	and.w	r3, r3, #1
 8007a94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a96:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007a9a:	460b      	mov	r3, r1
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	d011      	beq.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007aa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007aa4:	3308      	adds	r3, #8
 8007aa6:	2100      	movs	r1, #0
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f000 fb79 	bl	80081a0 <RCCEx_PLL2_Config>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8007ab4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d003      	beq.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007abc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007ac0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007ac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007acc:	2100      	movs	r1, #0
 8007ace:	6239      	str	r1, [r7, #32]
 8007ad0:	f003 0302 	and.w	r3, r3, #2
 8007ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8007ad6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007ada:	460b      	mov	r3, r1
 8007adc:	4313      	orrs	r3, r2
 8007ade:	d011      	beq.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007ae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ae4:	3308      	adds	r3, #8
 8007ae6:	2101      	movs	r1, #1
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f000 fb59 	bl	80081a0 <RCCEx_PLL2_Config>
 8007aee:	4603      	mov	r3, r0
 8007af0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8007af4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d003      	beq.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007afc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007b00:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b0c:	2100      	movs	r1, #0
 8007b0e:	61b9      	str	r1, [r7, #24]
 8007b10:	f003 0304 	and.w	r3, r3, #4
 8007b14:	61fb      	str	r3, [r7, #28]
 8007b16:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007b1a:	460b      	mov	r3, r1
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	d011      	beq.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007b20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b24:	3308      	adds	r3, #8
 8007b26:	2102      	movs	r1, #2
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f000 fb39 	bl	80081a0 <RCCEx_PLL2_Config>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8007b34:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d003      	beq.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b3c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007b40:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007b44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b4c:	2100      	movs	r1, #0
 8007b4e:	6139      	str	r1, [r7, #16]
 8007b50:	f003 0308 	and.w	r3, r3, #8
 8007b54:	617b      	str	r3, [r7, #20]
 8007b56:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007b5a:	460b      	mov	r3, r1
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	d011      	beq.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007b60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b64:	3328      	adds	r3, #40	; 0x28
 8007b66:	2100      	movs	r1, #0
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f000 fbcb 	bl	8008304 <RCCEx_PLL3_Config>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8007b74:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d003      	beq.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b7c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007b80:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007b84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b8c:	2100      	movs	r1, #0
 8007b8e:	60b9      	str	r1, [r7, #8]
 8007b90:	f003 0310 	and.w	r3, r3, #16
 8007b94:	60fb      	str	r3, [r7, #12]
 8007b96:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007b9a:	460b      	mov	r3, r1
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	d011      	beq.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007ba0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ba4:	3328      	adds	r3, #40	; 0x28
 8007ba6:	2101      	movs	r1, #1
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f000 fbab 	bl	8008304 <RCCEx_PLL3_Config>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8007bb4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d003      	beq.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bbc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007bc0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007bc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bcc:	2100      	movs	r1, #0
 8007bce:	6039      	str	r1, [r7, #0]
 8007bd0:	f003 0320 	and.w	r3, r3, #32
 8007bd4:	607b      	str	r3, [r7, #4]
 8007bd6:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007bda:	460b      	mov	r3, r1
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	d011      	beq.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007be0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007be4:	3328      	adds	r3, #40	; 0x28
 8007be6:	2102      	movs	r1, #2
 8007be8:	4618      	mov	r0, r3
 8007bea:	f000 fb8b 	bl	8008304 <RCCEx_PLL3_Config>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8007bf4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d003      	beq.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bfc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007c00:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8007c04:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d101      	bne.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	e000      	b.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8007c10:	2301      	movs	r3, #1
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c1e:	bf00      	nop
 8007c20:	58024400 	.word	0x58024400

08007c24 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007c28:	f7fe fdbe 	bl	80067a8 <HAL_RCC_GetHCLKFreq>
 8007c2c:	4602      	mov	r2, r0
 8007c2e:	4b06      	ldr	r3, [pc, #24]	; (8007c48 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007c30:	6a1b      	ldr	r3, [r3, #32]
 8007c32:	091b      	lsrs	r3, r3, #4
 8007c34:	f003 0307 	and.w	r3, r3, #7
 8007c38:	4904      	ldr	r1, [pc, #16]	; (8007c4c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007c3a:	5ccb      	ldrb	r3, [r1, r3]
 8007c3c:	f003 031f 	and.w	r3, r3, #31
 8007c40:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	bd80      	pop	{r7, pc}
 8007c48:	58024400 	.word	0x58024400
 8007c4c:	08010fe4 	.word	0x08010fe4

08007c50 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b089      	sub	sp, #36	; 0x24
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007c58:	4ba1      	ldr	r3, [pc, #644]	; (8007ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c5c:	f003 0303 	and.w	r3, r3, #3
 8007c60:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007c62:	4b9f      	ldr	r3, [pc, #636]	; (8007ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c66:	0b1b      	lsrs	r3, r3, #12
 8007c68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c6c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007c6e:	4b9c      	ldr	r3, [pc, #624]	; (8007ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c72:	091b      	lsrs	r3, r3, #4
 8007c74:	f003 0301 	and.w	r3, r3, #1
 8007c78:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007c7a:	4b99      	ldr	r3, [pc, #612]	; (8007ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c7e:	08db      	lsrs	r3, r3, #3
 8007c80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007c84:	693a      	ldr	r2, [r7, #16]
 8007c86:	fb02 f303 	mul.w	r3, r2, r3
 8007c8a:	ee07 3a90 	vmov	s15, r3
 8007c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c92:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	f000 8111 	beq.w	8007ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007c9e:	69bb      	ldr	r3, [r7, #24]
 8007ca0:	2b02      	cmp	r3, #2
 8007ca2:	f000 8083 	beq.w	8007dac <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007ca6:	69bb      	ldr	r3, [r7, #24]
 8007ca8:	2b02      	cmp	r3, #2
 8007caa:	f200 80a1 	bhi.w	8007df0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007cae:	69bb      	ldr	r3, [r7, #24]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d003      	beq.n	8007cbc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007cb4:	69bb      	ldr	r3, [r7, #24]
 8007cb6:	2b01      	cmp	r3, #1
 8007cb8:	d056      	beq.n	8007d68 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007cba:	e099      	b.n	8007df0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007cbc:	4b88      	ldr	r3, [pc, #544]	; (8007ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f003 0320 	and.w	r3, r3, #32
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d02d      	beq.n	8007d24 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007cc8:	4b85      	ldr	r3, [pc, #532]	; (8007ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	08db      	lsrs	r3, r3, #3
 8007cce:	f003 0303 	and.w	r3, r3, #3
 8007cd2:	4a84      	ldr	r2, [pc, #528]	; (8007ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007cd4:	fa22 f303 	lsr.w	r3, r2, r3
 8007cd8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	ee07 3a90 	vmov	s15, r3
 8007ce0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	ee07 3a90 	vmov	s15, r3
 8007cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cf2:	4b7b      	ldr	r3, [pc, #492]	; (8007ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cfa:	ee07 3a90 	vmov	s15, r3
 8007cfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d02:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d06:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007d0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d1e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007d22:	e087      	b.n	8007e34 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	ee07 3a90 	vmov	s15, r3
 8007d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d2e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007eec <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007d32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d36:	4b6a      	ldr	r3, [pc, #424]	; (8007ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d3e:	ee07 3a90 	vmov	s15, r3
 8007d42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d46:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d4a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007d4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d66:	e065      	b.n	8007e34 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	ee07 3a90 	vmov	s15, r3
 8007d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d72:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007d76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d7a:	4b59      	ldr	r3, [pc, #356]	; (8007ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d82:	ee07 3a90 	vmov	s15, r3
 8007d86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d8e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007d92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007da2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007da6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007daa:	e043      	b.n	8007e34 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	ee07 3a90 	vmov	s15, r3
 8007db2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007db6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007dba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dbe:	4b48      	ldr	r3, [pc, #288]	; (8007ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dc6:	ee07 3a90 	vmov	s15, r3
 8007dca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dce:	ed97 6a03 	vldr	s12, [r7, #12]
 8007dd2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007dd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007de2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007de6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007dee:	e021      	b.n	8007e34 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	ee07 3a90 	vmov	s15, r3
 8007df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dfa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007dfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e02:	4b37      	ldr	r3, [pc, #220]	; (8007ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e0a:	ee07 3a90 	vmov	s15, r3
 8007e0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e12:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e16:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007e1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007e32:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007e34:	4b2a      	ldr	r3, [pc, #168]	; (8007ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e38:	0a5b      	lsrs	r3, r3, #9
 8007e3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e3e:	ee07 3a90 	vmov	s15, r3
 8007e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007e4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e5a:	ee17 2a90 	vmov	r2, s15
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007e62:	4b1f      	ldr	r3, [pc, #124]	; (8007ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e66:	0c1b      	lsrs	r3, r3, #16
 8007e68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e6c:	ee07 3a90 	vmov	s15, r3
 8007e70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007e78:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e7c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e88:	ee17 2a90 	vmov	r2, s15
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007e90:	4b13      	ldr	r3, [pc, #76]	; (8007ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e94:	0e1b      	lsrs	r3, r3, #24
 8007e96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e9a:	ee07 3a90 	vmov	s15, r3
 8007e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ea2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ea6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007eaa:	edd7 6a07 	vldr	s13, [r7, #28]
 8007eae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007eb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007eb6:	ee17 2a90 	vmov	r2, s15
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007ebe:	e008      	b.n	8007ed2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	609a      	str	r2, [r3, #8]
}
 8007ed2:	bf00      	nop
 8007ed4:	3724      	adds	r7, #36	; 0x24
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007edc:	4770      	bx	lr
 8007ede:	bf00      	nop
 8007ee0:	58024400 	.word	0x58024400
 8007ee4:	03d09000 	.word	0x03d09000
 8007ee8:	46000000 	.word	0x46000000
 8007eec:	4c742400 	.word	0x4c742400
 8007ef0:	4a742400 	.word	0x4a742400
 8007ef4:	4af42400 	.word	0x4af42400

08007ef8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b089      	sub	sp, #36	; 0x24
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007f00:	4ba1      	ldr	r3, [pc, #644]	; (8008188 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f04:	f003 0303 	and.w	r3, r3, #3
 8007f08:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007f0a:	4b9f      	ldr	r3, [pc, #636]	; (8008188 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f0e:	0d1b      	lsrs	r3, r3, #20
 8007f10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f14:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007f16:	4b9c      	ldr	r3, [pc, #624]	; (8008188 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f1a:	0a1b      	lsrs	r3, r3, #8
 8007f1c:	f003 0301 	and.w	r3, r3, #1
 8007f20:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007f22:	4b99      	ldr	r3, [pc, #612]	; (8008188 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f26:	08db      	lsrs	r3, r3, #3
 8007f28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007f2c:	693a      	ldr	r2, [r7, #16]
 8007f2e:	fb02 f303 	mul.w	r3, r2, r3
 8007f32:	ee07 3a90 	vmov	s15, r3
 8007f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f3a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	f000 8111 	beq.w	8008168 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007f46:	69bb      	ldr	r3, [r7, #24]
 8007f48:	2b02      	cmp	r3, #2
 8007f4a:	f000 8083 	beq.w	8008054 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007f4e:	69bb      	ldr	r3, [r7, #24]
 8007f50:	2b02      	cmp	r3, #2
 8007f52:	f200 80a1 	bhi.w	8008098 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007f56:	69bb      	ldr	r3, [r7, #24]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d003      	beq.n	8007f64 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007f5c:	69bb      	ldr	r3, [r7, #24]
 8007f5e:	2b01      	cmp	r3, #1
 8007f60:	d056      	beq.n	8008010 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007f62:	e099      	b.n	8008098 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f64:	4b88      	ldr	r3, [pc, #544]	; (8008188 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f003 0320 	and.w	r3, r3, #32
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d02d      	beq.n	8007fcc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007f70:	4b85      	ldr	r3, [pc, #532]	; (8008188 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	08db      	lsrs	r3, r3, #3
 8007f76:	f003 0303 	and.w	r3, r3, #3
 8007f7a:	4a84      	ldr	r2, [pc, #528]	; (800818c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8007f80:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	ee07 3a90 	vmov	s15, r3
 8007f88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	ee07 3a90 	vmov	s15, r3
 8007f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f9a:	4b7b      	ldr	r3, [pc, #492]	; (8008188 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fa2:	ee07 3a90 	vmov	s15, r3
 8007fa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007faa:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fae:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008190 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007fb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007fbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fc6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007fca:	e087      	b.n	80080dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	ee07 3a90 	vmov	s15, r3
 8007fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fd6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008194 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007fda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fde:	4b6a      	ldr	r3, [pc, #424]	; (8008188 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fe6:	ee07 3a90 	vmov	s15, r3
 8007fea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fee:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ff2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008190 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007ff6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ffa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ffe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008002:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008006:	ee67 7a27 	vmul.f32	s15, s14, s15
 800800a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800800e:	e065      	b.n	80080dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	ee07 3a90 	vmov	s15, r3
 8008016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800801a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008198 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800801e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008022:	4b59      	ldr	r3, [pc, #356]	; (8008188 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008026:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800802a:	ee07 3a90 	vmov	s15, r3
 800802e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008032:	ed97 6a03 	vldr	s12, [r7, #12]
 8008036:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008190 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800803a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800803e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008042:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008046:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800804a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800804e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008052:	e043      	b.n	80080dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	ee07 3a90 	vmov	s15, r3
 800805a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800805e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800819c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008062:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008066:	4b48      	ldr	r3, [pc, #288]	; (8008188 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800806a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800806e:	ee07 3a90 	vmov	s15, r3
 8008072:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008076:	ed97 6a03 	vldr	s12, [r7, #12]
 800807a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008190 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800807e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008082:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008086:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800808a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800808e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008092:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008096:	e021      	b.n	80080dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	ee07 3a90 	vmov	s15, r3
 800809e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080a2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008198 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80080a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080aa:	4b37      	ldr	r3, [pc, #220]	; (8008188 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080b2:	ee07 3a90 	vmov	s15, r3
 80080b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80080be:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008190 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80080c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80080da:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80080dc:	4b2a      	ldr	r3, [pc, #168]	; (8008188 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080e0:	0a5b      	lsrs	r3, r3, #9
 80080e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080e6:	ee07 3a90 	vmov	s15, r3
 80080ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80080f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80080fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008102:	ee17 2a90 	vmov	r2, s15
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800810a:	4b1f      	ldr	r3, [pc, #124]	; (8008188 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800810c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800810e:	0c1b      	lsrs	r3, r3, #16
 8008110:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008114:	ee07 3a90 	vmov	s15, r3
 8008118:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800811c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008120:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008124:	edd7 6a07 	vldr	s13, [r7, #28]
 8008128:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800812c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008130:	ee17 2a90 	vmov	r2, s15
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008138:	4b13      	ldr	r3, [pc, #76]	; (8008188 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800813a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800813c:	0e1b      	lsrs	r3, r3, #24
 800813e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008142:	ee07 3a90 	vmov	s15, r3
 8008146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800814a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800814e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008152:	edd7 6a07 	vldr	s13, [r7, #28]
 8008156:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800815a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800815e:	ee17 2a90 	vmov	r2, s15
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008166:	e008      	b.n	800817a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2200      	movs	r2, #0
 800816c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2200      	movs	r2, #0
 8008172:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2200      	movs	r2, #0
 8008178:	609a      	str	r2, [r3, #8]
}
 800817a:	bf00      	nop
 800817c:	3724      	adds	r7, #36	; 0x24
 800817e:	46bd      	mov	sp, r7
 8008180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008184:	4770      	bx	lr
 8008186:	bf00      	nop
 8008188:	58024400 	.word	0x58024400
 800818c:	03d09000 	.word	0x03d09000
 8008190:	46000000 	.word	0x46000000
 8008194:	4c742400 	.word	0x4c742400
 8008198:	4a742400 	.word	0x4a742400
 800819c:	4af42400 	.word	0x4af42400

080081a0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b084      	sub	sp, #16
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
 80081a8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80081aa:	2300      	movs	r3, #0
 80081ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80081ae:	4b53      	ldr	r3, [pc, #332]	; (80082fc <RCCEx_PLL2_Config+0x15c>)
 80081b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081b2:	f003 0303 	and.w	r3, r3, #3
 80081b6:	2b03      	cmp	r3, #3
 80081b8:	d101      	bne.n	80081be <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80081ba:	2301      	movs	r3, #1
 80081bc:	e099      	b.n	80082f2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80081be:	4b4f      	ldr	r3, [pc, #316]	; (80082fc <RCCEx_PLL2_Config+0x15c>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4a4e      	ldr	r2, [pc, #312]	; (80082fc <RCCEx_PLL2_Config+0x15c>)
 80081c4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80081c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80081ca:	f7f9 fde3 	bl	8001d94 <HAL_GetTick>
 80081ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80081d0:	e008      	b.n	80081e4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80081d2:	f7f9 fddf 	bl	8001d94 <HAL_GetTick>
 80081d6:	4602      	mov	r2, r0
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	1ad3      	subs	r3, r2, r3
 80081dc:	2b02      	cmp	r3, #2
 80081de:	d901      	bls.n	80081e4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80081e0:	2303      	movs	r3, #3
 80081e2:	e086      	b.n	80082f2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80081e4:	4b45      	ldr	r3, [pc, #276]	; (80082fc <RCCEx_PLL2_Config+0x15c>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d1f0      	bne.n	80081d2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80081f0:	4b42      	ldr	r3, [pc, #264]	; (80082fc <RCCEx_PLL2_Config+0x15c>)
 80081f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081f4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	031b      	lsls	r3, r3, #12
 80081fe:	493f      	ldr	r1, [pc, #252]	; (80082fc <RCCEx_PLL2_Config+0x15c>)
 8008200:	4313      	orrs	r3, r2
 8008202:	628b      	str	r3, [r1, #40]	; 0x28
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	3b01      	subs	r3, #1
 800820a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	689b      	ldr	r3, [r3, #8]
 8008212:	3b01      	subs	r3, #1
 8008214:	025b      	lsls	r3, r3, #9
 8008216:	b29b      	uxth	r3, r3
 8008218:	431a      	orrs	r2, r3
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	68db      	ldr	r3, [r3, #12]
 800821e:	3b01      	subs	r3, #1
 8008220:	041b      	lsls	r3, r3, #16
 8008222:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008226:	431a      	orrs	r2, r3
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	691b      	ldr	r3, [r3, #16]
 800822c:	3b01      	subs	r3, #1
 800822e:	061b      	lsls	r3, r3, #24
 8008230:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008234:	4931      	ldr	r1, [pc, #196]	; (80082fc <RCCEx_PLL2_Config+0x15c>)
 8008236:	4313      	orrs	r3, r2
 8008238:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800823a:	4b30      	ldr	r3, [pc, #192]	; (80082fc <RCCEx_PLL2_Config+0x15c>)
 800823c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800823e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	695b      	ldr	r3, [r3, #20]
 8008246:	492d      	ldr	r1, [pc, #180]	; (80082fc <RCCEx_PLL2_Config+0x15c>)
 8008248:	4313      	orrs	r3, r2
 800824a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800824c:	4b2b      	ldr	r3, [pc, #172]	; (80082fc <RCCEx_PLL2_Config+0x15c>)
 800824e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008250:	f023 0220 	bic.w	r2, r3, #32
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	699b      	ldr	r3, [r3, #24]
 8008258:	4928      	ldr	r1, [pc, #160]	; (80082fc <RCCEx_PLL2_Config+0x15c>)
 800825a:	4313      	orrs	r3, r2
 800825c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800825e:	4b27      	ldr	r3, [pc, #156]	; (80082fc <RCCEx_PLL2_Config+0x15c>)
 8008260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008262:	4a26      	ldr	r2, [pc, #152]	; (80082fc <RCCEx_PLL2_Config+0x15c>)
 8008264:	f023 0310 	bic.w	r3, r3, #16
 8008268:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800826a:	4b24      	ldr	r3, [pc, #144]	; (80082fc <RCCEx_PLL2_Config+0x15c>)
 800826c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800826e:	4b24      	ldr	r3, [pc, #144]	; (8008300 <RCCEx_PLL2_Config+0x160>)
 8008270:	4013      	ands	r3, r2
 8008272:	687a      	ldr	r2, [r7, #4]
 8008274:	69d2      	ldr	r2, [r2, #28]
 8008276:	00d2      	lsls	r2, r2, #3
 8008278:	4920      	ldr	r1, [pc, #128]	; (80082fc <RCCEx_PLL2_Config+0x15c>)
 800827a:	4313      	orrs	r3, r2
 800827c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800827e:	4b1f      	ldr	r3, [pc, #124]	; (80082fc <RCCEx_PLL2_Config+0x15c>)
 8008280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008282:	4a1e      	ldr	r2, [pc, #120]	; (80082fc <RCCEx_PLL2_Config+0x15c>)
 8008284:	f043 0310 	orr.w	r3, r3, #16
 8008288:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d106      	bne.n	800829e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008290:	4b1a      	ldr	r3, [pc, #104]	; (80082fc <RCCEx_PLL2_Config+0x15c>)
 8008292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008294:	4a19      	ldr	r2, [pc, #100]	; (80082fc <RCCEx_PLL2_Config+0x15c>)
 8008296:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800829a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800829c:	e00f      	b.n	80082be <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	d106      	bne.n	80082b2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80082a4:	4b15      	ldr	r3, [pc, #84]	; (80082fc <RCCEx_PLL2_Config+0x15c>)
 80082a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082a8:	4a14      	ldr	r2, [pc, #80]	; (80082fc <RCCEx_PLL2_Config+0x15c>)
 80082aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80082ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80082b0:	e005      	b.n	80082be <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80082b2:	4b12      	ldr	r3, [pc, #72]	; (80082fc <RCCEx_PLL2_Config+0x15c>)
 80082b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082b6:	4a11      	ldr	r2, [pc, #68]	; (80082fc <RCCEx_PLL2_Config+0x15c>)
 80082b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80082bc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80082be:	4b0f      	ldr	r3, [pc, #60]	; (80082fc <RCCEx_PLL2_Config+0x15c>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4a0e      	ldr	r2, [pc, #56]	; (80082fc <RCCEx_PLL2_Config+0x15c>)
 80082c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80082c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082ca:	f7f9 fd63 	bl	8001d94 <HAL_GetTick>
 80082ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80082d0:	e008      	b.n	80082e4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80082d2:	f7f9 fd5f 	bl	8001d94 <HAL_GetTick>
 80082d6:	4602      	mov	r2, r0
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	1ad3      	subs	r3, r2, r3
 80082dc:	2b02      	cmp	r3, #2
 80082de:	d901      	bls.n	80082e4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80082e0:	2303      	movs	r3, #3
 80082e2:	e006      	b.n	80082f2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80082e4:	4b05      	ldr	r3, [pc, #20]	; (80082fc <RCCEx_PLL2_Config+0x15c>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d0f0      	beq.n	80082d2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80082f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3710      	adds	r7, #16
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}
 80082fa:	bf00      	nop
 80082fc:	58024400 	.word	0x58024400
 8008300:	ffff0007 	.word	0xffff0007

08008304 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b084      	sub	sp, #16
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800830e:	2300      	movs	r3, #0
 8008310:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008312:	4b53      	ldr	r3, [pc, #332]	; (8008460 <RCCEx_PLL3_Config+0x15c>)
 8008314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008316:	f003 0303 	and.w	r3, r3, #3
 800831a:	2b03      	cmp	r3, #3
 800831c:	d101      	bne.n	8008322 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800831e:	2301      	movs	r3, #1
 8008320:	e099      	b.n	8008456 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008322:	4b4f      	ldr	r3, [pc, #316]	; (8008460 <RCCEx_PLL3_Config+0x15c>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4a4e      	ldr	r2, [pc, #312]	; (8008460 <RCCEx_PLL3_Config+0x15c>)
 8008328:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800832c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800832e:	f7f9 fd31 	bl	8001d94 <HAL_GetTick>
 8008332:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008334:	e008      	b.n	8008348 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008336:	f7f9 fd2d 	bl	8001d94 <HAL_GetTick>
 800833a:	4602      	mov	r2, r0
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	1ad3      	subs	r3, r2, r3
 8008340:	2b02      	cmp	r3, #2
 8008342:	d901      	bls.n	8008348 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008344:	2303      	movs	r3, #3
 8008346:	e086      	b.n	8008456 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008348:	4b45      	ldr	r3, [pc, #276]	; (8008460 <RCCEx_PLL3_Config+0x15c>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008350:	2b00      	cmp	r3, #0
 8008352:	d1f0      	bne.n	8008336 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008354:	4b42      	ldr	r3, [pc, #264]	; (8008460 <RCCEx_PLL3_Config+0x15c>)
 8008356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008358:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	051b      	lsls	r3, r3, #20
 8008362:	493f      	ldr	r1, [pc, #252]	; (8008460 <RCCEx_PLL3_Config+0x15c>)
 8008364:	4313      	orrs	r3, r2
 8008366:	628b      	str	r3, [r1, #40]	; 0x28
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	685b      	ldr	r3, [r3, #4]
 800836c:	3b01      	subs	r3, #1
 800836e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	689b      	ldr	r3, [r3, #8]
 8008376:	3b01      	subs	r3, #1
 8008378:	025b      	lsls	r3, r3, #9
 800837a:	b29b      	uxth	r3, r3
 800837c:	431a      	orrs	r2, r3
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	68db      	ldr	r3, [r3, #12]
 8008382:	3b01      	subs	r3, #1
 8008384:	041b      	lsls	r3, r3, #16
 8008386:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800838a:	431a      	orrs	r2, r3
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	691b      	ldr	r3, [r3, #16]
 8008390:	3b01      	subs	r3, #1
 8008392:	061b      	lsls	r3, r3, #24
 8008394:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008398:	4931      	ldr	r1, [pc, #196]	; (8008460 <RCCEx_PLL3_Config+0x15c>)
 800839a:	4313      	orrs	r3, r2
 800839c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800839e:	4b30      	ldr	r3, [pc, #192]	; (8008460 <RCCEx_PLL3_Config+0x15c>)
 80083a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083a2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	695b      	ldr	r3, [r3, #20]
 80083aa:	492d      	ldr	r1, [pc, #180]	; (8008460 <RCCEx_PLL3_Config+0x15c>)
 80083ac:	4313      	orrs	r3, r2
 80083ae:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80083b0:	4b2b      	ldr	r3, [pc, #172]	; (8008460 <RCCEx_PLL3_Config+0x15c>)
 80083b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083b4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	699b      	ldr	r3, [r3, #24]
 80083bc:	4928      	ldr	r1, [pc, #160]	; (8008460 <RCCEx_PLL3_Config+0x15c>)
 80083be:	4313      	orrs	r3, r2
 80083c0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80083c2:	4b27      	ldr	r3, [pc, #156]	; (8008460 <RCCEx_PLL3_Config+0x15c>)
 80083c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c6:	4a26      	ldr	r2, [pc, #152]	; (8008460 <RCCEx_PLL3_Config+0x15c>)
 80083c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80083cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80083ce:	4b24      	ldr	r3, [pc, #144]	; (8008460 <RCCEx_PLL3_Config+0x15c>)
 80083d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80083d2:	4b24      	ldr	r3, [pc, #144]	; (8008464 <RCCEx_PLL3_Config+0x160>)
 80083d4:	4013      	ands	r3, r2
 80083d6:	687a      	ldr	r2, [r7, #4]
 80083d8:	69d2      	ldr	r2, [r2, #28]
 80083da:	00d2      	lsls	r2, r2, #3
 80083dc:	4920      	ldr	r1, [pc, #128]	; (8008460 <RCCEx_PLL3_Config+0x15c>)
 80083de:	4313      	orrs	r3, r2
 80083e0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80083e2:	4b1f      	ldr	r3, [pc, #124]	; (8008460 <RCCEx_PLL3_Config+0x15c>)
 80083e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083e6:	4a1e      	ldr	r2, [pc, #120]	; (8008460 <RCCEx_PLL3_Config+0x15c>)
 80083e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d106      	bne.n	8008402 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80083f4:	4b1a      	ldr	r3, [pc, #104]	; (8008460 <RCCEx_PLL3_Config+0x15c>)
 80083f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083f8:	4a19      	ldr	r2, [pc, #100]	; (8008460 <RCCEx_PLL3_Config+0x15c>)
 80083fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80083fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008400:	e00f      	b.n	8008422 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	2b01      	cmp	r3, #1
 8008406:	d106      	bne.n	8008416 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008408:	4b15      	ldr	r3, [pc, #84]	; (8008460 <RCCEx_PLL3_Config+0x15c>)
 800840a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800840c:	4a14      	ldr	r2, [pc, #80]	; (8008460 <RCCEx_PLL3_Config+0x15c>)
 800840e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008412:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008414:	e005      	b.n	8008422 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008416:	4b12      	ldr	r3, [pc, #72]	; (8008460 <RCCEx_PLL3_Config+0x15c>)
 8008418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800841a:	4a11      	ldr	r2, [pc, #68]	; (8008460 <RCCEx_PLL3_Config+0x15c>)
 800841c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008420:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008422:	4b0f      	ldr	r3, [pc, #60]	; (8008460 <RCCEx_PLL3_Config+0x15c>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a0e      	ldr	r2, [pc, #56]	; (8008460 <RCCEx_PLL3_Config+0x15c>)
 8008428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800842c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800842e:	f7f9 fcb1 	bl	8001d94 <HAL_GetTick>
 8008432:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008434:	e008      	b.n	8008448 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008436:	f7f9 fcad 	bl	8001d94 <HAL_GetTick>
 800843a:	4602      	mov	r2, r0
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	1ad3      	subs	r3, r2, r3
 8008440:	2b02      	cmp	r3, #2
 8008442:	d901      	bls.n	8008448 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008444:	2303      	movs	r3, #3
 8008446:	e006      	b.n	8008456 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008448:	4b05      	ldr	r3, [pc, #20]	; (8008460 <RCCEx_PLL3_Config+0x15c>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008450:	2b00      	cmp	r3, #0
 8008452:	d0f0      	beq.n	8008436 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008454:	7bfb      	ldrb	r3, [r7, #15]
}
 8008456:	4618      	mov	r0, r3
 8008458:	3710      	adds	r7, #16
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}
 800845e:	bf00      	nop
 8008460:	58024400 	.word	0x58024400
 8008464:	ffff0007 	.word	0xffff0007

08008468 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d101      	bne.n	800847a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008476:	2301      	movs	r3, #1
 8008478:	e049      	b.n	800850e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008480:	b2db      	uxtb	r3, r3
 8008482:	2b00      	cmp	r3, #0
 8008484:	d106      	bne.n	8008494 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2200      	movs	r2, #0
 800848a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 f841 	bl	8008516 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2202      	movs	r2, #2
 8008498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681a      	ldr	r2, [r3, #0]
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	3304      	adds	r3, #4
 80084a4:	4619      	mov	r1, r3
 80084a6:	4610      	mov	r0, r2
 80084a8:	f000 fa0e 	bl	80088c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2201      	movs	r2, #1
 80084b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2201      	movs	r2, #1
 80084b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2201      	movs	r2, #1
 80084c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2201      	movs	r2, #1
 80084c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2201      	movs	r2, #1
 80084d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2201      	movs	r2, #1
 80084d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2201      	movs	r2, #1
 80084e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2201      	movs	r2, #1
 80084e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2201      	movs	r2, #1
 80084f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2201      	movs	r2, #1
 80084f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2201      	movs	r2, #1
 8008500:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2201      	movs	r2, #1
 8008508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800850c:	2300      	movs	r3, #0
}
 800850e:	4618      	mov	r0, r3
 8008510:	3708      	adds	r7, #8
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}

08008516 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008516:	b480      	push	{r7}
 8008518:	b083      	sub	sp, #12
 800851a:	af00      	add	r7, sp, #0
 800851c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800851e:	bf00      	nop
 8008520:	370c      	adds	r7, #12
 8008522:	46bd      	mov	sp, r7
 8008524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008528:	4770      	bx	lr
	...

0800852c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800852c:	b480      	push	{r7}
 800852e:	b085      	sub	sp, #20
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800853a:	b2db      	uxtb	r3, r3
 800853c:	2b01      	cmp	r3, #1
 800853e:	d001      	beq.n	8008544 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008540:	2301      	movs	r3, #1
 8008542:	e05e      	b.n	8008602 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2202      	movs	r2, #2
 8008548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	68da      	ldr	r2, [r3, #12]
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f042 0201 	orr.w	r2, r2, #1
 800855a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a2b      	ldr	r2, [pc, #172]	; (8008610 <HAL_TIM_Base_Start_IT+0xe4>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d02c      	beq.n	80085c0 <HAL_TIM_Base_Start_IT+0x94>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800856e:	d027      	beq.n	80085c0 <HAL_TIM_Base_Start_IT+0x94>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a27      	ldr	r2, [pc, #156]	; (8008614 <HAL_TIM_Base_Start_IT+0xe8>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d022      	beq.n	80085c0 <HAL_TIM_Base_Start_IT+0x94>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4a26      	ldr	r2, [pc, #152]	; (8008618 <HAL_TIM_Base_Start_IT+0xec>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d01d      	beq.n	80085c0 <HAL_TIM_Base_Start_IT+0x94>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4a24      	ldr	r2, [pc, #144]	; (800861c <HAL_TIM_Base_Start_IT+0xf0>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d018      	beq.n	80085c0 <HAL_TIM_Base_Start_IT+0x94>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4a23      	ldr	r2, [pc, #140]	; (8008620 <HAL_TIM_Base_Start_IT+0xf4>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d013      	beq.n	80085c0 <HAL_TIM_Base_Start_IT+0x94>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4a21      	ldr	r2, [pc, #132]	; (8008624 <HAL_TIM_Base_Start_IT+0xf8>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d00e      	beq.n	80085c0 <HAL_TIM_Base_Start_IT+0x94>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4a20      	ldr	r2, [pc, #128]	; (8008628 <HAL_TIM_Base_Start_IT+0xfc>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d009      	beq.n	80085c0 <HAL_TIM_Base_Start_IT+0x94>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4a1e      	ldr	r2, [pc, #120]	; (800862c <HAL_TIM_Base_Start_IT+0x100>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d004      	beq.n	80085c0 <HAL_TIM_Base_Start_IT+0x94>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4a1d      	ldr	r2, [pc, #116]	; (8008630 <HAL_TIM_Base_Start_IT+0x104>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d115      	bne.n	80085ec <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	689a      	ldr	r2, [r3, #8]
 80085c6:	4b1b      	ldr	r3, [pc, #108]	; (8008634 <HAL_TIM_Base_Start_IT+0x108>)
 80085c8:	4013      	ands	r3, r2
 80085ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	2b06      	cmp	r3, #6
 80085d0:	d015      	beq.n	80085fe <HAL_TIM_Base_Start_IT+0xd2>
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085d8:	d011      	beq.n	80085fe <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	681a      	ldr	r2, [r3, #0]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f042 0201 	orr.w	r2, r2, #1
 80085e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085ea:	e008      	b.n	80085fe <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	681a      	ldr	r2, [r3, #0]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f042 0201 	orr.w	r2, r2, #1
 80085fa:	601a      	str	r2, [r3, #0]
 80085fc:	e000      	b.n	8008600 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008600:	2300      	movs	r3, #0
}
 8008602:	4618      	mov	r0, r3
 8008604:	3714      	adds	r7, #20
 8008606:	46bd      	mov	sp, r7
 8008608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860c:	4770      	bx	lr
 800860e:	bf00      	nop
 8008610:	40010000 	.word	0x40010000
 8008614:	40000400 	.word	0x40000400
 8008618:	40000800 	.word	0x40000800
 800861c:	40000c00 	.word	0x40000c00
 8008620:	40010400 	.word	0x40010400
 8008624:	40001800 	.word	0x40001800
 8008628:	40014000 	.word	0x40014000
 800862c:	4000e000 	.word	0x4000e000
 8008630:	4000e400 	.word	0x4000e400
 8008634:	00010007 	.word	0x00010007

08008638 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b082      	sub	sp, #8
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	691b      	ldr	r3, [r3, #16]
 8008646:	f003 0302 	and.w	r3, r3, #2
 800864a:	2b02      	cmp	r3, #2
 800864c:	d122      	bne.n	8008694 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	68db      	ldr	r3, [r3, #12]
 8008654:	f003 0302 	and.w	r3, r3, #2
 8008658:	2b02      	cmp	r3, #2
 800865a:	d11b      	bne.n	8008694 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f06f 0202 	mvn.w	r2, #2
 8008664:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2201      	movs	r2, #1
 800866a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	699b      	ldr	r3, [r3, #24]
 8008672:	f003 0303 	and.w	r3, r3, #3
 8008676:	2b00      	cmp	r3, #0
 8008678:	d003      	beq.n	8008682 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 f905 	bl	800888a <HAL_TIM_IC_CaptureCallback>
 8008680:	e005      	b.n	800868e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f000 f8f7 	bl	8008876 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f000 f908 	bl	800889e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2200      	movs	r2, #0
 8008692:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	691b      	ldr	r3, [r3, #16]
 800869a:	f003 0304 	and.w	r3, r3, #4
 800869e:	2b04      	cmp	r3, #4
 80086a0:	d122      	bne.n	80086e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	68db      	ldr	r3, [r3, #12]
 80086a8:	f003 0304 	and.w	r3, r3, #4
 80086ac:	2b04      	cmp	r3, #4
 80086ae:	d11b      	bne.n	80086e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f06f 0204 	mvn.w	r2, #4
 80086b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2202      	movs	r2, #2
 80086be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	699b      	ldr	r3, [r3, #24]
 80086c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d003      	beq.n	80086d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f000 f8db 	bl	800888a <HAL_TIM_IC_CaptureCallback>
 80086d4:	e005      	b.n	80086e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f000 f8cd 	bl	8008876 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f000 f8de 	bl	800889e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2200      	movs	r2, #0
 80086e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	691b      	ldr	r3, [r3, #16]
 80086ee:	f003 0308 	and.w	r3, r3, #8
 80086f2:	2b08      	cmp	r3, #8
 80086f4:	d122      	bne.n	800873c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	68db      	ldr	r3, [r3, #12]
 80086fc:	f003 0308 	and.w	r3, r3, #8
 8008700:	2b08      	cmp	r3, #8
 8008702:	d11b      	bne.n	800873c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f06f 0208 	mvn.w	r2, #8
 800870c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2204      	movs	r2, #4
 8008712:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	69db      	ldr	r3, [r3, #28]
 800871a:	f003 0303 	and.w	r3, r3, #3
 800871e:	2b00      	cmp	r3, #0
 8008720:	d003      	beq.n	800872a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f000 f8b1 	bl	800888a <HAL_TIM_IC_CaptureCallback>
 8008728:	e005      	b.n	8008736 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f000 f8a3 	bl	8008876 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f000 f8b4 	bl	800889e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2200      	movs	r2, #0
 800873a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	691b      	ldr	r3, [r3, #16]
 8008742:	f003 0310 	and.w	r3, r3, #16
 8008746:	2b10      	cmp	r3, #16
 8008748:	d122      	bne.n	8008790 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	68db      	ldr	r3, [r3, #12]
 8008750:	f003 0310 	and.w	r3, r3, #16
 8008754:	2b10      	cmp	r3, #16
 8008756:	d11b      	bne.n	8008790 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f06f 0210 	mvn.w	r2, #16
 8008760:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2208      	movs	r2, #8
 8008766:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	69db      	ldr	r3, [r3, #28]
 800876e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008772:	2b00      	cmp	r3, #0
 8008774:	d003      	beq.n	800877e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f000 f887 	bl	800888a <HAL_TIM_IC_CaptureCallback>
 800877c:	e005      	b.n	800878a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f000 f879 	bl	8008876 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 f88a 	bl	800889e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2200      	movs	r2, #0
 800878e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	691b      	ldr	r3, [r3, #16]
 8008796:	f003 0301 	and.w	r3, r3, #1
 800879a:	2b01      	cmp	r3, #1
 800879c:	d10e      	bne.n	80087bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	68db      	ldr	r3, [r3, #12]
 80087a4:	f003 0301 	and.w	r3, r3, #1
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	d107      	bne.n	80087bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f06f 0201 	mvn.w	r2, #1
 80087b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f7f8 fc76 	bl	80010a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	691b      	ldr	r3, [r3, #16]
 80087c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087c6:	2b80      	cmp	r3, #128	; 0x80
 80087c8:	d10e      	bne.n	80087e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	68db      	ldr	r3, [r3, #12]
 80087d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087d4:	2b80      	cmp	r3, #128	; 0x80
 80087d6:	d107      	bne.n	80087e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80087e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f000 f920 	bl	8008a28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	691b      	ldr	r3, [r3, #16]
 80087ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087f6:	d10e      	bne.n	8008816 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	68db      	ldr	r3, [r3, #12]
 80087fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008802:	2b80      	cmp	r3, #128	; 0x80
 8008804:	d107      	bne.n	8008816 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800880e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f000 f913 	bl	8008a3c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	691b      	ldr	r3, [r3, #16]
 800881c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008820:	2b40      	cmp	r3, #64	; 0x40
 8008822:	d10e      	bne.n	8008842 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	68db      	ldr	r3, [r3, #12]
 800882a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800882e:	2b40      	cmp	r3, #64	; 0x40
 8008830:	d107      	bne.n	8008842 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800883a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f000 f838 	bl	80088b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	691b      	ldr	r3, [r3, #16]
 8008848:	f003 0320 	and.w	r3, r3, #32
 800884c:	2b20      	cmp	r3, #32
 800884e:	d10e      	bne.n	800886e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	68db      	ldr	r3, [r3, #12]
 8008856:	f003 0320 	and.w	r3, r3, #32
 800885a:	2b20      	cmp	r3, #32
 800885c:	d107      	bne.n	800886e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f06f 0220 	mvn.w	r2, #32
 8008866:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f000 f8d3 	bl	8008a14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800886e:	bf00      	nop
 8008870:	3708      	adds	r7, #8
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}

08008876 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008876:	b480      	push	{r7}
 8008878:	b083      	sub	sp, #12
 800887a:	af00      	add	r7, sp, #0
 800887c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800887e:	bf00      	nop
 8008880:	370c      	adds	r7, #12
 8008882:	46bd      	mov	sp, r7
 8008884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008888:	4770      	bx	lr

0800888a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800888a:	b480      	push	{r7}
 800888c:	b083      	sub	sp, #12
 800888e:	af00      	add	r7, sp, #0
 8008890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008892:	bf00      	nop
 8008894:	370c      	adds	r7, #12
 8008896:	46bd      	mov	sp, r7
 8008898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889c:	4770      	bx	lr

0800889e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800889e:	b480      	push	{r7}
 80088a0:	b083      	sub	sp, #12
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80088a6:	bf00      	nop
 80088a8:	370c      	adds	r7, #12
 80088aa:	46bd      	mov	sp, r7
 80088ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b0:	4770      	bx	lr

080088b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80088b2:	b480      	push	{r7}
 80088b4:	b083      	sub	sp, #12
 80088b6:	af00      	add	r7, sp, #0
 80088b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80088ba:	bf00      	nop
 80088bc:	370c      	adds	r7, #12
 80088be:	46bd      	mov	sp, r7
 80088c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c4:	4770      	bx	lr
	...

080088c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80088c8:	b480      	push	{r7}
 80088ca:	b085      	sub	sp, #20
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
 80088d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	4a44      	ldr	r2, [pc, #272]	; (80089ec <TIM_Base_SetConfig+0x124>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d013      	beq.n	8008908 <TIM_Base_SetConfig+0x40>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088e6:	d00f      	beq.n	8008908 <TIM_Base_SetConfig+0x40>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	4a41      	ldr	r2, [pc, #260]	; (80089f0 <TIM_Base_SetConfig+0x128>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d00b      	beq.n	8008908 <TIM_Base_SetConfig+0x40>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	4a40      	ldr	r2, [pc, #256]	; (80089f4 <TIM_Base_SetConfig+0x12c>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d007      	beq.n	8008908 <TIM_Base_SetConfig+0x40>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	4a3f      	ldr	r2, [pc, #252]	; (80089f8 <TIM_Base_SetConfig+0x130>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d003      	beq.n	8008908 <TIM_Base_SetConfig+0x40>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	4a3e      	ldr	r2, [pc, #248]	; (80089fc <TIM_Base_SetConfig+0x134>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d108      	bne.n	800891a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800890e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	68fa      	ldr	r2, [r7, #12]
 8008916:	4313      	orrs	r3, r2
 8008918:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	4a33      	ldr	r2, [pc, #204]	; (80089ec <TIM_Base_SetConfig+0x124>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d027      	beq.n	8008972 <TIM_Base_SetConfig+0xaa>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008928:	d023      	beq.n	8008972 <TIM_Base_SetConfig+0xaa>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	4a30      	ldr	r2, [pc, #192]	; (80089f0 <TIM_Base_SetConfig+0x128>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d01f      	beq.n	8008972 <TIM_Base_SetConfig+0xaa>
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	4a2f      	ldr	r2, [pc, #188]	; (80089f4 <TIM_Base_SetConfig+0x12c>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d01b      	beq.n	8008972 <TIM_Base_SetConfig+0xaa>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	4a2e      	ldr	r2, [pc, #184]	; (80089f8 <TIM_Base_SetConfig+0x130>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d017      	beq.n	8008972 <TIM_Base_SetConfig+0xaa>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	4a2d      	ldr	r2, [pc, #180]	; (80089fc <TIM_Base_SetConfig+0x134>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d013      	beq.n	8008972 <TIM_Base_SetConfig+0xaa>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	4a2c      	ldr	r2, [pc, #176]	; (8008a00 <TIM_Base_SetConfig+0x138>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d00f      	beq.n	8008972 <TIM_Base_SetConfig+0xaa>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	4a2b      	ldr	r2, [pc, #172]	; (8008a04 <TIM_Base_SetConfig+0x13c>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d00b      	beq.n	8008972 <TIM_Base_SetConfig+0xaa>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	4a2a      	ldr	r2, [pc, #168]	; (8008a08 <TIM_Base_SetConfig+0x140>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d007      	beq.n	8008972 <TIM_Base_SetConfig+0xaa>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	4a29      	ldr	r2, [pc, #164]	; (8008a0c <TIM_Base_SetConfig+0x144>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d003      	beq.n	8008972 <TIM_Base_SetConfig+0xaa>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	4a28      	ldr	r2, [pc, #160]	; (8008a10 <TIM_Base_SetConfig+0x148>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d108      	bne.n	8008984 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008978:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	68db      	ldr	r3, [r3, #12]
 800897e:	68fa      	ldr	r2, [r7, #12]
 8008980:	4313      	orrs	r3, r2
 8008982:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	695b      	ldr	r3, [r3, #20]
 800898e:	4313      	orrs	r3, r2
 8008990:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	68fa      	ldr	r2, [r7, #12]
 8008996:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	689a      	ldr	r2, [r3, #8]
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	681a      	ldr	r2, [r3, #0]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	4a10      	ldr	r2, [pc, #64]	; (80089ec <TIM_Base_SetConfig+0x124>)
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d00f      	beq.n	80089d0 <TIM_Base_SetConfig+0x108>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	4a12      	ldr	r2, [pc, #72]	; (80089fc <TIM_Base_SetConfig+0x134>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d00b      	beq.n	80089d0 <TIM_Base_SetConfig+0x108>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	4a11      	ldr	r2, [pc, #68]	; (8008a00 <TIM_Base_SetConfig+0x138>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	d007      	beq.n	80089d0 <TIM_Base_SetConfig+0x108>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	4a10      	ldr	r2, [pc, #64]	; (8008a04 <TIM_Base_SetConfig+0x13c>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d003      	beq.n	80089d0 <TIM_Base_SetConfig+0x108>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	4a0f      	ldr	r2, [pc, #60]	; (8008a08 <TIM_Base_SetConfig+0x140>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d103      	bne.n	80089d8 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	691a      	ldr	r2, [r3, #16]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2201      	movs	r2, #1
 80089dc:	615a      	str	r2, [r3, #20]
}
 80089de:	bf00      	nop
 80089e0:	3714      	adds	r7, #20
 80089e2:	46bd      	mov	sp, r7
 80089e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e8:	4770      	bx	lr
 80089ea:	bf00      	nop
 80089ec:	40010000 	.word	0x40010000
 80089f0:	40000400 	.word	0x40000400
 80089f4:	40000800 	.word	0x40000800
 80089f8:	40000c00 	.word	0x40000c00
 80089fc:	40010400 	.word	0x40010400
 8008a00:	40014000 	.word	0x40014000
 8008a04:	40014400 	.word	0x40014400
 8008a08:	40014800 	.word	0x40014800
 8008a0c:	4000e000 	.word	0x4000e000
 8008a10:	4000e400 	.word	0x4000e400

08008a14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b083      	sub	sp, #12
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008a1c:	bf00      	nop
 8008a1e:	370c      	adds	r7, #12
 8008a20:	46bd      	mov	sp, r7
 8008a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a26:	4770      	bx	lr

08008a28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b083      	sub	sp, #12
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008a30:	bf00      	nop
 8008a32:	370c      	adds	r7, #12
 8008a34:	46bd      	mov	sp, r7
 8008a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3a:	4770      	bx	lr

08008a3c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b083      	sub	sp, #12
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008a44:	bf00      	nop
 8008a46:	370c      	adds	r7, #12
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4e:	4770      	bx	lr

08008a50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b082      	sub	sp, #8
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d101      	bne.n	8008a62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008a5e:	2301      	movs	r3, #1
 8008a60:	e042      	b.n	8008ae8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d106      	bne.n	8008a7a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f7f8 fc77 	bl	8001368 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2224      	movs	r2, #36	; 0x24
 8008a7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	681a      	ldr	r2, [r3, #0]
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f022 0201 	bic.w	r2, r2, #1
 8008a90:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f000 fd5c 	bl	8009550 <UART_SetConfig>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	2b01      	cmp	r3, #1
 8008a9c:	d101      	bne.n	8008aa2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	e022      	b.n	8008ae8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d002      	beq.n	8008ab0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f001 fbbc 	bl	800a228 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	685a      	ldr	r2, [r3, #4]
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008abe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	689a      	ldr	r2, [r3, #8]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008ace:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	681a      	ldr	r2, [r3, #0]
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f042 0201 	orr.w	r2, r2, #1
 8008ade:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f001 fc43 	bl	800a36c <UART_CheckIdleState>
 8008ae6:	4603      	mov	r3, r0
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	3708      	adds	r7, #8
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}

08008af0 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b082      	sub	sp, #8
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d101      	bne.n	8008b02 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8008afe:	2301      	movs	r3, #1
 8008b00:	e031      	b.n	8008b66 <HAL_UART_DeInit+0x76>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2224      	movs	r2, #36	; 0x24
 8008b06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	681a      	ldr	r2, [r3, #0]
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f022 0201 	bic.w	r2, r2, #1
 8008b18:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	2200      	movs	r2, #0
 8008b28:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f7f8 fe24 	bl	8001780 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->gState = HAL_UART_STATE_RESET;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2200      	movs	r2, #0
 8008b44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2200      	movs	r2, #0
 8008b54:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008b64:	2300      	movs	r3, #0
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3708      	adds	r7, #8
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}

08008b6e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b6e:	b580      	push	{r7, lr}
 8008b70:	b08a      	sub	sp, #40	; 0x28
 8008b72:	af02      	add	r7, sp, #8
 8008b74:	60f8      	str	r0, [r7, #12]
 8008b76:	60b9      	str	r1, [r7, #8]
 8008b78:	603b      	str	r3, [r7, #0]
 8008b7a:	4613      	mov	r3, r2
 8008b7c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b84:	2b20      	cmp	r3, #32
 8008b86:	d17b      	bne.n	8008c80 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d002      	beq.n	8008b94 <HAL_UART_Transmit+0x26>
 8008b8e:	88fb      	ldrh	r3, [r7, #6]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d101      	bne.n	8008b98 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008b94:	2301      	movs	r3, #1
 8008b96:	e074      	b.n	8008c82 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	2221      	movs	r2, #33	; 0x21
 8008ba4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008ba8:	f7f9 f8f4 	bl	8001d94 <HAL_GetTick>
 8008bac:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	88fa      	ldrh	r2, [r7, #6]
 8008bb2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	88fa      	ldrh	r2, [r7, #6]
 8008bba:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	689b      	ldr	r3, [r3, #8]
 8008bc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bc6:	d108      	bne.n	8008bda <HAL_UART_Transmit+0x6c>
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	691b      	ldr	r3, [r3, #16]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d104      	bne.n	8008bda <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	61bb      	str	r3, [r7, #24]
 8008bd8:	e003      	b.n	8008be2 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008bde:	2300      	movs	r3, #0
 8008be0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008be2:	e030      	b.n	8008c46 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	9300      	str	r3, [sp, #0]
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	2200      	movs	r2, #0
 8008bec:	2180      	movs	r1, #128	; 0x80
 8008bee:	68f8      	ldr	r0, [r7, #12]
 8008bf0:	f001 fc66 	bl	800a4c0 <UART_WaitOnFlagUntilTimeout>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d005      	beq.n	8008c06 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	2220      	movs	r2, #32
 8008bfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8008c02:	2303      	movs	r3, #3
 8008c04:	e03d      	b.n	8008c82 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008c06:	69fb      	ldr	r3, [r7, #28]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d10b      	bne.n	8008c24 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008c0c:	69bb      	ldr	r3, [r7, #24]
 8008c0e:	881b      	ldrh	r3, [r3, #0]
 8008c10:	461a      	mov	r2, r3
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c1a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008c1c:	69bb      	ldr	r3, [r7, #24]
 8008c1e:	3302      	adds	r3, #2
 8008c20:	61bb      	str	r3, [r7, #24]
 8008c22:	e007      	b.n	8008c34 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008c24:	69fb      	ldr	r3, [r7, #28]
 8008c26:	781a      	ldrb	r2, [r3, #0]
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008c2e:	69fb      	ldr	r3, [r7, #28]
 8008c30:	3301      	adds	r3, #1
 8008c32:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008c3a:	b29b      	uxth	r3, r3
 8008c3c:	3b01      	subs	r3, #1
 8008c3e:	b29a      	uxth	r2, r3
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008c4c:	b29b      	uxth	r3, r3
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d1c8      	bne.n	8008be4 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	9300      	str	r3, [sp, #0]
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	2140      	movs	r1, #64	; 0x40
 8008c5c:	68f8      	ldr	r0, [r7, #12]
 8008c5e:	f001 fc2f 	bl	800a4c0 <UART_WaitOnFlagUntilTimeout>
 8008c62:	4603      	mov	r3, r0
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d005      	beq.n	8008c74 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	2220      	movs	r2, #32
 8008c6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8008c70:	2303      	movs	r3, #3
 8008c72:	e006      	b.n	8008c82 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	2220      	movs	r2, #32
 8008c78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	e000      	b.n	8008c82 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008c80:	2302      	movs	r3, #2
  }
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3720      	adds	r7, #32
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}
	...

08008c8c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b08a      	sub	sp, #40	; 0x28
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	60f8      	str	r0, [r7, #12]
 8008c94:	60b9      	str	r1, [r7, #8]
 8008c96:	4613      	mov	r3, r2
 8008c98:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ca0:	2b20      	cmp	r3, #32
 8008ca2:	d167      	bne.n	8008d74 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d002      	beq.n	8008cb0 <HAL_UART_Transmit_DMA+0x24>
 8008caa:	88fb      	ldrh	r3, [r7, #6]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d101      	bne.n	8008cb4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	e060      	b.n	8008d76 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	68ba      	ldr	r2, [r7, #8]
 8008cb8:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	88fa      	ldrh	r2, [r7, #6]
 8008cbe:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	88fa      	ldrh	r2, [r7, #6]
 8008cc6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	2200      	movs	r2, #0
 8008cce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	2221      	movs	r2, #33	; 0x21
 8008cd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d028      	beq.n	8008d34 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ce6:	4a26      	ldr	r2, [pc, #152]	; (8008d80 <HAL_UART_Transmit_DMA+0xf4>)
 8008ce8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008cee:	4a25      	ldr	r2, [pc, #148]	; (8008d84 <HAL_UART_Transmit_DMA+0xf8>)
 8008cf0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008cf6:	4a24      	ldr	r2, [pc, #144]	; (8008d88 <HAL_UART_Transmit_DMA+0xfc>)
 8008cf8:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008cfe:	2200      	movs	r2, #0
 8008d00:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d0a:	4619      	mov	r1, r3
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	3328      	adds	r3, #40	; 0x28
 8008d12:	461a      	mov	r2, r3
 8008d14:	88fb      	ldrh	r3, [r7, #6]
 8008d16:	f7f9 ff09 	bl	8002b2c <HAL_DMA_Start_IT>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d009      	beq.n	8008d34 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	2210      	movs	r2, #16
 8008d24:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	2220      	movs	r2, #32
 8008d2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8008d30:	2301      	movs	r3, #1
 8008d32:	e020      	b.n	8008d76 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	2240      	movs	r2, #64	; 0x40
 8008d3a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	3308      	adds	r3, #8
 8008d42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	e853 3f00 	ldrex	r3, [r3]
 8008d4a:	613b      	str	r3, [r7, #16]
   return(result);
 8008d4c:	693b      	ldr	r3, [r7, #16]
 8008d4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d52:	627b      	str	r3, [r7, #36]	; 0x24
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	3308      	adds	r3, #8
 8008d5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d5c:	623a      	str	r2, [r7, #32]
 8008d5e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d60:	69f9      	ldr	r1, [r7, #28]
 8008d62:	6a3a      	ldr	r2, [r7, #32]
 8008d64:	e841 2300 	strex	r3, r2, [r1]
 8008d68:	61bb      	str	r3, [r7, #24]
   return(result);
 8008d6a:	69bb      	ldr	r3, [r7, #24]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d1e5      	bne.n	8008d3c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8008d70:	2300      	movs	r3, #0
 8008d72:	e000      	b.n	8008d76 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008d74:	2302      	movs	r3, #2
  }
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3728      	adds	r7, #40	; 0x28
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}
 8008d7e:	bf00      	nop
 8008d80:	0800a82d 	.word	0x0800a82d
 8008d84:	0800a8c3 	.word	0x0800a8c3
 8008d88:	0800aa45 	.word	0x0800aa45

08008d8c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b0ba      	sub	sp, #232	; 0xe8
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	69db      	ldr	r3, [r3, #28]
 8008d9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	689b      	ldr	r3, [r3, #8]
 8008dae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008db2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008db6:	f640 030f 	movw	r3, #2063	; 0x80f
 8008dba:	4013      	ands	r3, r2
 8008dbc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008dc0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d11b      	bne.n	8008e00 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008dc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008dcc:	f003 0320 	and.w	r3, r3, #32
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d015      	beq.n	8008e00 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008dd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008dd8:	f003 0320 	and.w	r3, r3, #32
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d105      	bne.n	8008dec <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008de0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008de4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d009      	beq.n	8008e00 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	f000 8377 	beq.w	80094e4 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	4798      	blx	r3
      }
      return;
 8008dfe:	e371      	b.n	80094e4 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008e00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	f000 8123 	beq.w	8009050 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008e0a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008e0e:	4b8d      	ldr	r3, [pc, #564]	; (8009044 <HAL_UART_IRQHandler+0x2b8>)
 8008e10:	4013      	ands	r3, r2
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d106      	bne.n	8008e24 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008e16:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008e1a:	4b8b      	ldr	r3, [pc, #556]	; (8009048 <HAL_UART_IRQHandler+0x2bc>)
 8008e1c:	4013      	ands	r3, r2
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	f000 8116 	beq.w	8009050 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008e24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e28:	f003 0301 	and.w	r3, r3, #1
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d011      	beq.n	8008e54 <HAL_UART_IRQHandler+0xc8>
 8008e30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d00b      	beq.n	8008e54 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	2201      	movs	r2, #1
 8008e42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e4a:	f043 0201 	orr.w	r2, r3, #1
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e58:	f003 0302 	and.w	r3, r3, #2
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d011      	beq.n	8008e84 <HAL_UART_IRQHandler+0xf8>
 8008e60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e64:	f003 0301 	and.w	r3, r3, #1
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d00b      	beq.n	8008e84 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	2202      	movs	r2, #2
 8008e72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e7a:	f043 0204 	orr.w	r2, r3, #4
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e88:	f003 0304 	and.w	r3, r3, #4
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d011      	beq.n	8008eb4 <HAL_UART_IRQHandler+0x128>
 8008e90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e94:	f003 0301 	and.w	r3, r3, #1
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d00b      	beq.n	8008eb4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	2204      	movs	r2, #4
 8008ea2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008eaa:	f043 0202 	orr.w	r2, r3, #2
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008eb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008eb8:	f003 0308 	and.w	r3, r3, #8
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d017      	beq.n	8008ef0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008ec0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ec4:	f003 0320 	and.w	r3, r3, #32
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d105      	bne.n	8008ed8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008ecc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008ed0:	4b5c      	ldr	r3, [pc, #368]	; (8009044 <HAL_UART_IRQHandler+0x2b8>)
 8008ed2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d00b      	beq.n	8008ef0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	2208      	movs	r2, #8
 8008ede:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ee6:	f043 0208 	orr.w	r2, r3, #8
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008ef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ef4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d012      	beq.n	8008f22 <HAL_UART_IRQHandler+0x196>
 8008efc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f00:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d00c      	beq.n	8008f22 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008f10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f18:	f043 0220 	orr.w	r2, r3, #32
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	f000 82dd 	beq.w	80094e8 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f32:	f003 0320 	and.w	r3, r3, #32
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d013      	beq.n	8008f62 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008f3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f3e:	f003 0320 	and.w	r3, r3, #32
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d105      	bne.n	8008f52 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008f46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d007      	beq.n	8008f62 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d003      	beq.n	8008f62 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f68:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	689b      	ldr	r3, [r3, #8]
 8008f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f76:	2b40      	cmp	r3, #64	; 0x40
 8008f78:	d005      	beq.n	8008f86 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008f7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008f7e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d054      	beq.n	8009030 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f001 fbea 	bl	800a760 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	689b      	ldr	r3, [r3, #8]
 8008f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f96:	2b40      	cmp	r3, #64	; 0x40
 8008f98:	d146      	bne.n	8009028 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	3308      	adds	r3, #8
 8008fa0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fa4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008fa8:	e853 3f00 	ldrex	r3, [r3]
 8008fac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008fb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008fb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	3308      	adds	r3, #8
 8008fc2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008fc6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008fca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008fd2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008fd6:	e841 2300 	strex	r3, r2, [r1]
 8008fda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008fde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d1d9      	bne.n	8008f9a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d017      	beq.n	8009020 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ff6:	4a15      	ldr	r2, [pc, #84]	; (800904c <HAL_UART_IRQHandler+0x2c0>)
 8008ff8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009000:	4618      	mov	r0, r3
 8009002:	f7fa fb1b 	bl	800363c <HAL_DMA_Abort_IT>
 8009006:	4603      	mov	r3, r0
 8009008:	2b00      	cmp	r3, #0
 800900a:	d019      	beq.n	8009040 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009012:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009014:	687a      	ldr	r2, [r7, #4]
 8009016:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800901a:	4610      	mov	r0, r2
 800901c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800901e:	e00f      	b.n	8009040 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f000 fa8b 	bl	800953c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009026:	e00b      	b.n	8009040 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f000 fa87 	bl	800953c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800902e:	e007      	b.n	8009040 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f000 fa83 	bl	800953c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2200      	movs	r2, #0
 800903a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800903e:	e253      	b.n	80094e8 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009040:	bf00      	nop
    return;
 8009042:	e251      	b.n	80094e8 <HAL_UART_IRQHandler+0x75c>
 8009044:	10000001 	.word	0x10000001
 8009048:	04000120 	.word	0x04000120
 800904c:	0800aac5 	.word	0x0800aac5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009054:	2b01      	cmp	r3, #1
 8009056:	f040 81e7 	bne.w	8009428 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800905a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800905e:	f003 0310 	and.w	r3, r3, #16
 8009062:	2b00      	cmp	r3, #0
 8009064:	f000 81e0 	beq.w	8009428 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009068:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800906c:	f003 0310 	and.w	r3, r3, #16
 8009070:	2b00      	cmp	r3, #0
 8009072:	f000 81d9 	beq.w	8009428 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	2210      	movs	r2, #16
 800907c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	689b      	ldr	r3, [r3, #8]
 8009084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009088:	2b40      	cmp	r3, #64	; 0x40
 800908a:	f040 8151 	bne.w	8009330 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	4a96      	ldr	r2, [pc, #600]	; (80092f0 <HAL_UART_IRQHandler+0x564>)
 8009098:	4293      	cmp	r3, r2
 800909a:	d068      	beq.n	800916e <HAL_UART_IRQHandler+0x3e2>
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4a93      	ldr	r2, [pc, #588]	; (80092f4 <HAL_UART_IRQHandler+0x568>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d061      	beq.n	800916e <HAL_UART_IRQHandler+0x3e2>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	4a91      	ldr	r2, [pc, #580]	; (80092f8 <HAL_UART_IRQHandler+0x56c>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d05a      	beq.n	800916e <HAL_UART_IRQHandler+0x3e2>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	4a8e      	ldr	r2, [pc, #568]	; (80092fc <HAL_UART_IRQHandler+0x570>)
 80090c2:	4293      	cmp	r3, r2
 80090c4:	d053      	beq.n	800916e <HAL_UART_IRQHandler+0x3e2>
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	4a8c      	ldr	r2, [pc, #560]	; (8009300 <HAL_UART_IRQHandler+0x574>)
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d04c      	beq.n	800916e <HAL_UART_IRQHandler+0x3e2>
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	4a89      	ldr	r2, [pc, #548]	; (8009304 <HAL_UART_IRQHandler+0x578>)
 80090de:	4293      	cmp	r3, r2
 80090e0:	d045      	beq.n	800916e <HAL_UART_IRQHandler+0x3e2>
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	4a87      	ldr	r2, [pc, #540]	; (8009308 <HAL_UART_IRQHandler+0x57c>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d03e      	beq.n	800916e <HAL_UART_IRQHandler+0x3e2>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	4a84      	ldr	r2, [pc, #528]	; (800930c <HAL_UART_IRQHandler+0x580>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d037      	beq.n	800916e <HAL_UART_IRQHandler+0x3e2>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	4a82      	ldr	r2, [pc, #520]	; (8009310 <HAL_UART_IRQHandler+0x584>)
 8009108:	4293      	cmp	r3, r2
 800910a:	d030      	beq.n	800916e <HAL_UART_IRQHandler+0x3e2>
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	4a7f      	ldr	r2, [pc, #508]	; (8009314 <HAL_UART_IRQHandler+0x588>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d029      	beq.n	800916e <HAL_UART_IRQHandler+0x3e2>
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	4a7d      	ldr	r2, [pc, #500]	; (8009318 <HAL_UART_IRQHandler+0x58c>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d022      	beq.n	800916e <HAL_UART_IRQHandler+0x3e2>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	4a7a      	ldr	r2, [pc, #488]	; (800931c <HAL_UART_IRQHandler+0x590>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d01b      	beq.n	800916e <HAL_UART_IRQHandler+0x3e2>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	4a78      	ldr	r2, [pc, #480]	; (8009320 <HAL_UART_IRQHandler+0x594>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d014      	beq.n	800916e <HAL_UART_IRQHandler+0x3e2>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	4a75      	ldr	r2, [pc, #468]	; (8009324 <HAL_UART_IRQHandler+0x598>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d00d      	beq.n	800916e <HAL_UART_IRQHandler+0x3e2>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	4a73      	ldr	r2, [pc, #460]	; (8009328 <HAL_UART_IRQHandler+0x59c>)
 800915c:	4293      	cmp	r3, r2
 800915e:	d006      	beq.n	800916e <HAL_UART_IRQHandler+0x3e2>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	4a70      	ldr	r2, [pc, #448]	; (800932c <HAL_UART_IRQHandler+0x5a0>)
 800916a:	4293      	cmp	r3, r2
 800916c:	d106      	bne.n	800917c <HAL_UART_IRQHandler+0x3f0>
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	685b      	ldr	r3, [r3, #4]
 8009178:	b29b      	uxth	r3, r3
 800917a:	e005      	b.n	8009188 <HAL_UART_IRQHandler+0x3fc>
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	685b      	ldr	r3, [r3, #4]
 8009186:	b29b      	uxth	r3, r3
 8009188:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800918c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009190:	2b00      	cmp	r3, #0
 8009192:	f000 81ab 	beq.w	80094ec <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800919c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80091a0:	429a      	cmp	r2, r3
 80091a2:	f080 81a3 	bcs.w	80094ec <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80091ac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80091b6:	69db      	ldr	r3, [r3, #28]
 80091b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091bc:	f000 8087 	beq.w	80092ce <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80091cc:	e853 3f00 	ldrex	r3, [r3]
 80091d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80091d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80091d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80091dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	461a      	mov	r2, r3
 80091e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80091ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80091ee:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80091f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80091fa:	e841 2300 	strex	r3, r2, [r1]
 80091fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009202:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009206:	2b00      	cmp	r3, #0
 8009208:	d1da      	bne.n	80091c0 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	3308      	adds	r3, #8
 8009210:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009212:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009214:	e853 3f00 	ldrex	r3, [r3]
 8009218:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800921a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800921c:	f023 0301 	bic.w	r3, r3, #1
 8009220:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	3308      	adds	r3, #8
 800922a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800922e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009232:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009234:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009236:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800923a:	e841 2300 	strex	r3, r2, [r1]
 800923e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009240:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009242:	2b00      	cmp	r3, #0
 8009244:	d1e1      	bne.n	800920a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	3308      	adds	r3, #8
 800924c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800924e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009250:	e853 3f00 	ldrex	r3, [r3]
 8009254:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009256:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009258:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800925c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	3308      	adds	r3, #8
 8009266:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800926a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800926c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800926e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009270:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009272:	e841 2300 	strex	r3, r2, [r1]
 8009276:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009278:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800927a:	2b00      	cmp	r3, #0
 800927c:	d1e3      	bne.n	8009246 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2220      	movs	r2, #32
 8009282:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2200      	movs	r2, #0
 800928a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009292:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009294:	e853 3f00 	ldrex	r3, [r3]
 8009298:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800929a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800929c:	f023 0310 	bic.w	r3, r3, #16
 80092a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	461a      	mov	r2, r3
 80092aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80092ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80092b0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092b2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80092b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80092b6:	e841 2300 	strex	r3, r2, [r1]
 80092ba:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80092bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d1e4      	bne.n	800928c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092c8:	4618      	mov	r0, r3
 80092ca:	f7f9 fe99 	bl	8003000 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2202      	movs	r2, #2
 80092d2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80092e0:	b29b      	uxth	r3, r3
 80092e2:	1ad3      	subs	r3, r2, r3
 80092e4:	b29b      	uxth	r3, r3
 80092e6:	4619      	mov	r1, r3
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f7f7 ff05 	bl	80010f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80092ee:	e0fd      	b.n	80094ec <HAL_UART_IRQHandler+0x760>
 80092f0:	40020010 	.word	0x40020010
 80092f4:	40020028 	.word	0x40020028
 80092f8:	40020040 	.word	0x40020040
 80092fc:	40020058 	.word	0x40020058
 8009300:	40020070 	.word	0x40020070
 8009304:	40020088 	.word	0x40020088
 8009308:	400200a0 	.word	0x400200a0
 800930c:	400200b8 	.word	0x400200b8
 8009310:	40020410 	.word	0x40020410
 8009314:	40020428 	.word	0x40020428
 8009318:	40020440 	.word	0x40020440
 800931c:	40020458 	.word	0x40020458
 8009320:	40020470 	.word	0x40020470
 8009324:	40020488 	.word	0x40020488
 8009328:	400204a0 	.word	0x400204a0
 800932c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800933c:	b29b      	uxth	r3, r3
 800933e:	1ad3      	subs	r3, r2, r3
 8009340:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800934a:	b29b      	uxth	r3, r3
 800934c:	2b00      	cmp	r3, #0
 800934e:	f000 80cf 	beq.w	80094f0 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8009352:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009356:	2b00      	cmp	r3, #0
 8009358:	f000 80ca 	beq.w	80094f0 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009364:	e853 3f00 	ldrex	r3, [r3]
 8009368:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800936a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800936c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009370:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	461a      	mov	r2, r3
 800937a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800937e:	647b      	str	r3, [r7, #68]	; 0x44
 8009380:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009382:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009384:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009386:	e841 2300 	strex	r3, r2, [r1]
 800938a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800938c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800938e:	2b00      	cmp	r3, #0
 8009390:	d1e4      	bne.n	800935c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	3308      	adds	r3, #8
 8009398:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800939a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800939c:	e853 3f00 	ldrex	r3, [r3]
 80093a0:	623b      	str	r3, [r7, #32]
   return(result);
 80093a2:	6a3a      	ldr	r2, [r7, #32]
 80093a4:	4b55      	ldr	r3, [pc, #340]	; (80094fc <HAL_UART_IRQHandler+0x770>)
 80093a6:	4013      	ands	r3, r2
 80093a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	3308      	adds	r3, #8
 80093b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80093b6:	633a      	str	r2, [r7, #48]	; 0x30
 80093b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80093bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093be:	e841 2300 	strex	r3, r2, [r1]
 80093c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80093c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d1e3      	bne.n	8009392 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2220      	movs	r2, #32
 80093ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2200      	movs	r2, #0
 80093d6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2200      	movs	r2, #0
 80093dc:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093e4:	693b      	ldr	r3, [r7, #16]
 80093e6:	e853 3f00 	ldrex	r3, [r3]
 80093ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	f023 0310 	bic.w	r3, r3, #16
 80093f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	461a      	mov	r2, r3
 80093fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009400:	61fb      	str	r3, [r7, #28]
 8009402:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009404:	69b9      	ldr	r1, [r7, #24]
 8009406:	69fa      	ldr	r2, [r7, #28]
 8009408:	e841 2300 	strex	r3, r2, [r1]
 800940c:	617b      	str	r3, [r7, #20]
   return(result);
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d1e4      	bne.n	80093de <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2202      	movs	r2, #2
 8009418:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800941a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800941e:	4619      	mov	r1, r3
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f7f7 fe69 	bl	80010f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009426:	e063      	b.n	80094f0 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009428:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800942c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009430:	2b00      	cmp	r3, #0
 8009432:	d00e      	beq.n	8009452 <HAL_UART_IRQHandler+0x6c6>
 8009434:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009438:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800943c:	2b00      	cmp	r3, #0
 800943e:	d008      	beq.n	8009452 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009448:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f001 fb7b 	bl	800ab46 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009450:	e051      	b.n	80094f6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800945a:	2b00      	cmp	r3, #0
 800945c:	d014      	beq.n	8009488 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800945e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009466:	2b00      	cmp	r3, #0
 8009468:	d105      	bne.n	8009476 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800946a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800946e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009472:	2b00      	cmp	r3, #0
 8009474:	d008      	beq.n	8009488 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800947a:	2b00      	cmp	r3, #0
 800947c:	d03a      	beq.n	80094f4 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	4798      	blx	r3
    }
    return;
 8009486:	e035      	b.n	80094f4 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009488:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800948c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009490:	2b00      	cmp	r3, #0
 8009492:	d009      	beq.n	80094a8 <HAL_UART_IRQHandler+0x71c>
 8009494:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800949c:	2b00      	cmp	r3, #0
 800949e:	d003      	beq.n	80094a8 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f001 fb25 	bl	800aaf0 <UART_EndTransmit_IT>
    return;
 80094a6:	e026      	b.n	80094f6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80094a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d009      	beq.n	80094c8 <HAL_UART_IRQHandler+0x73c>
 80094b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094b8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d003      	beq.n	80094c8 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f001 fb54 	bl	800ab6e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80094c6:	e016      	b.n	80094f6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80094c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d010      	beq.n	80094f6 <HAL_UART_IRQHandler+0x76a>
 80094d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094d8:	2b00      	cmp	r3, #0
 80094da:	da0c      	bge.n	80094f6 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f001 fb3c 	bl	800ab5a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80094e2:	e008      	b.n	80094f6 <HAL_UART_IRQHandler+0x76a>
      return;
 80094e4:	bf00      	nop
 80094e6:	e006      	b.n	80094f6 <HAL_UART_IRQHandler+0x76a>
    return;
 80094e8:	bf00      	nop
 80094ea:	e004      	b.n	80094f6 <HAL_UART_IRQHandler+0x76a>
      return;
 80094ec:	bf00      	nop
 80094ee:	e002      	b.n	80094f6 <HAL_UART_IRQHandler+0x76a>
      return;
 80094f0:	bf00      	nop
 80094f2:	e000      	b.n	80094f6 <HAL_UART_IRQHandler+0x76a>
    return;
 80094f4:	bf00      	nop
  }
}
 80094f6:	37e8      	adds	r7, #232	; 0xe8
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}
 80094fc:	effffffe 	.word	0xeffffffe

08009500 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009500:	b480      	push	{r7}
 8009502:	b083      	sub	sp, #12
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009508:	bf00      	nop
 800950a:	370c      	adds	r7, #12
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr

08009514 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009514:	b480      	push	{r7}
 8009516:	b083      	sub	sp, #12
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800951c:	bf00      	nop
 800951e:	370c      	adds	r7, #12
 8009520:	46bd      	mov	sp, r7
 8009522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009526:	4770      	bx	lr

08009528 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009528:	b480      	push	{r7}
 800952a:	b083      	sub	sp, #12
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009530:	bf00      	nop
 8009532:	370c      	adds	r7, #12
 8009534:	46bd      	mov	sp, r7
 8009536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953a:	4770      	bx	lr

0800953c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800953c:	b480      	push	{r7}
 800953e:	b083      	sub	sp, #12
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009544:	bf00      	nop
 8009546:	370c      	adds	r7, #12
 8009548:	46bd      	mov	sp, r7
 800954a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954e:	4770      	bx	lr

08009550 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009550:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009554:	b092      	sub	sp, #72	; 0x48
 8009556:	af00      	add	r7, sp, #0
 8009558:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800955a:	2300      	movs	r3, #0
 800955c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009560:	697b      	ldr	r3, [r7, #20]
 8009562:	689a      	ldr	r2, [r3, #8]
 8009564:	697b      	ldr	r3, [r7, #20]
 8009566:	691b      	ldr	r3, [r3, #16]
 8009568:	431a      	orrs	r2, r3
 800956a:	697b      	ldr	r3, [r7, #20]
 800956c:	695b      	ldr	r3, [r3, #20]
 800956e:	431a      	orrs	r2, r3
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	69db      	ldr	r3, [r3, #28]
 8009574:	4313      	orrs	r3, r2
 8009576:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009578:	697b      	ldr	r3, [r7, #20]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	681a      	ldr	r2, [r3, #0]
 800957e:	4bbe      	ldr	r3, [pc, #760]	; (8009878 <UART_SetConfig+0x328>)
 8009580:	4013      	ands	r3, r2
 8009582:	697a      	ldr	r2, [r7, #20]
 8009584:	6812      	ldr	r2, [r2, #0]
 8009586:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009588:	430b      	orrs	r3, r1
 800958a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	685b      	ldr	r3, [r3, #4]
 8009592:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	68da      	ldr	r2, [r3, #12]
 800959a:	697b      	ldr	r3, [r7, #20]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	430a      	orrs	r2, r1
 80095a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80095a2:	697b      	ldr	r3, [r7, #20]
 80095a4:	699b      	ldr	r3, [r3, #24]
 80095a6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80095a8:	697b      	ldr	r3, [r7, #20]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	4ab3      	ldr	r2, [pc, #716]	; (800987c <UART_SetConfig+0x32c>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d004      	beq.n	80095bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80095b2:	697b      	ldr	r3, [r7, #20]
 80095b4:	6a1b      	ldr	r3, [r3, #32]
 80095b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80095b8:	4313      	orrs	r3, r2
 80095ba:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80095bc:	697b      	ldr	r3, [r7, #20]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	689a      	ldr	r2, [r3, #8]
 80095c2:	4baf      	ldr	r3, [pc, #700]	; (8009880 <UART_SetConfig+0x330>)
 80095c4:	4013      	ands	r3, r2
 80095c6:	697a      	ldr	r2, [r7, #20]
 80095c8:	6812      	ldr	r2, [r2, #0]
 80095ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80095cc:	430b      	orrs	r3, r1
 80095ce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80095d0:	697b      	ldr	r3, [r7, #20]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095d6:	f023 010f 	bic.w	r1, r3, #15
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80095de:	697b      	ldr	r3, [r7, #20]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	430a      	orrs	r2, r1
 80095e4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	4aa6      	ldr	r2, [pc, #664]	; (8009884 <UART_SetConfig+0x334>)
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d177      	bne.n	80096e0 <UART_SetConfig+0x190>
 80095f0:	4ba5      	ldr	r3, [pc, #660]	; (8009888 <UART_SetConfig+0x338>)
 80095f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80095f8:	2b28      	cmp	r3, #40	; 0x28
 80095fa:	d86d      	bhi.n	80096d8 <UART_SetConfig+0x188>
 80095fc:	a201      	add	r2, pc, #4	; (adr r2, 8009604 <UART_SetConfig+0xb4>)
 80095fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009602:	bf00      	nop
 8009604:	080096a9 	.word	0x080096a9
 8009608:	080096d9 	.word	0x080096d9
 800960c:	080096d9 	.word	0x080096d9
 8009610:	080096d9 	.word	0x080096d9
 8009614:	080096d9 	.word	0x080096d9
 8009618:	080096d9 	.word	0x080096d9
 800961c:	080096d9 	.word	0x080096d9
 8009620:	080096d9 	.word	0x080096d9
 8009624:	080096b1 	.word	0x080096b1
 8009628:	080096d9 	.word	0x080096d9
 800962c:	080096d9 	.word	0x080096d9
 8009630:	080096d9 	.word	0x080096d9
 8009634:	080096d9 	.word	0x080096d9
 8009638:	080096d9 	.word	0x080096d9
 800963c:	080096d9 	.word	0x080096d9
 8009640:	080096d9 	.word	0x080096d9
 8009644:	080096b9 	.word	0x080096b9
 8009648:	080096d9 	.word	0x080096d9
 800964c:	080096d9 	.word	0x080096d9
 8009650:	080096d9 	.word	0x080096d9
 8009654:	080096d9 	.word	0x080096d9
 8009658:	080096d9 	.word	0x080096d9
 800965c:	080096d9 	.word	0x080096d9
 8009660:	080096d9 	.word	0x080096d9
 8009664:	080096c1 	.word	0x080096c1
 8009668:	080096d9 	.word	0x080096d9
 800966c:	080096d9 	.word	0x080096d9
 8009670:	080096d9 	.word	0x080096d9
 8009674:	080096d9 	.word	0x080096d9
 8009678:	080096d9 	.word	0x080096d9
 800967c:	080096d9 	.word	0x080096d9
 8009680:	080096d9 	.word	0x080096d9
 8009684:	080096c9 	.word	0x080096c9
 8009688:	080096d9 	.word	0x080096d9
 800968c:	080096d9 	.word	0x080096d9
 8009690:	080096d9 	.word	0x080096d9
 8009694:	080096d9 	.word	0x080096d9
 8009698:	080096d9 	.word	0x080096d9
 800969c:	080096d9 	.word	0x080096d9
 80096a0:	080096d9 	.word	0x080096d9
 80096a4:	080096d1 	.word	0x080096d1
 80096a8:	2301      	movs	r3, #1
 80096aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096ae:	e326      	b.n	8009cfe <UART_SetConfig+0x7ae>
 80096b0:	2304      	movs	r3, #4
 80096b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096b6:	e322      	b.n	8009cfe <UART_SetConfig+0x7ae>
 80096b8:	2308      	movs	r3, #8
 80096ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096be:	e31e      	b.n	8009cfe <UART_SetConfig+0x7ae>
 80096c0:	2310      	movs	r3, #16
 80096c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096c6:	e31a      	b.n	8009cfe <UART_SetConfig+0x7ae>
 80096c8:	2320      	movs	r3, #32
 80096ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096ce:	e316      	b.n	8009cfe <UART_SetConfig+0x7ae>
 80096d0:	2340      	movs	r3, #64	; 0x40
 80096d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096d6:	e312      	b.n	8009cfe <UART_SetConfig+0x7ae>
 80096d8:	2380      	movs	r3, #128	; 0x80
 80096da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096de:	e30e      	b.n	8009cfe <UART_SetConfig+0x7ae>
 80096e0:	697b      	ldr	r3, [r7, #20]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	4a69      	ldr	r2, [pc, #420]	; (800988c <UART_SetConfig+0x33c>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d130      	bne.n	800974c <UART_SetConfig+0x1fc>
 80096ea:	4b67      	ldr	r3, [pc, #412]	; (8009888 <UART_SetConfig+0x338>)
 80096ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096ee:	f003 0307 	and.w	r3, r3, #7
 80096f2:	2b05      	cmp	r3, #5
 80096f4:	d826      	bhi.n	8009744 <UART_SetConfig+0x1f4>
 80096f6:	a201      	add	r2, pc, #4	; (adr r2, 80096fc <UART_SetConfig+0x1ac>)
 80096f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096fc:	08009715 	.word	0x08009715
 8009700:	0800971d 	.word	0x0800971d
 8009704:	08009725 	.word	0x08009725
 8009708:	0800972d 	.word	0x0800972d
 800970c:	08009735 	.word	0x08009735
 8009710:	0800973d 	.word	0x0800973d
 8009714:	2300      	movs	r3, #0
 8009716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800971a:	e2f0      	b.n	8009cfe <UART_SetConfig+0x7ae>
 800971c:	2304      	movs	r3, #4
 800971e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009722:	e2ec      	b.n	8009cfe <UART_SetConfig+0x7ae>
 8009724:	2308      	movs	r3, #8
 8009726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800972a:	e2e8      	b.n	8009cfe <UART_SetConfig+0x7ae>
 800972c:	2310      	movs	r3, #16
 800972e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009732:	e2e4      	b.n	8009cfe <UART_SetConfig+0x7ae>
 8009734:	2320      	movs	r3, #32
 8009736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800973a:	e2e0      	b.n	8009cfe <UART_SetConfig+0x7ae>
 800973c:	2340      	movs	r3, #64	; 0x40
 800973e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009742:	e2dc      	b.n	8009cfe <UART_SetConfig+0x7ae>
 8009744:	2380      	movs	r3, #128	; 0x80
 8009746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800974a:	e2d8      	b.n	8009cfe <UART_SetConfig+0x7ae>
 800974c:	697b      	ldr	r3, [r7, #20]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	4a4f      	ldr	r2, [pc, #316]	; (8009890 <UART_SetConfig+0x340>)
 8009752:	4293      	cmp	r3, r2
 8009754:	d130      	bne.n	80097b8 <UART_SetConfig+0x268>
 8009756:	4b4c      	ldr	r3, [pc, #304]	; (8009888 <UART_SetConfig+0x338>)
 8009758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800975a:	f003 0307 	and.w	r3, r3, #7
 800975e:	2b05      	cmp	r3, #5
 8009760:	d826      	bhi.n	80097b0 <UART_SetConfig+0x260>
 8009762:	a201      	add	r2, pc, #4	; (adr r2, 8009768 <UART_SetConfig+0x218>)
 8009764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009768:	08009781 	.word	0x08009781
 800976c:	08009789 	.word	0x08009789
 8009770:	08009791 	.word	0x08009791
 8009774:	08009799 	.word	0x08009799
 8009778:	080097a1 	.word	0x080097a1
 800977c:	080097a9 	.word	0x080097a9
 8009780:	2300      	movs	r3, #0
 8009782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009786:	e2ba      	b.n	8009cfe <UART_SetConfig+0x7ae>
 8009788:	2304      	movs	r3, #4
 800978a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800978e:	e2b6      	b.n	8009cfe <UART_SetConfig+0x7ae>
 8009790:	2308      	movs	r3, #8
 8009792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009796:	e2b2      	b.n	8009cfe <UART_SetConfig+0x7ae>
 8009798:	2310      	movs	r3, #16
 800979a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800979e:	e2ae      	b.n	8009cfe <UART_SetConfig+0x7ae>
 80097a0:	2320      	movs	r3, #32
 80097a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097a6:	e2aa      	b.n	8009cfe <UART_SetConfig+0x7ae>
 80097a8:	2340      	movs	r3, #64	; 0x40
 80097aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097ae:	e2a6      	b.n	8009cfe <UART_SetConfig+0x7ae>
 80097b0:	2380      	movs	r3, #128	; 0x80
 80097b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097b6:	e2a2      	b.n	8009cfe <UART_SetConfig+0x7ae>
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	4a35      	ldr	r2, [pc, #212]	; (8009894 <UART_SetConfig+0x344>)
 80097be:	4293      	cmp	r3, r2
 80097c0:	d130      	bne.n	8009824 <UART_SetConfig+0x2d4>
 80097c2:	4b31      	ldr	r3, [pc, #196]	; (8009888 <UART_SetConfig+0x338>)
 80097c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097c6:	f003 0307 	and.w	r3, r3, #7
 80097ca:	2b05      	cmp	r3, #5
 80097cc:	d826      	bhi.n	800981c <UART_SetConfig+0x2cc>
 80097ce:	a201      	add	r2, pc, #4	; (adr r2, 80097d4 <UART_SetConfig+0x284>)
 80097d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097d4:	080097ed 	.word	0x080097ed
 80097d8:	080097f5 	.word	0x080097f5
 80097dc:	080097fd 	.word	0x080097fd
 80097e0:	08009805 	.word	0x08009805
 80097e4:	0800980d 	.word	0x0800980d
 80097e8:	08009815 	.word	0x08009815
 80097ec:	2300      	movs	r3, #0
 80097ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097f2:	e284      	b.n	8009cfe <UART_SetConfig+0x7ae>
 80097f4:	2304      	movs	r3, #4
 80097f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097fa:	e280      	b.n	8009cfe <UART_SetConfig+0x7ae>
 80097fc:	2308      	movs	r3, #8
 80097fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009802:	e27c      	b.n	8009cfe <UART_SetConfig+0x7ae>
 8009804:	2310      	movs	r3, #16
 8009806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800980a:	e278      	b.n	8009cfe <UART_SetConfig+0x7ae>
 800980c:	2320      	movs	r3, #32
 800980e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009812:	e274      	b.n	8009cfe <UART_SetConfig+0x7ae>
 8009814:	2340      	movs	r3, #64	; 0x40
 8009816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800981a:	e270      	b.n	8009cfe <UART_SetConfig+0x7ae>
 800981c:	2380      	movs	r3, #128	; 0x80
 800981e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009822:	e26c      	b.n	8009cfe <UART_SetConfig+0x7ae>
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4a1b      	ldr	r2, [pc, #108]	; (8009898 <UART_SetConfig+0x348>)
 800982a:	4293      	cmp	r3, r2
 800982c:	d142      	bne.n	80098b4 <UART_SetConfig+0x364>
 800982e:	4b16      	ldr	r3, [pc, #88]	; (8009888 <UART_SetConfig+0x338>)
 8009830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009832:	f003 0307 	and.w	r3, r3, #7
 8009836:	2b05      	cmp	r3, #5
 8009838:	d838      	bhi.n	80098ac <UART_SetConfig+0x35c>
 800983a:	a201      	add	r2, pc, #4	; (adr r2, 8009840 <UART_SetConfig+0x2f0>)
 800983c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009840:	08009859 	.word	0x08009859
 8009844:	08009861 	.word	0x08009861
 8009848:	08009869 	.word	0x08009869
 800984c:	08009871 	.word	0x08009871
 8009850:	0800989d 	.word	0x0800989d
 8009854:	080098a5 	.word	0x080098a5
 8009858:	2300      	movs	r3, #0
 800985a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800985e:	e24e      	b.n	8009cfe <UART_SetConfig+0x7ae>
 8009860:	2304      	movs	r3, #4
 8009862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009866:	e24a      	b.n	8009cfe <UART_SetConfig+0x7ae>
 8009868:	2308      	movs	r3, #8
 800986a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800986e:	e246      	b.n	8009cfe <UART_SetConfig+0x7ae>
 8009870:	2310      	movs	r3, #16
 8009872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009876:	e242      	b.n	8009cfe <UART_SetConfig+0x7ae>
 8009878:	cfff69f3 	.word	0xcfff69f3
 800987c:	58000c00 	.word	0x58000c00
 8009880:	11fff4ff 	.word	0x11fff4ff
 8009884:	40011000 	.word	0x40011000
 8009888:	58024400 	.word	0x58024400
 800988c:	40004400 	.word	0x40004400
 8009890:	40004800 	.word	0x40004800
 8009894:	40004c00 	.word	0x40004c00
 8009898:	40005000 	.word	0x40005000
 800989c:	2320      	movs	r3, #32
 800989e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098a2:	e22c      	b.n	8009cfe <UART_SetConfig+0x7ae>
 80098a4:	2340      	movs	r3, #64	; 0x40
 80098a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098aa:	e228      	b.n	8009cfe <UART_SetConfig+0x7ae>
 80098ac:	2380      	movs	r3, #128	; 0x80
 80098ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098b2:	e224      	b.n	8009cfe <UART_SetConfig+0x7ae>
 80098b4:	697b      	ldr	r3, [r7, #20]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	4ab1      	ldr	r2, [pc, #708]	; (8009b80 <UART_SetConfig+0x630>)
 80098ba:	4293      	cmp	r3, r2
 80098bc:	d176      	bne.n	80099ac <UART_SetConfig+0x45c>
 80098be:	4bb1      	ldr	r3, [pc, #708]	; (8009b84 <UART_SetConfig+0x634>)
 80098c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80098c6:	2b28      	cmp	r3, #40	; 0x28
 80098c8:	d86c      	bhi.n	80099a4 <UART_SetConfig+0x454>
 80098ca:	a201      	add	r2, pc, #4	; (adr r2, 80098d0 <UART_SetConfig+0x380>)
 80098cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098d0:	08009975 	.word	0x08009975
 80098d4:	080099a5 	.word	0x080099a5
 80098d8:	080099a5 	.word	0x080099a5
 80098dc:	080099a5 	.word	0x080099a5
 80098e0:	080099a5 	.word	0x080099a5
 80098e4:	080099a5 	.word	0x080099a5
 80098e8:	080099a5 	.word	0x080099a5
 80098ec:	080099a5 	.word	0x080099a5
 80098f0:	0800997d 	.word	0x0800997d
 80098f4:	080099a5 	.word	0x080099a5
 80098f8:	080099a5 	.word	0x080099a5
 80098fc:	080099a5 	.word	0x080099a5
 8009900:	080099a5 	.word	0x080099a5
 8009904:	080099a5 	.word	0x080099a5
 8009908:	080099a5 	.word	0x080099a5
 800990c:	080099a5 	.word	0x080099a5
 8009910:	08009985 	.word	0x08009985
 8009914:	080099a5 	.word	0x080099a5
 8009918:	080099a5 	.word	0x080099a5
 800991c:	080099a5 	.word	0x080099a5
 8009920:	080099a5 	.word	0x080099a5
 8009924:	080099a5 	.word	0x080099a5
 8009928:	080099a5 	.word	0x080099a5
 800992c:	080099a5 	.word	0x080099a5
 8009930:	0800998d 	.word	0x0800998d
 8009934:	080099a5 	.word	0x080099a5
 8009938:	080099a5 	.word	0x080099a5
 800993c:	080099a5 	.word	0x080099a5
 8009940:	080099a5 	.word	0x080099a5
 8009944:	080099a5 	.word	0x080099a5
 8009948:	080099a5 	.word	0x080099a5
 800994c:	080099a5 	.word	0x080099a5
 8009950:	08009995 	.word	0x08009995
 8009954:	080099a5 	.word	0x080099a5
 8009958:	080099a5 	.word	0x080099a5
 800995c:	080099a5 	.word	0x080099a5
 8009960:	080099a5 	.word	0x080099a5
 8009964:	080099a5 	.word	0x080099a5
 8009968:	080099a5 	.word	0x080099a5
 800996c:	080099a5 	.word	0x080099a5
 8009970:	0800999d 	.word	0x0800999d
 8009974:	2301      	movs	r3, #1
 8009976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800997a:	e1c0      	b.n	8009cfe <UART_SetConfig+0x7ae>
 800997c:	2304      	movs	r3, #4
 800997e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009982:	e1bc      	b.n	8009cfe <UART_SetConfig+0x7ae>
 8009984:	2308      	movs	r3, #8
 8009986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800998a:	e1b8      	b.n	8009cfe <UART_SetConfig+0x7ae>
 800998c:	2310      	movs	r3, #16
 800998e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009992:	e1b4      	b.n	8009cfe <UART_SetConfig+0x7ae>
 8009994:	2320      	movs	r3, #32
 8009996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800999a:	e1b0      	b.n	8009cfe <UART_SetConfig+0x7ae>
 800999c:	2340      	movs	r3, #64	; 0x40
 800999e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099a2:	e1ac      	b.n	8009cfe <UART_SetConfig+0x7ae>
 80099a4:	2380      	movs	r3, #128	; 0x80
 80099a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099aa:	e1a8      	b.n	8009cfe <UART_SetConfig+0x7ae>
 80099ac:	697b      	ldr	r3, [r7, #20]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	4a75      	ldr	r2, [pc, #468]	; (8009b88 <UART_SetConfig+0x638>)
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d130      	bne.n	8009a18 <UART_SetConfig+0x4c8>
 80099b6:	4b73      	ldr	r3, [pc, #460]	; (8009b84 <UART_SetConfig+0x634>)
 80099b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099ba:	f003 0307 	and.w	r3, r3, #7
 80099be:	2b05      	cmp	r3, #5
 80099c0:	d826      	bhi.n	8009a10 <UART_SetConfig+0x4c0>
 80099c2:	a201      	add	r2, pc, #4	; (adr r2, 80099c8 <UART_SetConfig+0x478>)
 80099c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099c8:	080099e1 	.word	0x080099e1
 80099cc:	080099e9 	.word	0x080099e9
 80099d0:	080099f1 	.word	0x080099f1
 80099d4:	080099f9 	.word	0x080099f9
 80099d8:	08009a01 	.word	0x08009a01
 80099dc:	08009a09 	.word	0x08009a09
 80099e0:	2300      	movs	r3, #0
 80099e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099e6:	e18a      	b.n	8009cfe <UART_SetConfig+0x7ae>
 80099e8:	2304      	movs	r3, #4
 80099ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099ee:	e186      	b.n	8009cfe <UART_SetConfig+0x7ae>
 80099f0:	2308      	movs	r3, #8
 80099f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099f6:	e182      	b.n	8009cfe <UART_SetConfig+0x7ae>
 80099f8:	2310      	movs	r3, #16
 80099fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099fe:	e17e      	b.n	8009cfe <UART_SetConfig+0x7ae>
 8009a00:	2320      	movs	r3, #32
 8009a02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a06:	e17a      	b.n	8009cfe <UART_SetConfig+0x7ae>
 8009a08:	2340      	movs	r3, #64	; 0x40
 8009a0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a0e:	e176      	b.n	8009cfe <UART_SetConfig+0x7ae>
 8009a10:	2380      	movs	r3, #128	; 0x80
 8009a12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a16:	e172      	b.n	8009cfe <UART_SetConfig+0x7ae>
 8009a18:	697b      	ldr	r3, [r7, #20]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	4a5b      	ldr	r2, [pc, #364]	; (8009b8c <UART_SetConfig+0x63c>)
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	d130      	bne.n	8009a84 <UART_SetConfig+0x534>
 8009a22:	4b58      	ldr	r3, [pc, #352]	; (8009b84 <UART_SetConfig+0x634>)
 8009a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a26:	f003 0307 	and.w	r3, r3, #7
 8009a2a:	2b05      	cmp	r3, #5
 8009a2c:	d826      	bhi.n	8009a7c <UART_SetConfig+0x52c>
 8009a2e:	a201      	add	r2, pc, #4	; (adr r2, 8009a34 <UART_SetConfig+0x4e4>)
 8009a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a34:	08009a4d 	.word	0x08009a4d
 8009a38:	08009a55 	.word	0x08009a55
 8009a3c:	08009a5d 	.word	0x08009a5d
 8009a40:	08009a65 	.word	0x08009a65
 8009a44:	08009a6d 	.word	0x08009a6d
 8009a48:	08009a75 	.word	0x08009a75
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a52:	e154      	b.n	8009cfe <UART_SetConfig+0x7ae>
 8009a54:	2304      	movs	r3, #4
 8009a56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a5a:	e150      	b.n	8009cfe <UART_SetConfig+0x7ae>
 8009a5c:	2308      	movs	r3, #8
 8009a5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a62:	e14c      	b.n	8009cfe <UART_SetConfig+0x7ae>
 8009a64:	2310      	movs	r3, #16
 8009a66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a6a:	e148      	b.n	8009cfe <UART_SetConfig+0x7ae>
 8009a6c:	2320      	movs	r3, #32
 8009a6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a72:	e144      	b.n	8009cfe <UART_SetConfig+0x7ae>
 8009a74:	2340      	movs	r3, #64	; 0x40
 8009a76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a7a:	e140      	b.n	8009cfe <UART_SetConfig+0x7ae>
 8009a7c:	2380      	movs	r3, #128	; 0x80
 8009a7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a82:	e13c      	b.n	8009cfe <UART_SetConfig+0x7ae>
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	4a41      	ldr	r2, [pc, #260]	; (8009b90 <UART_SetConfig+0x640>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	f040 8082 	bne.w	8009b94 <UART_SetConfig+0x644>
 8009a90:	4b3c      	ldr	r3, [pc, #240]	; (8009b84 <UART_SetConfig+0x634>)
 8009a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a94:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a98:	2b28      	cmp	r3, #40	; 0x28
 8009a9a:	d86d      	bhi.n	8009b78 <UART_SetConfig+0x628>
 8009a9c:	a201      	add	r2, pc, #4	; (adr r2, 8009aa4 <UART_SetConfig+0x554>)
 8009a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aa2:	bf00      	nop
 8009aa4:	08009b49 	.word	0x08009b49
 8009aa8:	08009b79 	.word	0x08009b79
 8009aac:	08009b79 	.word	0x08009b79
 8009ab0:	08009b79 	.word	0x08009b79
 8009ab4:	08009b79 	.word	0x08009b79
 8009ab8:	08009b79 	.word	0x08009b79
 8009abc:	08009b79 	.word	0x08009b79
 8009ac0:	08009b79 	.word	0x08009b79
 8009ac4:	08009b51 	.word	0x08009b51
 8009ac8:	08009b79 	.word	0x08009b79
 8009acc:	08009b79 	.word	0x08009b79
 8009ad0:	08009b79 	.word	0x08009b79
 8009ad4:	08009b79 	.word	0x08009b79
 8009ad8:	08009b79 	.word	0x08009b79
 8009adc:	08009b79 	.word	0x08009b79
 8009ae0:	08009b79 	.word	0x08009b79
 8009ae4:	08009b59 	.word	0x08009b59
 8009ae8:	08009b79 	.word	0x08009b79
 8009aec:	08009b79 	.word	0x08009b79
 8009af0:	08009b79 	.word	0x08009b79
 8009af4:	08009b79 	.word	0x08009b79
 8009af8:	08009b79 	.word	0x08009b79
 8009afc:	08009b79 	.word	0x08009b79
 8009b00:	08009b79 	.word	0x08009b79
 8009b04:	08009b61 	.word	0x08009b61
 8009b08:	08009b79 	.word	0x08009b79
 8009b0c:	08009b79 	.word	0x08009b79
 8009b10:	08009b79 	.word	0x08009b79
 8009b14:	08009b79 	.word	0x08009b79
 8009b18:	08009b79 	.word	0x08009b79
 8009b1c:	08009b79 	.word	0x08009b79
 8009b20:	08009b79 	.word	0x08009b79
 8009b24:	08009b69 	.word	0x08009b69
 8009b28:	08009b79 	.word	0x08009b79
 8009b2c:	08009b79 	.word	0x08009b79
 8009b30:	08009b79 	.word	0x08009b79
 8009b34:	08009b79 	.word	0x08009b79
 8009b38:	08009b79 	.word	0x08009b79
 8009b3c:	08009b79 	.word	0x08009b79
 8009b40:	08009b79 	.word	0x08009b79
 8009b44:	08009b71 	.word	0x08009b71
 8009b48:	2301      	movs	r3, #1
 8009b4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b4e:	e0d6      	b.n	8009cfe <UART_SetConfig+0x7ae>
 8009b50:	2304      	movs	r3, #4
 8009b52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b56:	e0d2      	b.n	8009cfe <UART_SetConfig+0x7ae>
 8009b58:	2308      	movs	r3, #8
 8009b5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b5e:	e0ce      	b.n	8009cfe <UART_SetConfig+0x7ae>
 8009b60:	2310      	movs	r3, #16
 8009b62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b66:	e0ca      	b.n	8009cfe <UART_SetConfig+0x7ae>
 8009b68:	2320      	movs	r3, #32
 8009b6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b6e:	e0c6      	b.n	8009cfe <UART_SetConfig+0x7ae>
 8009b70:	2340      	movs	r3, #64	; 0x40
 8009b72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b76:	e0c2      	b.n	8009cfe <UART_SetConfig+0x7ae>
 8009b78:	2380      	movs	r3, #128	; 0x80
 8009b7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b7e:	e0be      	b.n	8009cfe <UART_SetConfig+0x7ae>
 8009b80:	40011400 	.word	0x40011400
 8009b84:	58024400 	.word	0x58024400
 8009b88:	40007800 	.word	0x40007800
 8009b8c:	40007c00 	.word	0x40007c00
 8009b90:	40011800 	.word	0x40011800
 8009b94:	697b      	ldr	r3, [r7, #20]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	4aad      	ldr	r2, [pc, #692]	; (8009e50 <UART_SetConfig+0x900>)
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	d176      	bne.n	8009c8c <UART_SetConfig+0x73c>
 8009b9e:	4bad      	ldr	r3, [pc, #692]	; (8009e54 <UART_SetConfig+0x904>)
 8009ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ba2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009ba6:	2b28      	cmp	r3, #40	; 0x28
 8009ba8:	d86c      	bhi.n	8009c84 <UART_SetConfig+0x734>
 8009baa:	a201      	add	r2, pc, #4	; (adr r2, 8009bb0 <UART_SetConfig+0x660>)
 8009bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bb0:	08009c55 	.word	0x08009c55
 8009bb4:	08009c85 	.word	0x08009c85
 8009bb8:	08009c85 	.word	0x08009c85
 8009bbc:	08009c85 	.word	0x08009c85
 8009bc0:	08009c85 	.word	0x08009c85
 8009bc4:	08009c85 	.word	0x08009c85
 8009bc8:	08009c85 	.word	0x08009c85
 8009bcc:	08009c85 	.word	0x08009c85
 8009bd0:	08009c5d 	.word	0x08009c5d
 8009bd4:	08009c85 	.word	0x08009c85
 8009bd8:	08009c85 	.word	0x08009c85
 8009bdc:	08009c85 	.word	0x08009c85
 8009be0:	08009c85 	.word	0x08009c85
 8009be4:	08009c85 	.word	0x08009c85
 8009be8:	08009c85 	.word	0x08009c85
 8009bec:	08009c85 	.word	0x08009c85
 8009bf0:	08009c65 	.word	0x08009c65
 8009bf4:	08009c85 	.word	0x08009c85
 8009bf8:	08009c85 	.word	0x08009c85
 8009bfc:	08009c85 	.word	0x08009c85
 8009c00:	08009c85 	.word	0x08009c85
 8009c04:	08009c85 	.word	0x08009c85
 8009c08:	08009c85 	.word	0x08009c85
 8009c0c:	08009c85 	.word	0x08009c85
 8009c10:	08009c6d 	.word	0x08009c6d
 8009c14:	08009c85 	.word	0x08009c85
 8009c18:	08009c85 	.word	0x08009c85
 8009c1c:	08009c85 	.word	0x08009c85
 8009c20:	08009c85 	.word	0x08009c85
 8009c24:	08009c85 	.word	0x08009c85
 8009c28:	08009c85 	.word	0x08009c85
 8009c2c:	08009c85 	.word	0x08009c85
 8009c30:	08009c75 	.word	0x08009c75
 8009c34:	08009c85 	.word	0x08009c85
 8009c38:	08009c85 	.word	0x08009c85
 8009c3c:	08009c85 	.word	0x08009c85
 8009c40:	08009c85 	.word	0x08009c85
 8009c44:	08009c85 	.word	0x08009c85
 8009c48:	08009c85 	.word	0x08009c85
 8009c4c:	08009c85 	.word	0x08009c85
 8009c50:	08009c7d 	.word	0x08009c7d
 8009c54:	2301      	movs	r3, #1
 8009c56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c5a:	e050      	b.n	8009cfe <UART_SetConfig+0x7ae>
 8009c5c:	2304      	movs	r3, #4
 8009c5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c62:	e04c      	b.n	8009cfe <UART_SetConfig+0x7ae>
 8009c64:	2308      	movs	r3, #8
 8009c66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c6a:	e048      	b.n	8009cfe <UART_SetConfig+0x7ae>
 8009c6c:	2310      	movs	r3, #16
 8009c6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c72:	e044      	b.n	8009cfe <UART_SetConfig+0x7ae>
 8009c74:	2320      	movs	r3, #32
 8009c76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c7a:	e040      	b.n	8009cfe <UART_SetConfig+0x7ae>
 8009c7c:	2340      	movs	r3, #64	; 0x40
 8009c7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c82:	e03c      	b.n	8009cfe <UART_SetConfig+0x7ae>
 8009c84:	2380      	movs	r3, #128	; 0x80
 8009c86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c8a:	e038      	b.n	8009cfe <UART_SetConfig+0x7ae>
 8009c8c:	697b      	ldr	r3, [r7, #20]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	4a71      	ldr	r2, [pc, #452]	; (8009e58 <UART_SetConfig+0x908>)
 8009c92:	4293      	cmp	r3, r2
 8009c94:	d130      	bne.n	8009cf8 <UART_SetConfig+0x7a8>
 8009c96:	4b6f      	ldr	r3, [pc, #444]	; (8009e54 <UART_SetConfig+0x904>)
 8009c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c9a:	f003 0307 	and.w	r3, r3, #7
 8009c9e:	2b05      	cmp	r3, #5
 8009ca0:	d826      	bhi.n	8009cf0 <UART_SetConfig+0x7a0>
 8009ca2:	a201      	add	r2, pc, #4	; (adr r2, 8009ca8 <UART_SetConfig+0x758>)
 8009ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ca8:	08009cc1 	.word	0x08009cc1
 8009cac:	08009cc9 	.word	0x08009cc9
 8009cb0:	08009cd1 	.word	0x08009cd1
 8009cb4:	08009cd9 	.word	0x08009cd9
 8009cb8:	08009ce1 	.word	0x08009ce1
 8009cbc:	08009ce9 	.word	0x08009ce9
 8009cc0:	2302      	movs	r3, #2
 8009cc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cc6:	e01a      	b.n	8009cfe <UART_SetConfig+0x7ae>
 8009cc8:	2304      	movs	r3, #4
 8009cca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cce:	e016      	b.n	8009cfe <UART_SetConfig+0x7ae>
 8009cd0:	2308      	movs	r3, #8
 8009cd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cd6:	e012      	b.n	8009cfe <UART_SetConfig+0x7ae>
 8009cd8:	2310      	movs	r3, #16
 8009cda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cde:	e00e      	b.n	8009cfe <UART_SetConfig+0x7ae>
 8009ce0:	2320      	movs	r3, #32
 8009ce2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ce6:	e00a      	b.n	8009cfe <UART_SetConfig+0x7ae>
 8009ce8:	2340      	movs	r3, #64	; 0x40
 8009cea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cee:	e006      	b.n	8009cfe <UART_SetConfig+0x7ae>
 8009cf0:	2380      	movs	r3, #128	; 0x80
 8009cf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cf6:	e002      	b.n	8009cfe <UART_SetConfig+0x7ae>
 8009cf8:	2380      	movs	r3, #128	; 0x80
 8009cfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009cfe:	697b      	ldr	r3, [r7, #20]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	4a55      	ldr	r2, [pc, #340]	; (8009e58 <UART_SetConfig+0x908>)
 8009d04:	4293      	cmp	r3, r2
 8009d06:	f040 80f8 	bne.w	8009efa <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009d0a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009d0e:	2b20      	cmp	r3, #32
 8009d10:	dc46      	bgt.n	8009da0 <UART_SetConfig+0x850>
 8009d12:	2b02      	cmp	r3, #2
 8009d14:	db75      	blt.n	8009e02 <UART_SetConfig+0x8b2>
 8009d16:	3b02      	subs	r3, #2
 8009d18:	2b1e      	cmp	r3, #30
 8009d1a:	d872      	bhi.n	8009e02 <UART_SetConfig+0x8b2>
 8009d1c:	a201      	add	r2, pc, #4	; (adr r2, 8009d24 <UART_SetConfig+0x7d4>)
 8009d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d22:	bf00      	nop
 8009d24:	08009da7 	.word	0x08009da7
 8009d28:	08009e03 	.word	0x08009e03
 8009d2c:	08009daf 	.word	0x08009daf
 8009d30:	08009e03 	.word	0x08009e03
 8009d34:	08009e03 	.word	0x08009e03
 8009d38:	08009e03 	.word	0x08009e03
 8009d3c:	08009dbf 	.word	0x08009dbf
 8009d40:	08009e03 	.word	0x08009e03
 8009d44:	08009e03 	.word	0x08009e03
 8009d48:	08009e03 	.word	0x08009e03
 8009d4c:	08009e03 	.word	0x08009e03
 8009d50:	08009e03 	.word	0x08009e03
 8009d54:	08009e03 	.word	0x08009e03
 8009d58:	08009e03 	.word	0x08009e03
 8009d5c:	08009dcf 	.word	0x08009dcf
 8009d60:	08009e03 	.word	0x08009e03
 8009d64:	08009e03 	.word	0x08009e03
 8009d68:	08009e03 	.word	0x08009e03
 8009d6c:	08009e03 	.word	0x08009e03
 8009d70:	08009e03 	.word	0x08009e03
 8009d74:	08009e03 	.word	0x08009e03
 8009d78:	08009e03 	.word	0x08009e03
 8009d7c:	08009e03 	.word	0x08009e03
 8009d80:	08009e03 	.word	0x08009e03
 8009d84:	08009e03 	.word	0x08009e03
 8009d88:	08009e03 	.word	0x08009e03
 8009d8c:	08009e03 	.word	0x08009e03
 8009d90:	08009e03 	.word	0x08009e03
 8009d94:	08009e03 	.word	0x08009e03
 8009d98:	08009e03 	.word	0x08009e03
 8009d9c:	08009df5 	.word	0x08009df5
 8009da0:	2b40      	cmp	r3, #64	; 0x40
 8009da2:	d02a      	beq.n	8009dfa <UART_SetConfig+0x8aa>
 8009da4:	e02d      	b.n	8009e02 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009da6:	f7fd ff3d 	bl	8007c24 <HAL_RCCEx_GetD3PCLK1Freq>
 8009daa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009dac:	e02f      	b.n	8009e0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009dae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009db2:	4618      	mov	r0, r3
 8009db4:	f7fd ff4c 	bl	8007c50 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009dbc:	e027      	b.n	8009e0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009dbe:	f107 0318 	add.w	r3, r7, #24
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f7fe f898 	bl	8007ef8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009dc8:	69fb      	ldr	r3, [r7, #28]
 8009dca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009dcc:	e01f      	b.n	8009e0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009dce:	4b21      	ldr	r3, [pc, #132]	; (8009e54 <UART_SetConfig+0x904>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f003 0320 	and.w	r3, r3, #32
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d009      	beq.n	8009dee <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009dda:	4b1e      	ldr	r3, [pc, #120]	; (8009e54 <UART_SetConfig+0x904>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	08db      	lsrs	r3, r3, #3
 8009de0:	f003 0303 	and.w	r3, r3, #3
 8009de4:	4a1d      	ldr	r2, [pc, #116]	; (8009e5c <UART_SetConfig+0x90c>)
 8009de6:	fa22 f303 	lsr.w	r3, r2, r3
 8009dea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009dec:	e00f      	b.n	8009e0e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009dee:	4b1b      	ldr	r3, [pc, #108]	; (8009e5c <UART_SetConfig+0x90c>)
 8009df0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009df2:	e00c      	b.n	8009e0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009df4:	4b1a      	ldr	r3, [pc, #104]	; (8009e60 <UART_SetConfig+0x910>)
 8009df6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009df8:	e009      	b.n	8009e0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009dfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e00:	e005      	b.n	8009e0e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009e02:	2300      	movs	r3, #0
 8009e04:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009e06:	2301      	movs	r3, #1
 8009e08:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009e0c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009e0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	f000 81ee 	beq.w	800a1f2 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e1a:	4a12      	ldr	r2, [pc, #72]	; (8009e64 <UART_SetConfig+0x914>)
 8009e1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e20:	461a      	mov	r2, r3
 8009e22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e24:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e28:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009e2a:	697b      	ldr	r3, [r7, #20]
 8009e2c:	685a      	ldr	r2, [r3, #4]
 8009e2e:	4613      	mov	r3, r2
 8009e30:	005b      	lsls	r3, r3, #1
 8009e32:	4413      	add	r3, r2
 8009e34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e36:	429a      	cmp	r2, r3
 8009e38:	d305      	bcc.n	8009e46 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009e3a:	697b      	ldr	r3, [r7, #20]
 8009e3c:	685b      	ldr	r3, [r3, #4]
 8009e3e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009e40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e42:	429a      	cmp	r2, r3
 8009e44:	d910      	bls.n	8009e68 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8009e46:	2301      	movs	r3, #1
 8009e48:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009e4c:	e1d1      	b.n	800a1f2 <UART_SetConfig+0xca2>
 8009e4e:	bf00      	nop
 8009e50:	40011c00 	.word	0x40011c00
 8009e54:	58024400 	.word	0x58024400
 8009e58:	58000c00 	.word	0x58000c00
 8009e5c:	03d09000 	.word	0x03d09000
 8009e60:	003d0900 	.word	0x003d0900
 8009e64:	08010ffc 	.word	0x08010ffc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	60bb      	str	r3, [r7, #8]
 8009e6e:	60fa      	str	r2, [r7, #12]
 8009e70:	697b      	ldr	r3, [r7, #20]
 8009e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e74:	4ac0      	ldr	r2, [pc, #768]	; (800a178 <UART_SetConfig+0xc28>)
 8009e76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e7a:	b29b      	uxth	r3, r3
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	603b      	str	r3, [r7, #0]
 8009e80:	607a      	str	r2, [r7, #4]
 8009e82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e86:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009e8a:	f7f6 fa99 	bl	80003c0 <__aeabi_uldivmod>
 8009e8e:	4602      	mov	r2, r0
 8009e90:	460b      	mov	r3, r1
 8009e92:	4610      	mov	r0, r2
 8009e94:	4619      	mov	r1, r3
 8009e96:	f04f 0200 	mov.w	r2, #0
 8009e9a:	f04f 0300 	mov.w	r3, #0
 8009e9e:	020b      	lsls	r3, r1, #8
 8009ea0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009ea4:	0202      	lsls	r2, r0, #8
 8009ea6:	6979      	ldr	r1, [r7, #20]
 8009ea8:	6849      	ldr	r1, [r1, #4]
 8009eaa:	0849      	lsrs	r1, r1, #1
 8009eac:	2000      	movs	r0, #0
 8009eae:	460c      	mov	r4, r1
 8009eb0:	4605      	mov	r5, r0
 8009eb2:	eb12 0804 	adds.w	r8, r2, r4
 8009eb6:	eb43 0905 	adc.w	r9, r3, r5
 8009eba:	697b      	ldr	r3, [r7, #20]
 8009ebc:	685b      	ldr	r3, [r3, #4]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	469a      	mov	sl, r3
 8009ec2:	4693      	mov	fp, r2
 8009ec4:	4652      	mov	r2, sl
 8009ec6:	465b      	mov	r3, fp
 8009ec8:	4640      	mov	r0, r8
 8009eca:	4649      	mov	r1, r9
 8009ecc:	f7f6 fa78 	bl	80003c0 <__aeabi_uldivmod>
 8009ed0:	4602      	mov	r2, r0
 8009ed2:	460b      	mov	r3, r1
 8009ed4:	4613      	mov	r3, r2
 8009ed6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009ede:	d308      	bcc.n	8009ef2 <UART_SetConfig+0x9a2>
 8009ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ee2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ee6:	d204      	bcs.n	8009ef2 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8009ee8:	697b      	ldr	r3, [r7, #20]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009eee:	60da      	str	r2, [r3, #12]
 8009ef0:	e17f      	b.n	800a1f2 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009ef8:	e17b      	b.n	800a1f2 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009efa:	697b      	ldr	r3, [r7, #20]
 8009efc:	69db      	ldr	r3, [r3, #28]
 8009efe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f02:	f040 80bd 	bne.w	800a080 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8009f06:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009f0a:	2b20      	cmp	r3, #32
 8009f0c:	dc48      	bgt.n	8009fa0 <UART_SetConfig+0xa50>
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	db7b      	blt.n	800a00a <UART_SetConfig+0xaba>
 8009f12:	2b20      	cmp	r3, #32
 8009f14:	d879      	bhi.n	800a00a <UART_SetConfig+0xaba>
 8009f16:	a201      	add	r2, pc, #4	; (adr r2, 8009f1c <UART_SetConfig+0x9cc>)
 8009f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f1c:	08009fa7 	.word	0x08009fa7
 8009f20:	08009faf 	.word	0x08009faf
 8009f24:	0800a00b 	.word	0x0800a00b
 8009f28:	0800a00b 	.word	0x0800a00b
 8009f2c:	08009fb7 	.word	0x08009fb7
 8009f30:	0800a00b 	.word	0x0800a00b
 8009f34:	0800a00b 	.word	0x0800a00b
 8009f38:	0800a00b 	.word	0x0800a00b
 8009f3c:	08009fc7 	.word	0x08009fc7
 8009f40:	0800a00b 	.word	0x0800a00b
 8009f44:	0800a00b 	.word	0x0800a00b
 8009f48:	0800a00b 	.word	0x0800a00b
 8009f4c:	0800a00b 	.word	0x0800a00b
 8009f50:	0800a00b 	.word	0x0800a00b
 8009f54:	0800a00b 	.word	0x0800a00b
 8009f58:	0800a00b 	.word	0x0800a00b
 8009f5c:	08009fd7 	.word	0x08009fd7
 8009f60:	0800a00b 	.word	0x0800a00b
 8009f64:	0800a00b 	.word	0x0800a00b
 8009f68:	0800a00b 	.word	0x0800a00b
 8009f6c:	0800a00b 	.word	0x0800a00b
 8009f70:	0800a00b 	.word	0x0800a00b
 8009f74:	0800a00b 	.word	0x0800a00b
 8009f78:	0800a00b 	.word	0x0800a00b
 8009f7c:	0800a00b 	.word	0x0800a00b
 8009f80:	0800a00b 	.word	0x0800a00b
 8009f84:	0800a00b 	.word	0x0800a00b
 8009f88:	0800a00b 	.word	0x0800a00b
 8009f8c:	0800a00b 	.word	0x0800a00b
 8009f90:	0800a00b 	.word	0x0800a00b
 8009f94:	0800a00b 	.word	0x0800a00b
 8009f98:	0800a00b 	.word	0x0800a00b
 8009f9c:	08009ffd 	.word	0x08009ffd
 8009fa0:	2b40      	cmp	r3, #64	; 0x40
 8009fa2:	d02e      	beq.n	800a002 <UART_SetConfig+0xab2>
 8009fa4:	e031      	b.n	800a00a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009fa6:	f7fc fc2f 	bl	8006808 <HAL_RCC_GetPCLK1Freq>
 8009faa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009fac:	e033      	b.n	800a016 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009fae:	f7fc fc41 	bl	8006834 <HAL_RCC_GetPCLK2Freq>
 8009fb2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009fb4:	e02f      	b.n	800a016 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009fb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f7fd fe48 	bl	8007c50 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009fc4:	e027      	b.n	800a016 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009fc6:	f107 0318 	add.w	r3, r7, #24
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f7fd ff94 	bl	8007ef8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009fd0:	69fb      	ldr	r3, [r7, #28]
 8009fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009fd4:	e01f      	b.n	800a016 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009fd6:	4b69      	ldr	r3, [pc, #420]	; (800a17c <UART_SetConfig+0xc2c>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	f003 0320 	and.w	r3, r3, #32
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d009      	beq.n	8009ff6 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009fe2:	4b66      	ldr	r3, [pc, #408]	; (800a17c <UART_SetConfig+0xc2c>)
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	08db      	lsrs	r3, r3, #3
 8009fe8:	f003 0303 	and.w	r3, r3, #3
 8009fec:	4a64      	ldr	r2, [pc, #400]	; (800a180 <UART_SetConfig+0xc30>)
 8009fee:	fa22 f303 	lsr.w	r3, r2, r3
 8009ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009ff4:	e00f      	b.n	800a016 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8009ff6:	4b62      	ldr	r3, [pc, #392]	; (800a180 <UART_SetConfig+0xc30>)
 8009ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ffa:	e00c      	b.n	800a016 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009ffc:	4b61      	ldr	r3, [pc, #388]	; (800a184 <UART_SetConfig+0xc34>)
 8009ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a000:	e009      	b.n	800a016 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a002:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a006:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a008:	e005      	b.n	800a016 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800a00a:	2300      	movs	r3, #0
 800a00c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a00e:	2301      	movs	r3, #1
 800a010:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a014:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a016:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a018:	2b00      	cmp	r3, #0
 800a01a:	f000 80ea 	beq.w	800a1f2 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a022:	4a55      	ldr	r2, [pc, #340]	; (800a178 <UART_SetConfig+0xc28>)
 800a024:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a028:	461a      	mov	r2, r3
 800a02a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a02c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a030:	005a      	lsls	r2, r3, #1
 800a032:	697b      	ldr	r3, [r7, #20]
 800a034:	685b      	ldr	r3, [r3, #4]
 800a036:	085b      	lsrs	r3, r3, #1
 800a038:	441a      	add	r2, r3
 800a03a:	697b      	ldr	r3, [r7, #20]
 800a03c:	685b      	ldr	r3, [r3, #4]
 800a03e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a042:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a046:	2b0f      	cmp	r3, #15
 800a048:	d916      	bls.n	800a078 <UART_SetConfig+0xb28>
 800a04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a04c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a050:	d212      	bcs.n	800a078 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a054:	b29b      	uxth	r3, r3
 800a056:	f023 030f 	bic.w	r3, r3, #15
 800a05a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a05c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a05e:	085b      	lsrs	r3, r3, #1
 800a060:	b29b      	uxth	r3, r3
 800a062:	f003 0307 	and.w	r3, r3, #7
 800a066:	b29a      	uxth	r2, r3
 800a068:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a06a:	4313      	orrs	r3, r2
 800a06c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800a06e:	697b      	ldr	r3, [r7, #20]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a074:	60da      	str	r2, [r3, #12]
 800a076:	e0bc      	b.n	800a1f2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a078:	2301      	movs	r3, #1
 800a07a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a07e:	e0b8      	b.n	800a1f2 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a080:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a084:	2b20      	cmp	r3, #32
 800a086:	dc4b      	bgt.n	800a120 <UART_SetConfig+0xbd0>
 800a088:	2b00      	cmp	r3, #0
 800a08a:	f2c0 8087 	blt.w	800a19c <UART_SetConfig+0xc4c>
 800a08e:	2b20      	cmp	r3, #32
 800a090:	f200 8084 	bhi.w	800a19c <UART_SetConfig+0xc4c>
 800a094:	a201      	add	r2, pc, #4	; (adr r2, 800a09c <UART_SetConfig+0xb4c>)
 800a096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a09a:	bf00      	nop
 800a09c:	0800a127 	.word	0x0800a127
 800a0a0:	0800a12f 	.word	0x0800a12f
 800a0a4:	0800a19d 	.word	0x0800a19d
 800a0a8:	0800a19d 	.word	0x0800a19d
 800a0ac:	0800a137 	.word	0x0800a137
 800a0b0:	0800a19d 	.word	0x0800a19d
 800a0b4:	0800a19d 	.word	0x0800a19d
 800a0b8:	0800a19d 	.word	0x0800a19d
 800a0bc:	0800a147 	.word	0x0800a147
 800a0c0:	0800a19d 	.word	0x0800a19d
 800a0c4:	0800a19d 	.word	0x0800a19d
 800a0c8:	0800a19d 	.word	0x0800a19d
 800a0cc:	0800a19d 	.word	0x0800a19d
 800a0d0:	0800a19d 	.word	0x0800a19d
 800a0d4:	0800a19d 	.word	0x0800a19d
 800a0d8:	0800a19d 	.word	0x0800a19d
 800a0dc:	0800a157 	.word	0x0800a157
 800a0e0:	0800a19d 	.word	0x0800a19d
 800a0e4:	0800a19d 	.word	0x0800a19d
 800a0e8:	0800a19d 	.word	0x0800a19d
 800a0ec:	0800a19d 	.word	0x0800a19d
 800a0f0:	0800a19d 	.word	0x0800a19d
 800a0f4:	0800a19d 	.word	0x0800a19d
 800a0f8:	0800a19d 	.word	0x0800a19d
 800a0fc:	0800a19d 	.word	0x0800a19d
 800a100:	0800a19d 	.word	0x0800a19d
 800a104:	0800a19d 	.word	0x0800a19d
 800a108:	0800a19d 	.word	0x0800a19d
 800a10c:	0800a19d 	.word	0x0800a19d
 800a110:	0800a19d 	.word	0x0800a19d
 800a114:	0800a19d 	.word	0x0800a19d
 800a118:	0800a19d 	.word	0x0800a19d
 800a11c:	0800a18f 	.word	0x0800a18f
 800a120:	2b40      	cmp	r3, #64	; 0x40
 800a122:	d037      	beq.n	800a194 <UART_SetConfig+0xc44>
 800a124:	e03a      	b.n	800a19c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a126:	f7fc fb6f 	bl	8006808 <HAL_RCC_GetPCLK1Freq>
 800a12a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a12c:	e03c      	b.n	800a1a8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a12e:	f7fc fb81 	bl	8006834 <HAL_RCC_GetPCLK2Freq>
 800a132:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a134:	e038      	b.n	800a1a8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a136:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a13a:	4618      	mov	r0, r3
 800a13c:	f7fd fd88 	bl	8007c50 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a142:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a144:	e030      	b.n	800a1a8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a146:	f107 0318 	add.w	r3, r7, #24
 800a14a:	4618      	mov	r0, r3
 800a14c:	f7fd fed4 	bl	8007ef8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a150:	69fb      	ldr	r3, [r7, #28]
 800a152:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a154:	e028      	b.n	800a1a8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a156:	4b09      	ldr	r3, [pc, #36]	; (800a17c <UART_SetConfig+0xc2c>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f003 0320 	and.w	r3, r3, #32
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d012      	beq.n	800a188 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a162:	4b06      	ldr	r3, [pc, #24]	; (800a17c <UART_SetConfig+0xc2c>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	08db      	lsrs	r3, r3, #3
 800a168:	f003 0303 	and.w	r3, r3, #3
 800a16c:	4a04      	ldr	r2, [pc, #16]	; (800a180 <UART_SetConfig+0xc30>)
 800a16e:	fa22 f303 	lsr.w	r3, r2, r3
 800a172:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a174:	e018      	b.n	800a1a8 <UART_SetConfig+0xc58>
 800a176:	bf00      	nop
 800a178:	08010ffc 	.word	0x08010ffc
 800a17c:	58024400 	.word	0x58024400
 800a180:	03d09000 	.word	0x03d09000
 800a184:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800a188:	4b24      	ldr	r3, [pc, #144]	; (800a21c <UART_SetConfig+0xccc>)
 800a18a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a18c:	e00c      	b.n	800a1a8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a18e:	4b24      	ldr	r3, [pc, #144]	; (800a220 <UART_SetConfig+0xcd0>)
 800a190:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a192:	e009      	b.n	800a1a8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a194:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a198:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a19a:	e005      	b.n	800a1a8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800a19c:	2300      	movs	r3, #0
 800a19e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a1a0:	2301      	movs	r3, #1
 800a1a2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a1a6:	bf00      	nop
    }

    if (pclk != 0U)
 800a1a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d021      	beq.n	800a1f2 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a1ae:	697b      	ldr	r3, [r7, #20]
 800a1b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1b2:	4a1c      	ldr	r2, [pc, #112]	; (800a224 <UART_SetConfig+0xcd4>)
 800a1b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a1b8:	461a      	mov	r2, r3
 800a1ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1bc:	fbb3 f2f2 	udiv	r2, r3, r2
 800a1c0:	697b      	ldr	r3, [r7, #20]
 800a1c2:	685b      	ldr	r3, [r3, #4]
 800a1c4:	085b      	lsrs	r3, r3, #1
 800a1c6:	441a      	add	r2, r3
 800a1c8:	697b      	ldr	r3, [r7, #20]
 800a1ca:	685b      	ldr	r3, [r3, #4]
 800a1cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1d0:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a1d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1d4:	2b0f      	cmp	r3, #15
 800a1d6:	d909      	bls.n	800a1ec <UART_SetConfig+0xc9c>
 800a1d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1de:	d205      	bcs.n	800a1ec <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a1e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1e2:	b29a      	uxth	r2, r3
 800a1e4:	697b      	ldr	r3, [r7, #20]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	60da      	str	r2, [r3, #12]
 800a1ea:	e002      	b.n	800a1f2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a1f2:	697b      	ldr	r3, [r7, #20]
 800a1f4:	2201      	movs	r2, #1
 800a1f6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a1fa:	697b      	ldr	r3, [r7, #20]
 800a1fc:	2201      	movs	r2, #1
 800a1fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a202:	697b      	ldr	r3, [r7, #20]
 800a204:	2200      	movs	r2, #0
 800a206:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800a208:	697b      	ldr	r3, [r7, #20]
 800a20a:	2200      	movs	r2, #0
 800a20c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800a20e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800a212:	4618      	mov	r0, r3
 800a214:	3748      	adds	r7, #72	; 0x48
 800a216:	46bd      	mov	sp, r7
 800a218:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a21c:	03d09000 	.word	0x03d09000
 800a220:	003d0900 	.word	0x003d0900
 800a224:	08010ffc 	.word	0x08010ffc

0800a228 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a228:	b480      	push	{r7}
 800a22a:	b083      	sub	sp, #12
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a234:	f003 0301 	and.w	r3, r3, #1
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d00a      	beq.n	800a252 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	685b      	ldr	r3, [r3, #4]
 800a242:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	430a      	orrs	r2, r1
 800a250:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a256:	f003 0302 	and.w	r3, r3, #2
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d00a      	beq.n	800a274 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	685b      	ldr	r3, [r3, #4]
 800a264:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	430a      	orrs	r2, r1
 800a272:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a278:	f003 0304 	and.w	r3, r3, #4
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d00a      	beq.n	800a296 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	685b      	ldr	r3, [r3, #4]
 800a286:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	430a      	orrs	r2, r1
 800a294:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a29a:	f003 0308 	and.w	r3, r3, #8
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d00a      	beq.n	800a2b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	685b      	ldr	r3, [r3, #4]
 800a2a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	430a      	orrs	r2, r1
 800a2b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2bc:	f003 0310 	and.w	r3, r3, #16
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d00a      	beq.n	800a2da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	689b      	ldr	r3, [r3, #8]
 800a2ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	430a      	orrs	r2, r1
 800a2d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2de:	f003 0320 	and.w	r3, r3, #32
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d00a      	beq.n	800a2fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	689b      	ldr	r3, [r3, #8]
 800a2ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	430a      	orrs	r2, r1
 800a2fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a304:	2b00      	cmp	r3, #0
 800a306:	d01a      	beq.n	800a33e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	685b      	ldr	r3, [r3, #4]
 800a30e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	430a      	orrs	r2, r1
 800a31c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a322:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a326:	d10a      	bne.n	800a33e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	685b      	ldr	r3, [r3, #4]
 800a32e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	430a      	orrs	r2, r1
 800a33c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a346:	2b00      	cmp	r3, #0
 800a348:	d00a      	beq.n	800a360 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	685b      	ldr	r3, [r3, #4]
 800a350:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	430a      	orrs	r2, r1
 800a35e:	605a      	str	r2, [r3, #4]
  }
}
 800a360:	bf00      	nop
 800a362:	370c      	adds	r7, #12
 800a364:	46bd      	mov	sp, r7
 800a366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36a:	4770      	bx	lr

0800a36c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b098      	sub	sp, #96	; 0x60
 800a370:	af02      	add	r7, sp, #8
 800a372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2200      	movs	r2, #0
 800a378:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a37c:	f7f7 fd0a 	bl	8001d94 <HAL_GetTick>
 800a380:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f003 0308 	and.w	r3, r3, #8
 800a38c:	2b08      	cmp	r3, #8
 800a38e:	d12f      	bne.n	800a3f0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a390:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a394:	9300      	str	r3, [sp, #0]
 800a396:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a398:	2200      	movs	r2, #0
 800a39a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a39e:	6878      	ldr	r0, [r7, #4]
 800a3a0:	f000 f88e 	bl	800a4c0 <UART_WaitOnFlagUntilTimeout>
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d022      	beq.n	800a3f0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3b2:	e853 3f00 	ldrex	r3, [r3]
 800a3b6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a3b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a3be:	653b      	str	r3, [r7, #80]	; 0x50
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	461a      	mov	r2, r3
 800a3c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a3c8:	647b      	str	r3, [r7, #68]	; 0x44
 800a3ca:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a3ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a3d0:	e841 2300 	strex	r3, r2, [r1]
 800a3d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a3d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d1e6      	bne.n	800a3aa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2220      	movs	r2, #32
 800a3e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a3ec:	2303      	movs	r3, #3
 800a3ee:	e063      	b.n	800a4b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f003 0304 	and.w	r3, r3, #4
 800a3fa:	2b04      	cmp	r3, #4
 800a3fc:	d149      	bne.n	800a492 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a3fe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a402:	9300      	str	r3, [sp, #0]
 800a404:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a406:	2200      	movs	r2, #0
 800a408:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a40c:	6878      	ldr	r0, [r7, #4]
 800a40e:	f000 f857 	bl	800a4c0 <UART_WaitOnFlagUntilTimeout>
 800a412:	4603      	mov	r3, r0
 800a414:	2b00      	cmp	r3, #0
 800a416:	d03c      	beq.n	800a492 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a41e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a420:	e853 3f00 	ldrex	r3, [r3]
 800a424:	623b      	str	r3, [r7, #32]
   return(result);
 800a426:	6a3b      	ldr	r3, [r7, #32]
 800a428:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a42c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	461a      	mov	r2, r3
 800a434:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a436:	633b      	str	r3, [r7, #48]	; 0x30
 800a438:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a43a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a43c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a43e:	e841 2300 	strex	r3, r2, [r1]
 800a442:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a446:	2b00      	cmp	r3, #0
 800a448:	d1e6      	bne.n	800a418 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	3308      	adds	r3, #8
 800a450:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a452:	693b      	ldr	r3, [r7, #16]
 800a454:	e853 3f00 	ldrex	r3, [r3]
 800a458:	60fb      	str	r3, [r7, #12]
   return(result);
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	f023 0301 	bic.w	r3, r3, #1
 800a460:	64bb      	str	r3, [r7, #72]	; 0x48
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	3308      	adds	r3, #8
 800a468:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a46a:	61fa      	str	r2, [r7, #28]
 800a46c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a46e:	69b9      	ldr	r1, [r7, #24]
 800a470:	69fa      	ldr	r2, [r7, #28]
 800a472:	e841 2300 	strex	r3, r2, [r1]
 800a476:	617b      	str	r3, [r7, #20]
   return(result);
 800a478:	697b      	ldr	r3, [r7, #20]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d1e5      	bne.n	800a44a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2220      	movs	r2, #32
 800a482:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2200      	movs	r2, #0
 800a48a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a48e:	2303      	movs	r3, #3
 800a490:	e012      	b.n	800a4b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2220      	movs	r2, #32
 800a496:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2220      	movs	r2, #32
 800a49e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a4b6:	2300      	movs	r3, #0
}
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	3758      	adds	r7, #88	; 0x58
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	bd80      	pop	{r7, pc}

0800a4c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b084      	sub	sp, #16
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	60f8      	str	r0, [r7, #12]
 800a4c8:	60b9      	str	r1, [r7, #8]
 800a4ca:	603b      	str	r3, [r7, #0]
 800a4cc:	4613      	mov	r3, r2
 800a4ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a4d0:	e049      	b.n	800a566 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a4d2:	69bb      	ldr	r3, [r7, #24]
 800a4d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4d8:	d045      	beq.n	800a566 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a4da:	f7f7 fc5b 	bl	8001d94 <HAL_GetTick>
 800a4de:	4602      	mov	r2, r0
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	1ad3      	subs	r3, r2, r3
 800a4e4:	69ba      	ldr	r2, [r7, #24]
 800a4e6:	429a      	cmp	r2, r3
 800a4e8:	d302      	bcc.n	800a4f0 <UART_WaitOnFlagUntilTimeout+0x30>
 800a4ea:	69bb      	ldr	r3, [r7, #24]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d101      	bne.n	800a4f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a4f0:	2303      	movs	r3, #3
 800a4f2:	e048      	b.n	800a586 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f003 0304 	and.w	r3, r3, #4
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d031      	beq.n	800a566 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	69db      	ldr	r3, [r3, #28]
 800a508:	f003 0308 	and.w	r3, r3, #8
 800a50c:	2b08      	cmp	r3, #8
 800a50e:	d110      	bne.n	800a532 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	2208      	movs	r2, #8
 800a516:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800a518:	68f8      	ldr	r0, [r7, #12]
 800a51a:	f000 f921 	bl	800a760 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	2208      	movs	r2, #8
 800a522:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	2200      	movs	r2, #0
 800a52a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800a52e:	2301      	movs	r3, #1
 800a530:	e029      	b.n	800a586 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	69db      	ldr	r3, [r3, #28]
 800a538:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a53c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a540:	d111      	bne.n	800a566 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a54a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a54c:	68f8      	ldr	r0, [r7, #12]
 800a54e:	f000 f907 	bl	800a760 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	2220      	movs	r2, #32
 800a556:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	2200      	movs	r2, #0
 800a55e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800a562:	2303      	movs	r3, #3
 800a564:	e00f      	b.n	800a586 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	69da      	ldr	r2, [r3, #28]
 800a56c:	68bb      	ldr	r3, [r7, #8]
 800a56e:	4013      	ands	r3, r2
 800a570:	68ba      	ldr	r2, [r7, #8]
 800a572:	429a      	cmp	r2, r3
 800a574:	bf0c      	ite	eq
 800a576:	2301      	moveq	r3, #1
 800a578:	2300      	movne	r3, #0
 800a57a:	b2db      	uxtb	r3, r3
 800a57c:	461a      	mov	r2, r3
 800a57e:	79fb      	ldrb	r3, [r7, #7]
 800a580:	429a      	cmp	r2, r3
 800a582:	d0a6      	beq.n	800a4d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a584:	2300      	movs	r3, #0
}
 800a586:	4618      	mov	r0, r3
 800a588:	3710      	adds	r7, #16
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}
	...

0800a590 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b096      	sub	sp, #88	; 0x58
 800a594:	af00      	add	r7, sp, #0
 800a596:	60f8      	str	r0, [r7, #12]
 800a598:	60b9      	str	r1, [r7, #8]
 800a59a:	4613      	mov	r3, r2
 800a59c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	68ba      	ldr	r2, [r7, #8]
 800a5a2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	88fa      	ldrh	r2, [r7, #6]
 800a5a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	2222      	movs	r2, #34	; 0x22
 800a5b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d02d      	beq.n	800a622 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a5cc:	4a40      	ldr	r2, [pc, #256]	; (800a6d0 <UART_Start_Receive_DMA+0x140>)
 800a5ce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a5d6:	4a3f      	ldr	r2, [pc, #252]	; (800a6d4 <UART_Start_Receive_DMA+0x144>)
 800a5d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a5e0:	4a3d      	ldr	r2, [pc, #244]	; (800a6d8 <UART_Start_Receive_DMA+0x148>)
 800a5e2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	3324      	adds	r3, #36	; 0x24
 800a5fa:	4619      	mov	r1, r3
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a600:	461a      	mov	r2, r3
 800a602:	88fb      	ldrh	r3, [r7, #6]
 800a604:	f7f8 fa92 	bl	8002b2c <HAL_DMA_Start_IT>
 800a608:	4603      	mov	r3, r0
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d009      	beq.n	800a622 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	2210      	movs	r2, #16
 800a612:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	2220      	movs	r2, #32
 800a61a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800a61e:	2301      	movs	r3, #1
 800a620:	e051      	b.n	800a6c6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	691b      	ldr	r3, [r3, #16]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d018      	beq.n	800a65c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a630:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a632:	e853 3f00 	ldrex	r3, [r3]
 800a636:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a63a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a63e:	657b      	str	r3, [r7, #84]	; 0x54
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	461a      	mov	r2, r3
 800a646:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a648:	64bb      	str	r3, [r7, #72]	; 0x48
 800a64a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a64c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a64e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a650:	e841 2300 	strex	r3, r2, [r1]
 800a654:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a656:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d1e6      	bne.n	800a62a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	3308      	adds	r3, #8
 800a662:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a666:	e853 3f00 	ldrex	r3, [r3]
 800a66a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a66e:	f043 0301 	orr.w	r3, r3, #1
 800a672:	653b      	str	r3, [r7, #80]	; 0x50
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	3308      	adds	r3, #8
 800a67a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a67c:	637a      	str	r2, [r7, #52]	; 0x34
 800a67e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a680:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a682:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a684:	e841 2300 	strex	r3, r2, [r1]
 800a688:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a68a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d1e5      	bne.n	800a65c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	3308      	adds	r3, #8
 800a696:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a698:	697b      	ldr	r3, [r7, #20]
 800a69a:	e853 3f00 	ldrex	r3, [r3]
 800a69e:	613b      	str	r3, [r7, #16]
   return(result);
 800a6a0:	693b      	ldr	r3, [r7, #16]
 800a6a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	3308      	adds	r3, #8
 800a6ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a6b0:	623a      	str	r2, [r7, #32]
 800a6b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6b4:	69f9      	ldr	r1, [r7, #28]
 800a6b6:	6a3a      	ldr	r2, [r7, #32]
 800a6b8:	e841 2300 	strex	r3, r2, [r1]
 800a6bc:	61bb      	str	r3, [r7, #24]
   return(result);
 800a6be:	69bb      	ldr	r3, [r7, #24]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d1e5      	bne.n	800a690 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a6c4:	2300      	movs	r3, #0
}
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	3758      	adds	r7, #88	; 0x58
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd80      	pop	{r7, pc}
 800a6ce:	bf00      	nop
 800a6d0:	0800a8df 	.word	0x0800a8df
 800a6d4:	0800aa07 	.word	0x0800aa07
 800a6d8:	0800aa45 	.word	0x0800aa45

0800a6dc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a6dc:	b480      	push	{r7}
 800a6de:	b08f      	sub	sp, #60	; 0x3c
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6ea:	6a3b      	ldr	r3, [r7, #32]
 800a6ec:	e853 3f00 	ldrex	r3, [r3]
 800a6f0:	61fb      	str	r3, [r7, #28]
   return(result);
 800a6f2:	69fb      	ldr	r3, [r7, #28]
 800a6f4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a6f8:	637b      	str	r3, [r7, #52]	; 0x34
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	461a      	mov	r2, r3
 800a700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a702:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a704:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a706:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a708:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a70a:	e841 2300 	strex	r3, r2, [r1]
 800a70e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a712:	2b00      	cmp	r3, #0
 800a714:	d1e6      	bne.n	800a6e4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	3308      	adds	r3, #8
 800a71c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	e853 3f00 	ldrex	r3, [r3]
 800a724:	60bb      	str	r3, [r7, #8]
   return(result);
 800a726:	68bb      	ldr	r3, [r7, #8]
 800a728:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a72c:	633b      	str	r3, [r7, #48]	; 0x30
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	3308      	adds	r3, #8
 800a734:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a736:	61ba      	str	r2, [r7, #24]
 800a738:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a73a:	6979      	ldr	r1, [r7, #20]
 800a73c:	69ba      	ldr	r2, [r7, #24]
 800a73e:	e841 2300 	strex	r3, r2, [r1]
 800a742:	613b      	str	r3, [r7, #16]
   return(result);
 800a744:	693b      	ldr	r3, [r7, #16]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d1e5      	bne.n	800a716 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2220      	movs	r2, #32
 800a74e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800a752:	bf00      	nop
 800a754:	373c      	adds	r7, #60	; 0x3c
 800a756:	46bd      	mov	sp, r7
 800a758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75c:	4770      	bx	lr
	...

0800a760 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a760:	b480      	push	{r7}
 800a762:	b095      	sub	sp, #84	; 0x54
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a76e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a770:	e853 3f00 	ldrex	r3, [r3]
 800a774:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a778:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a77c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	461a      	mov	r2, r3
 800a784:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a786:	643b      	str	r3, [r7, #64]	; 0x40
 800a788:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a78a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a78c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a78e:	e841 2300 	strex	r3, r2, [r1]
 800a792:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a796:	2b00      	cmp	r3, #0
 800a798:	d1e6      	bne.n	800a768 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	3308      	adds	r3, #8
 800a7a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7a2:	6a3b      	ldr	r3, [r7, #32]
 800a7a4:	e853 3f00 	ldrex	r3, [r3]
 800a7a8:	61fb      	str	r3, [r7, #28]
   return(result);
 800a7aa:	69fa      	ldr	r2, [r7, #28]
 800a7ac:	4b1e      	ldr	r3, [pc, #120]	; (800a828 <UART_EndRxTransfer+0xc8>)
 800a7ae:	4013      	ands	r3, r2
 800a7b0:	64bb      	str	r3, [r7, #72]	; 0x48
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	3308      	adds	r3, #8
 800a7b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a7ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a7bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a7c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a7c2:	e841 2300 	strex	r3, r2, [r1]
 800a7c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d1e5      	bne.n	800a79a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7d2:	2b01      	cmp	r3, #1
 800a7d4:	d118      	bne.n	800a808 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	e853 3f00 	ldrex	r3, [r3]
 800a7e2:	60bb      	str	r3, [r7, #8]
   return(result);
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	f023 0310 	bic.w	r3, r3, #16
 800a7ea:	647b      	str	r3, [r7, #68]	; 0x44
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	461a      	mov	r2, r3
 800a7f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7f4:	61bb      	str	r3, [r7, #24]
 800a7f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7f8:	6979      	ldr	r1, [r7, #20]
 800a7fa:	69ba      	ldr	r2, [r7, #24]
 800a7fc:	e841 2300 	strex	r3, r2, [r1]
 800a800:	613b      	str	r3, [r7, #16]
   return(result);
 800a802:	693b      	ldr	r3, [r7, #16]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d1e6      	bne.n	800a7d6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2220      	movs	r2, #32
 800a80c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2200      	movs	r2, #0
 800a814:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2200      	movs	r2, #0
 800a81a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800a81c:	bf00      	nop
 800a81e:	3754      	adds	r7, #84	; 0x54
 800a820:	46bd      	mov	sp, r7
 800a822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a826:	4770      	bx	lr
 800a828:	effffffe 	.word	0xeffffffe

0800a82c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b090      	sub	sp, #64	; 0x40
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a838:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	69db      	ldr	r3, [r3, #28]
 800a83e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a842:	d037      	beq.n	800a8b4 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800a844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a846:	2200      	movs	r2, #0
 800a848:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a84c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	3308      	adds	r3, #8
 800a852:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a856:	e853 3f00 	ldrex	r3, [r3]
 800a85a:	623b      	str	r3, [r7, #32]
   return(result);
 800a85c:	6a3b      	ldr	r3, [r7, #32]
 800a85e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a862:	63bb      	str	r3, [r7, #56]	; 0x38
 800a864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	3308      	adds	r3, #8
 800a86a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a86c:	633a      	str	r2, [r7, #48]	; 0x30
 800a86e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a870:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a872:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a874:	e841 2300 	strex	r3, r2, [r1]
 800a878:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a87a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d1e5      	bne.n	800a84c <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a880:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a886:	693b      	ldr	r3, [r7, #16]
 800a888:	e853 3f00 	ldrex	r3, [r3]
 800a88c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a894:	637b      	str	r3, [r7, #52]	; 0x34
 800a896:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	461a      	mov	r2, r3
 800a89c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a89e:	61fb      	str	r3, [r7, #28]
 800a8a0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8a2:	69b9      	ldr	r1, [r7, #24]
 800a8a4:	69fa      	ldr	r2, [r7, #28]
 800a8a6:	e841 2300 	strex	r3, r2, [r1]
 800a8aa:	617b      	str	r3, [r7, #20]
   return(result);
 800a8ac:	697b      	ldr	r3, [r7, #20]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d1e6      	bne.n	800a880 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a8b2:	e002      	b.n	800a8ba <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800a8b4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a8b6:	f7f6 fc0f 	bl	80010d8 <HAL_UART_TxCpltCallback>
}
 800a8ba:	bf00      	nop
 800a8bc:	3740      	adds	r7, #64	; 0x40
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}

0800a8c2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a8c2:	b580      	push	{r7, lr}
 800a8c4:	b084      	sub	sp, #16
 800a8c6:	af00      	add	r7, sp, #0
 800a8c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8ce:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a8d0:	68f8      	ldr	r0, [r7, #12]
 800a8d2:	f7fe fe15 	bl	8009500 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a8d6:	bf00      	nop
 800a8d8:	3710      	adds	r7, #16
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}

0800a8de <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a8de:	b580      	push	{r7, lr}
 800a8e0:	b09c      	sub	sp, #112	; 0x70
 800a8e2:	af00      	add	r7, sp, #0
 800a8e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8ea:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	69db      	ldr	r3, [r3, #28]
 800a8f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8f4:	d071      	beq.n	800a9da <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800a8f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a8fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a904:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a906:	e853 3f00 	ldrex	r3, [r3]
 800a90a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a90c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a90e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a912:	66bb      	str	r3, [r7, #104]	; 0x68
 800a914:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	461a      	mov	r2, r3
 800a91a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a91c:	65bb      	str	r3, [r7, #88]	; 0x58
 800a91e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a920:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a922:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a924:	e841 2300 	strex	r3, r2, [r1]
 800a928:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a92a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d1e6      	bne.n	800a8fe <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a930:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	3308      	adds	r3, #8
 800a936:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a93a:	e853 3f00 	ldrex	r3, [r3]
 800a93e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a942:	f023 0301 	bic.w	r3, r3, #1
 800a946:	667b      	str	r3, [r7, #100]	; 0x64
 800a948:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	3308      	adds	r3, #8
 800a94e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a950:	647a      	str	r2, [r7, #68]	; 0x44
 800a952:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a954:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a956:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a958:	e841 2300 	strex	r3, r2, [r1]
 800a95c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a95e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a960:	2b00      	cmp	r3, #0
 800a962:	d1e5      	bne.n	800a930 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a964:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	3308      	adds	r3, #8
 800a96a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a96e:	e853 3f00 	ldrex	r3, [r3]
 800a972:	623b      	str	r3, [r7, #32]
   return(result);
 800a974:	6a3b      	ldr	r3, [r7, #32]
 800a976:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a97a:	663b      	str	r3, [r7, #96]	; 0x60
 800a97c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	3308      	adds	r3, #8
 800a982:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a984:	633a      	str	r2, [r7, #48]	; 0x30
 800a986:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a988:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a98a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a98c:	e841 2300 	strex	r3, r2, [r1]
 800a990:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a994:	2b00      	cmp	r3, #0
 800a996:	d1e5      	bne.n	800a964 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a998:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a99a:	2220      	movs	r2, #32
 800a99c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a9a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a9a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9a4:	2b01      	cmp	r3, #1
 800a9a6:	d118      	bne.n	800a9da <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a9a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9ae:	693b      	ldr	r3, [r7, #16]
 800a9b0:	e853 3f00 	ldrex	r3, [r3]
 800a9b4:	60fb      	str	r3, [r7, #12]
   return(result);
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	f023 0310 	bic.w	r3, r3, #16
 800a9bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a9be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	461a      	mov	r2, r3
 800a9c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a9c6:	61fb      	str	r3, [r7, #28]
 800a9c8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9ca:	69b9      	ldr	r1, [r7, #24]
 800a9cc:	69fa      	ldr	r2, [r7, #28]
 800a9ce:	e841 2300 	strex	r3, r2, [r1]
 800a9d2:	617b      	str	r3, [r7, #20]
   return(result);
 800a9d4:	697b      	ldr	r3, [r7, #20]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d1e6      	bne.n	800a9a8 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a9da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a9dc:	2200      	movs	r2, #0
 800a9de:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a9e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a9e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9e4:	2b01      	cmp	r3, #1
 800a9e6:	d107      	bne.n	800a9f8 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a9e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a9ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a9ee:	4619      	mov	r1, r3
 800a9f0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a9f2:	f7f6 fb81 	bl	80010f8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a9f6:	e002      	b.n	800a9fe <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800a9f8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a9fa:	f7fe fd8b 	bl	8009514 <HAL_UART_RxCpltCallback>
}
 800a9fe:	bf00      	nop
 800aa00:	3770      	adds	r7, #112	; 0x70
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}

0800aa06 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800aa06:	b580      	push	{r7, lr}
 800aa08:	b084      	sub	sp, #16
 800aa0a:	af00      	add	r7, sp, #0
 800aa0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa12:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	2201      	movs	r2, #1
 800aa18:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa1e:	2b01      	cmp	r3, #1
 800aa20:	d109      	bne.n	800aa36 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800aa28:	085b      	lsrs	r3, r3, #1
 800aa2a:	b29b      	uxth	r3, r3
 800aa2c:	4619      	mov	r1, r3
 800aa2e:	68f8      	ldr	r0, [r7, #12]
 800aa30:	f7f6 fb62 	bl	80010f8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aa34:	e002      	b.n	800aa3c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800aa36:	68f8      	ldr	r0, [r7, #12]
 800aa38:	f7fe fd76 	bl	8009528 <HAL_UART_RxHalfCpltCallback>
}
 800aa3c:	bf00      	nop
 800aa3e:	3710      	adds	r7, #16
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd80      	pop	{r7, pc}

0800aa44 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b086      	sub	sp, #24
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa50:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800aa52:	697b      	ldr	r3, [r7, #20]
 800aa54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa58:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800aa5a:	697b      	ldr	r3, [r7, #20]
 800aa5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa60:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800aa62:	697b      	ldr	r3, [r7, #20]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	689b      	ldr	r3, [r3, #8]
 800aa68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa6c:	2b80      	cmp	r3, #128	; 0x80
 800aa6e:	d109      	bne.n	800aa84 <UART_DMAError+0x40>
 800aa70:	693b      	ldr	r3, [r7, #16]
 800aa72:	2b21      	cmp	r3, #33	; 0x21
 800aa74:	d106      	bne.n	800aa84 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	2200      	movs	r2, #0
 800aa7a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800aa7e:	6978      	ldr	r0, [r7, #20]
 800aa80:	f7ff fe2c 	bl	800a6dc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800aa84:	697b      	ldr	r3, [r7, #20]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	689b      	ldr	r3, [r3, #8]
 800aa8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa8e:	2b40      	cmp	r3, #64	; 0x40
 800aa90:	d109      	bne.n	800aaa6 <UART_DMAError+0x62>
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	2b22      	cmp	r3, #34	; 0x22
 800aa96:	d106      	bne.n	800aaa6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800aa98:	697b      	ldr	r3, [r7, #20]
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800aaa0:	6978      	ldr	r0, [r7, #20]
 800aaa2:	f7ff fe5d 	bl	800a760 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800aaa6:	697b      	ldr	r3, [r7, #20]
 800aaa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aaac:	f043 0210 	orr.w	r2, r3, #16
 800aab0:	697b      	ldr	r3, [r7, #20]
 800aab2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800aab6:	6978      	ldr	r0, [r7, #20]
 800aab8:	f7fe fd40 	bl	800953c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aabc:	bf00      	nop
 800aabe:	3718      	adds	r7, #24
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd80      	pop	{r7, pc}

0800aac4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b084      	sub	sp, #16
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aad0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	2200      	movs	r2, #0
 800aad6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	2200      	movs	r2, #0
 800aade:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800aae2:	68f8      	ldr	r0, [r7, #12]
 800aae4:	f7fe fd2a 	bl	800953c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aae8:	bf00      	nop
 800aaea:	3710      	adds	r7, #16
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd80      	pop	{r7, pc}

0800aaf0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b088      	sub	sp, #32
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	e853 3f00 	ldrex	r3, [r3]
 800ab04:	60bb      	str	r3, [r7, #8]
   return(result);
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab0c:	61fb      	str	r3, [r7, #28]
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	461a      	mov	r2, r3
 800ab14:	69fb      	ldr	r3, [r7, #28]
 800ab16:	61bb      	str	r3, [r7, #24]
 800ab18:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab1a:	6979      	ldr	r1, [r7, #20]
 800ab1c:	69ba      	ldr	r2, [r7, #24]
 800ab1e:	e841 2300 	strex	r3, r2, [r1]
 800ab22:	613b      	str	r3, [r7, #16]
   return(result);
 800ab24:	693b      	ldr	r3, [r7, #16]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d1e6      	bne.n	800aaf8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2220      	movs	r2, #32
 800ab2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2200      	movs	r2, #0
 800ab36:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	f7f6 facd 	bl	80010d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ab3e:	bf00      	nop
 800ab40:	3720      	adds	r7, #32
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}

0800ab46 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ab46:	b480      	push	{r7}
 800ab48:	b083      	sub	sp, #12
 800ab4a:	af00      	add	r7, sp, #0
 800ab4c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ab4e:	bf00      	nop
 800ab50:	370c      	adds	r7, #12
 800ab52:	46bd      	mov	sp, r7
 800ab54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab58:	4770      	bx	lr

0800ab5a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ab5a:	b480      	push	{r7}
 800ab5c:	b083      	sub	sp, #12
 800ab5e:	af00      	add	r7, sp, #0
 800ab60:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ab62:	bf00      	nop
 800ab64:	370c      	adds	r7, #12
 800ab66:	46bd      	mov	sp, r7
 800ab68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6c:	4770      	bx	lr

0800ab6e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ab6e:	b480      	push	{r7}
 800ab70:	b083      	sub	sp, #12
 800ab72:	af00      	add	r7, sp, #0
 800ab74:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ab76:	bf00      	nop
 800ab78:	370c      	adds	r7, #12
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab80:	4770      	bx	lr

0800ab82 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ab82:	b480      	push	{r7}
 800ab84:	b085      	sub	sp, #20
 800ab86:	af00      	add	r7, sp, #0
 800ab88:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ab90:	2b01      	cmp	r3, #1
 800ab92:	d101      	bne.n	800ab98 <HAL_UARTEx_DisableFifoMode+0x16>
 800ab94:	2302      	movs	r3, #2
 800ab96:	e027      	b.n	800abe8 <HAL_UARTEx_DisableFifoMode+0x66>
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2201      	movs	r2, #1
 800ab9c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2224      	movs	r2, #36	; 0x24
 800aba4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	681a      	ldr	r2, [r3, #0]
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	f022 0201 	bic.w	r2, r2, #1
 800abbe:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800abc6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	2200      	movs	r2, #0
 800abcc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	68fa      	ldr	r2, [r7, #12]
 800abd4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2220      	movs	r2, #32
 800abda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	2200      	movs	r2, #0
 800abe2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800abe6:	2300      	movs	r3, #0
}
 800abe8:	4618      	mov	r0, r3
 800abea:	3714      	adds	r7, #20
 800abec:	46bd      	mov	sp, r7
 800abee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf2:	4770      	bx	lr

0800abf4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b084      	sub	sp, #16
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
 800abfc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ac04:	2b01      	cmp	r3, #1
 800ac06:	d101      	bne.n	800ac0c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ac08:	2302      	movs	r3, #2
 800ac0a:	e02d      	b.n	800ac68 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2201      	movs	r2, #1
 800ac10:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2224      	movs	r2, #36	; 0x24
 800ac18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	681a      	ldr	r2, [r3, #0]
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	f022 0201 	bic.w	r2, r2, #1
 800ac32:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	689b      	ldr	r3, [r3, #8]
 800ac3a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	683a      	ldr	r2, [r7, #0]
 800ac44:	430a      	orrs	r2, r1
 800ac46:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ac48:	6878      	ldr	r0, [r7, #4]
 800ac4a:	f000 f8a3 	bl	800ad94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	68fa      	ldr	r2, [r7, #12]
 800ac54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2220      	movs	r2, #32
 800ac5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2200      	movs	r2, #0
 800ac62:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ac66:	2300      	movs	r3, #0
}
 800ac68:	4618      	mov	r0, r3
 800ac6a:	3710      	adds	r7, #16
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	bd80      	pop	{r7, pc}

0800ac70 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b084      	sub	sp, #16
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
 800ac78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ac80:	2b01      	cmp	r3, #1
 800ac82:	d101      	bne.n	800ac88 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ac84:	2302      	movs	r3, #2
 800ac86:	e02d      	b.n	800ace4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2201      	movs	r2, #1
 800ac8c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2224      	movs	r2, #36	; 0x24
 800ac94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	681a      	ldr	r2, [r3, #0]
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	f022 0201 	bic.w	r2, r2, #1
 800acae:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	689b      	ldr	r3, [r3, #8]
 800acb6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	683a      	ldr	r2, [r7, #0]
 800acc0:	430a      	orrs	r2, r1
 800acc2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800acc4:	6878      	ldr	r0, [r7, #4]
 800acc6:	f000 f865 	bl	800ad94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	68fa      	ldr	r2, [r7, #12]
 800acd0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	2220      	movs	r2, #32
 800acd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2200      	movs	r2, #0
 800acde:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ace2:	2300      	movs	r3, #0
}
 800ace4:	4618      	mov	r0, r3
 800ace6:	3710      	adds	r7, #16
 800ace8:	46bd      	mov	sp, r7
 800acea:	bd80      	pop	{r7, pc}

0800acec <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b08c      	sub	sp, #48	; 0x30
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	60f8      	str	r0, [r7, #12]
 800acf4:	60b9      	str	r1, [r7, #8]
 800acf6:	4613      	mov	r3, r2
 800acf8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ad00:	2b20      	cmp	r3, #32
 800ad02:	d142      	bne.n	800ad8a <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d002      	beq.n	800ad10 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800ad0a:	88fb      	ldrh	r3, [r7, #6]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d101      	bne.n	800ad14 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800ad10:	2301      	movs	r3, #1
 800ad12:	e03b      	b.n	800ad8c <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	2201      	movs	r2, #1
 800ad18:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800ad20:	88fb      	ldrh	r3, [r7, #6]
 800ad22:	461a      	mov	r2, r3
 800ad24:	68b9      	ldr	r1, [r7, #8]
 800ad26:	68f8      	ldr	r0, [r7, #12]
 800ad28:	f7ff fc32 	bl	800a590 <UART_Start_Receive_DMA>
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800ad32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d124      	bne.n	800ad84 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad3e:	2b01      	cmp	r3, #1
 800ad40:	d11d      	bne.n	800ad7e <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	2210      	movs	r2, #16
 800ad48:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad50:	69bb      	ldr	r3, [r7, #24]
 800ad52:	e853 3f00 	ldrex	r3, [r3]
 800ad56:	617b      	str	r3, [r7, #20]
   return(result);
 800ad58:	697b      	ldr	r3, [r7, #20]
 800ad5a:	f043 0310 	orr.w	r3, r3, #16
 800ad5e:	62bb      	str	r3, [r7, #40]	; 0x28
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	461a      	mov	r2, r3
 800ad66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad68:	627b      	str	r3, [r7, #36]	; 0x24
 800ad6a:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad6c:	6a39      	ldr	r1, [r7, #32]
 800ad6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad70:	e841 2300 	strex	r3, r2, [r1]
 800ad74:	61fb      	str	r3, [r7, #28]
   return(result);
 800ad76:	69fb      	ldr	r3, [r7, #28]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d1e6      	bne.n	800ad4a <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800ad7c:	e002      	b.n	800ad84 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800ad7e:	2301      	movs	r3, #1
 800ad80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800ad84:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ad88:	e000      	b.n	800ad8c <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800ad8a:	2302      	movs	r3, #2
  }
}
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	3730      	adds	r7, #48	; 0x30
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bd80      	pop	{r7, pc}

0800ad94 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ad94:	b480      	push	{r7}
 800ad96:	b085      	sub	sp, #20
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d108      	bne.n	800adb6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2201      	movs	r2, #1
 800ada8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2201      	movs	r2, #1
 800adb0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800adb4:	e031      	b.n	800ae1a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800adb6:	2310      	movs	r3, #16
 800adb8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800adba:	2310      	movs	r3, #16
 800adbc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	689b      	ldr	r3, [r3, #8]
 800adc4:	0e5b      	lsrs	r3, r3, #25
 800adc6:	b2db      	uxtb	r3, r3
 800adc8:	f003 0307 	and.w	r3, r3, #7
 800adcc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	689b      	ldr	r3, [r3, #8]
 800add4:	0f5b      	lsrs	r3, r3, #29
 800add6:	b2db      	uxtb	r3, r3
 800add8:	f003 0307 	and.w	r3, r3, #7
 800addc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800adde:	7bbb      	ldrb	r3, [r7, #14]
 800ade0:	7b3a      	ldrb	r2, [r7, #12]
 800ade2:	4911      	ldr	r1, [pc, #68]	; (800ae28 <UARTEx_SetNbDataToProcess+0x94>)
 800ade4:	5c8a      	ldrb	r2, [r1, r2]
 800ade6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800adea:	7b3a      	ldrb	r2, [r7, #12]
 800adec:	490f      	ldr	r1, [pc, #60]	; (800ae2c <UARTEx_SetNbDataToProcess+0x98>)
 800adee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800adf0:	fb93 f3f2 	sdiv	r3, r3, r2
 800adf4:	b29a      	uxth	r2, r3
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800adfc:	7bfb      	ldrb	r3, [r7, #15]
 800adfe:	7b7a      	ldrb	r2, [r7, #13]
 800ae00:	4909      	ldr	r1, [pc, #36]	; (800ae28 <UARTEx_SetNbDataToProcess+0x94>)
 800ae02:	5c8a      	ldrb	r2, [r1, r2]
 800ae04:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ae08:	7b7a      	ldrb	r2, [r7, #13]
 800ae0a:	4908      	ldr	r1, [pc, #32]	; (800ae2c <UARTEx_SetNbDataToProcess+0x98>)
 800ae0c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ae0e:	fb93 f3f2 	sdiv	r3, r3, r2
 800ae12:	b29a      	uxth	r2, r3
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ae1a:	bf00      	nop
 800ae1c:	3714      	adds	r7, #20
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae24:	4770      	bx	lr
 800ae26:	bf00      	nop
 800ae28:	08011014 	.word	0x08011014
 800ae2c:	0801101c 	.word	0x0801101c

0800ae30 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b082      	sub	sp, #8
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800ae38:	4b04      	ldr	r3, [pc, #16]	; (800ae4c <HAL_ETH_RxCpltCallback+0x1c>)
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	f000 fbc9 	bl	800b5d4 <osSemaphoreRelease>
}
 800ae42:	bf00      	nop
 800ae44:	3708      	adds	r7, #8
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}
 800ae4a:	bf00      	nop
 800ae4c:	240005f4 	.word	0x240005f4

0800ae50 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b082      	sub	sp, #8
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 800ae58:	4b04      	ldr	r3, [pc, #16]	; (800ae6c <HAL_ETH_TxCpltCallback+0x1c>)
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	f000 fbb9 	bl	800b5d4 <osSemaphoreRelease>
}
 800ae62:	bf00      	nop
 800ae64:	3708      	adds	r7, #8
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd80      	pop	{r7, pc}
 800ae6a:	bf00      	nop
 800ae6c:	240005f8 	.word	0x240005f8

0800ae70 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b082      	sub	sp, #8
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 800ae78:	6878      	ldr	r0, [r7, #4]
 800ae7a:	f7fa fa65 	bl	8005348 <HAL_ETH_GetDMAError>
 800ae7e:	4603      	mov	r3, r0
 800ae80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae84:	2b80      	cmp	r3, #128	; 0x80
 800ae86:	d104      	bne.n	800ae92 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 800ae88:	4b04      	ldr	r3, [pc, #16]	; (800ae9c <HAL_ETH_ErrorCallback+0x2c>)
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	f000 fba1 	bl	800b5d4 <osSemaphoreRelease>
  }
}
 800ae92:	bf00      	nop
 800ae94:	3708      	adds	r7, #8
 800ae96:	46bd      	mov	sp, r7
 800ae98:	bd80      	pop	{r7, pc}
 800ae9a:	bf00      	nop
 800ae9c:	240005f4 	.word	0x240005f4

0800aea0 <TestLoRaModuleComms>:
const uint8_t LoRaGetRssiATcommand[] =  "AT+RFQ?\r";



bool TestLoRaModuleComms(volatile uint8_t *LoRaRxBuffer, const uint8_t *LoRaTxCommand, uint8_t Size)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b08c      	sub	sp, #48	; 0x30
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	60f8      	str	r0, [r7, #12]
 800aea8:	60b9      	str	r1, [r7, #8]
 800aeaa:	4613      	mov	r3, r2
 800aeac:	71fb      	strb	r3, [r7, #7]
	bool status = false;
 800aeae:	2300      	movs	r3, #0
 800aeb0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	volatile HAL_StatusTypeDef DMAstatus;

	snprintf(LoRaTxBuffer, sizeof(LoRaTxBuffer), LoRaTxCommand);
 800aeb4:	68ba      	ldr	r2, [r7, #8]
 800aeb6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800aeba:	4866      	ldr	r0, [pc, #408]	; (800b054 <TestLoRaModuleComms+0x1b4>)
 800aebc:	f003 fe76 	bl	800ebac <sniprintf>

    if (LoRaRxBuffer == NULL || LoRaTxCommand == NULL)
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d002      	beq.n	800aecc <TestLoRaModuleComms+0x2c>
 800aec6:	68bb      	ldr	r3, [r7, #8]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d101      	bne.n	800aed0 <TestLoRaModuleComms+0x30>
    {
	   // Handle null pointer error
	   return false;
 800aecc:	2300      	movs	r3, #0
 800aece:	e0bd      	b.n	800b04c <TestLoRaModuleComms+0x1ac>
    }

    DMAstatus = HAL_UARTEx_ReceiveToIdle_DMA(&huart4, (uint8_t *)LoRaRxBuffer, 256);
 800aed0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800aed4:	68f9      	ldr	r1, [r7, #12]
 800aed6:	4860      	ldr	r0, [pc, #384]	; (800b058 <TestLoRaModuleComms+0x1b8>)
 800aed8:	f7ff ff08 	bl	800acec <HAL_UARTEx_ReceiveToIdle_DMA>
 800aedc:	4603      	mov	r3, r0
 800aede:	74fb      	strb	r3, [r7, #19]
	if(DMAstatus!= HAL_OK)
 800aee0:	7cfb      	ldrb	r3, [r7, #19]
 800aee2:	b2db      	uxtb	r3, r3
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d02a      	beq.n	800af3e <TestLoRaModuleComms+0x9e>
	{
		if(huart4.ReceptionType != HAL_UART_RECEPTION_TOIDLE)
 800aee8:	4b5b      	ldr	r3, [pc, #364]	; (800b058 <TestLoRaModuleComms+0x1b8>)
 800aeea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aeec:	2b01      	cmp	r3, #1
 800aeee:	d023      	beq.n	800af38 <TestLoRaModuleComms+0x98>
		{
			printf("huart4.ReceptionType is set to 0; it will be set to 1 \n\r");
 800aef0:	485a      	ldr	r0, [pc, #360]	; (800b05c <TestLoRaModuleComms+0x1bc>)
 800aef2:	f003 fded 	bl	800ead0 <iprintf>

			huart4.ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800aef6:	4b58      	ldr	r3, [pc, #352]	; (800b058 <TestLoRaModuleComms+0x1b8>)
 800aef8:	2201      	movs	r2, #1
 800aefa:	66da      	str	r2, [r3, #108]	; 0x6c
		    __HAL_UART_CLEAR_FLAG(&huart4, UART_CLEAR_IDLEF);
 800aefc:	4b56      	ldr	r3, [pc, #344]	; (800b058 <TestLoRaModuleComms+0x1b8>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	2210      	movs	r2, #16
 800af02:	621a      	str	r2, [r3, #32]
		     ATOMIC_SET_BIT(huart4.Instance->CR1, USART_CR1_IDLEIE);
 800af04:	4b54      	ldr	r3, [pc, #336]	; (800b058 <TestLoRaModuleComms+0x1b8>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af0a:	69bb      	ldr	r3, [r7, #24]
 800af0c:	e853 3f00 	ldrex	r3, [r3]
 800af10:	617b      	str	r3, [r7, #20]
   return(result);
 800af12:	697b      	ldr	r3, [r7, #20]
 800af14:	f043 0310 	orr.w	r3, r3, #16
 800af18:	62bb      	str	r3, [r7, #40]	; 0x28
 800af1a:	4b4f      	ldr	r3, [pc, #316]	; (800b058 <TestLoRaModuleComms+0x1b8>)
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	461a      	mov	r2, r3
 800af20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af22:	627b      	str	r3, [r7, #36]	; 0x24
 800af24:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af26:	6a39      	ldr	r1, [r7, #32]
 800af28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af2a:	e841 2300 	strex	r3, r2, [r1]
 800af2e:	61fb      	str	r3, [r7, #28]
   return(result);
 800af30:	69fb      	ldr	r3, [r7, #28]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d1e6      	bne.n	800af04 <TestLoRaModuleComms+0x64>
 800af36:	e002      	b.n	800af3e <TestLoRaModuleComms+0x9e>
		}
		else
		{
		  printf("DMA Error1 \n\r");
 800af38:	4849      	ldr	r0, [pc, #292]	; (800b060 <TestLoRaModuleComms+0x1c0>)
 800af3a:	f003 fdc9 	bl	800ead0 <iprintf>
		}
	}

	__HAL_DMA_DISABLE_IT(&hdma_uart4_rx, DMA_IT_HT);
 800af3e:	4b49      	ldr	r3, [pc, #292]	; (800b064 <TestLoRaModuleComms+0x1c4>)
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	4a49      	ldr	r2, [pc, #292]	; (800b068 <TestLoRaModuleComms+0x1c8>)
 800af44:	4293      	cmp	r3, r2
 800af46:	d04a      	beq.n	800afde <TestLoRaModuleComms+0x13e>
 800af48:	4b46      	ldr	r3, [pc, #280]	; (800b064 <TestLoRaModuleComms+0x1c4>)
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	4a47      	ldr	r2, [pc, #284]	; (800b06c <TestLoRaModuleComms+0x1cc>)
 800af4e:	4293      	cmp	r3, r2
 800af50:	d045      	beq.n	800afde <TestLoRaModuleComms+0x13e>
 800af52:	4b44      	ldr	r3, [pc, #272]	; (800b064 <TestLoRaModuleComms+0x1c4>)
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	4a46      	ldr	r2, [pc, #280]	; (800b070 <TestLoRaModuleComms+0x1d0>)
 800af58:	4293      	cmp	r3, r2
 800af5a:	d040      	beq.n	800afde <TestLoRaModuleComms+0x13e>
 800af5c:	4b41      	ldr	r3, [pc, #260]	; (800b064 <TestLoRaModuleComms+0x1c4>)
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	4a44      	ldr	r2, [pc, #272]	; (800b074 <TestLoRaModuleComms+0x1d4>)
 800af62:	4293      	cmp	r3, r2
 800af64:	d03b      	beq.n	800afde <TestLoRaModuleComms+0x13e>
 800af66:	4b3f      	ldr	r3, [pc, #252]	; (800b064 <TestLoRaModuleComms+0x1c4>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	4a43      	ldr	r2, [pc, #268]	; (800b078 <TestLoRaModuleComms+0x1d8>)
 800af6c:	4293      	cmp	r3, r2
 800af6e:	d036      	beq.n	800afde <TestLoRaModuleComms+0x13e>
 800af70:	4b3c      	ldr	r3, [pc, #240]	; (800b064 <TestLoRaModuleComms+0x1c4>)
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	4a41      	ldr	r2, [pc, #260]	; (800b07c <TestLoRaModuleComms+0x1dc>)
 800af76:	4293      	cmp	r3, r2
 800af78:	d031      	beq.n	800afde <TestLoRaModuleComms+0x13e>
 800af7a:	4b3a      	ldr	r3, [pc, #232]	; (800b064 <TestLoRaModuleComms+0x1c4>)
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	4a40      	ldr	r2, [pc, #256]	; (800b080 <TestLoRaModuleComms+0x1e0>)
 800af80:	4293      	cmp	r3, r2
 800af82:	d02c      	beq.n	800afde <TestLoRaModuleComms+0x13e>
 800af84:	4b37      	ldr	r3, [pc, #220]	; (800b064 <TestLoRaModuleComms+0x1c4>)
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	4a3e      	ldr	r2, [pc, #248]	; (800b084 <TestLoRaModuleComms+0x1e4>)
 800af8a:	4293      	cmp	r3, r2
 800af8c:	d027      	beq.n	800afde <TestLoRaModuleComms+0x13e>
 800af8e:	4b35      	ldr	r3, [pc, #212]	; (800b064 <TestLoRaModuleComms+0x1c4>)
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	4a3d      	ldr	r2, [pc, #244]	; (800b088 <TestLoRaModuleComms+0x1e8>)
 800af94:	4293      	cmp	r3, r2
 800af96:	d022      	beq.n	800afde <TestLoRaModuleComms+0x13e>
 800af98:	4b32      	ldr	r3, [pc, #200]	; (800b064 <TestLoRaModuleComms+0x1c4>)
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	4a3b      	ldr	r2, [pc, #236]	; (800b08c <TestLoRaModuleComms+0x1ec>)
 800af9e:	4293      	cmp	r3, r2
 800afa0:	d01d      	beq.n	800afde <TestLoRaModuleComms+0x13e>
 800afa2:	4b30      	ldr	r3, [pc, #192]	; (800b064 <TestLoRaModuleComms+0x1c4>)
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	4a3a      	ldr	r2, [pc, #232]	; (800b090 <TestLoRaModuleComms+0x1f0>)
 800afa8:	4293      	cmp	r3, r2
 800afaa:	d018      	beq.n	800afde <TestLoRaModuleComms+0x13e>
 800afac:	4b2d      	ldr	r3, [pc, #180]	; (800b064 <TestLoRaModuleComms+0x1c4>)
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	4a38      	ldr	r2, [pc, #224]	; (800b094 <TestLoRaModuleComms+0x1f4>)
 800afb2:	4293      	cmp	r3, r2
 800afb4:	d013      	beq.n	800afde <TestLoRaModuleComms+0x13e>
 800afb6:	4b2b      	ldr	r3, [pc, #172]	; (800b064 <TestLoRaModuleComms+0x1c4>)
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	4a37      	ldr	r2, [pc, #220]	; (800b098 <TestLoRaModuleComms+0x1f8>)
 800afbc:	4293      	cmp	r3, r2
 800afbe:	d00e      	beq.n	800afde <TestLoRaModuleComms+0x13e>
 800afc0:	4b28      	ldr	r3, [pc, #160]	; (800b064 <TestLoRaModuleComms+0x1c4>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	4a35      	ldr	r2, [pc, #212]	; (800b09c <TestLoRaModuleComms+0x1fc>)
 800afc6:	4293      	cmp	r3, r2
 800afc8:	d009      	beq.n	800afde <TestLoRaModuleComms+0x13e>
 800afca:	4b26      	ldr	r3, [pc, #152]	; (800b064 <TestLoRaModuleComms+0x1c4>)
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	4a34      	ldr	r2, [pc, #208]	; (800b0a0 <TestLoRaModuleComms+0x200>)
 800afd0:	4293      	cmp	r3, r2
 800afd2:	d004      	beq.n	800afde <TestLoRaModuleComms+0x13e>
 800afd4:	4b23      	ldr	r3, [pc, #140]	; (800b064 <TestLoRaModuleComms+0x1c4>)
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	4a32      	ldr	r2, [pc, #200]	; (800b0a4 <TestLoRaModuleComms+0x204>)
 800afda:	4293      	cmp	r3, r2
 800afdc:	d108      	bne.n	800aff0 <TestLoRaModuleComms+0x150>
 800afde:	4b21      	ldr	r3, [pc, #132]	; (800b064 <TestLoRaModuleComms+0x1c4>)
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	681a      	ldr	r2, [r3, #0]
 800afe4:	4b1f      	ldr	r3, [pc, #124]	; (800b064 <TestLoRaModuleComms+0x1c4>)
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	f022 0208 	bic.w	r2, r2, #8
 800afec:	601a      	str	r2, [r3, #0]
 800afee:	e007      	b.n	800b000 <TestLoRaModuleComms+0x160>
 800aff0:	4b1c      	ldr	r3, [pc, #112]	; (800b064 <TestLoRaModuleComms+0x1c4>)
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	681a      	ldr	r2, [r3, #0]
 800aff6:	4b1b      	ldr	r3, [pc, #108]	; (800b064 <TestLoRaModuleComms+0x1c4>)
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	f022 0204 	bic.w	r2, r2, #4
 800affe:	601a      	str	r2, [r3, #0]

	if(HAL_UART_Transmit_DMA(&huart4, (uint8_t*)LoRaTxBuffer, Size-1)!= HAL_OK)
 800b000:	79fb      	ldrb	r3, [r7, #7]
 800b002:	b29b      	uxth	r3, r3
 800b004:	3b01      	subs	r3, #1
 800b006:	b29b      	uxth	r3, r3
 800b008:	461a      	mov	r2, r3
 800b00a:	4912      	ldr	r1, [pc, #72]	; (800b054 <TestLoRaModuleComms+0x1b4>)
 800b00c:	4812      	ldr	r0, [pc, #72]	; (800b058 <TestLoRaModuleComms+0x1b8>)
 800b00e:	f7fd fe3d 	bl	8008c8c <HAL_UART_Transmit_DMA>
 800b012:	4603      	mov	r3, r0
 800b014:	2b00      	cmp	r3, #0
 800b016:	d004      	beq.n	800b022 <TestLoRaModuleComms+0x182>
	{
		  printf("DMA Error2 \n\r");
 800b018:	4823      	ldr	r0, [pc, #140]	; (800b0a8 <TestLoRaModuleComms+0x208>)
 800b01a:	f003 fd59 	bl	800ead0 <iprintf>
		  return false;
 800b01e:	2300      	movs	r3, #0
 800b020:	e014      	b.n	800b04c <TestLoRaModuleComms+0x1ac>
	}

	while(LoRaDataReceivedFlag == false) {};
 800b022:	bf00      	nop
 800b024:	4b21      	ldr	r3, [pc, #132]	; (800b0ac <TestLoRaModuleComms+0x20c>)
 800b026:	781b      	ldrb	r3, [r3, #0]
 800b028:	b2db      	uxtb	r3, r3
 800b02a:	f083 0301 	eor.w	r3, r3, #1
 800b02e:	b2db      	uxtb	r3, r3
 800b030:	2b00      	cmp	r3, #0
 800b032:	d1f7      	bne.n	800b024 <TestLoRaModuleComms+0x184>

	status = ProcessRxLoraDataForConsoleDisplay(LoRaRxBuffer, LoRaRxBuf_SIZE);
 800b034:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b038:	68f8      	ldr	r0, [r7, #12]
 800b03a:	f000 f839 	bl	800b0b0 <ProcessRxLoraDataForConsoleDisplay>
 800b03e:	4603      	mov	r3, r0
 800b040:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	LoRaDataReceivedFlag = false;
 800b044:	4b19      	ldr	r3, [pc, #100]	; (800b0ac <TestLoRaModuleComms+0x20c>)
 800b046:	2200      	movs	r2, #0
 800b048:	701a      	strb	r2, [r3, #0]

	return true;
 800b04a:	2301      	movs	r3, #1
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	3730      	adds	r7, #48	; 0x30
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}
 800b054:	30004c00 	.word	0x30004c00
 800b058:	240001fc 	.word	0x240001fc
 800b05c:	08010dbc 	.word	0x08010dbc
 800b060:	08010df8 	.word	0x08010df8
 800b064:	240004a8 	.word	0x240004a8
 800b068:	40020010 	.word	0x40020010
 800b06c:	40020028 	.word	0x40020028
 800b070:	40020040 	.word	0x40020040
 800b074:	40020058 	.word	0x40020058
 800b078:	40020070 	.word	0x40020070
 800b07c:	40020088 	.word	0x40020088
 800b080:	400200a0 	.word	0x400200a0
 800b084:	400200b8 	.word	0x400200b8
 800b088:	40020410 	.word	0x40020410
 800b08c:	40020428 	.word	0x40020428
 800b090:	40020440 	.word	0x40020440
 800b094:	40020458 	.word	0x40020458
 800b098:	40020470 	.word	0x40020470
 800b09c:	40020488 	.word	0x40020488
 800b0a0:	400204a0 	.word	0x400204a0
 800b0a4:	400204b8 	.word	0x400204b8
 800b0a8:	08010e08 	.word	0x08010e08
 800b0ac:	240001fb 	.word	0x240001fb

0800b0b0 <ProcessRxLoraDataForConsoleDisplay>:
///
/// @param  Size : size of data received from DMA receive
/// @retval none
///
bool ProcessRxLoraDataForConsoleDisplay(uint8_t *LoRaRxBuffer, uint16_t Size)
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b08c      	sub	sp, #48	; 0x30
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
 800b0b8:	460b      	mov	r3, r1
 800b0ba:	807b      	strh	r3, [r7, #2]
	uint8_t OkResponseStr[] = "\r\n\++OK\r\n";
 800b0bc:	4a20      	ldr	r2, [pc, #128]	; (800b140 <ProcessRxLoraDataForConsoleDisplay+0x90>)
 800b0be:	f107 0320 	add.w	r3, r7, #32
 800b0c2:	ca07      	ldmia	r2, {r0, r1, r2}
 800b0c4:	c303      	stmia	r3!, {r0, r1}
 800b0c6:	701a      	strb	r2, [r3, #0]
	uint8_t  buffer[20] = {0};
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	60fb      	str	r3, [r7, #12]
 800b0cc:	f107 0310 	add.w	r3, r7, #16
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	601a      	str	r2, [r3, #0]
 800b0d4:	605a      	str	r2, [r3, #4]
 800b0d6:	609a      	str	r2, [r3, #8]
 800b0d8:	60da      	str	r2, [r3, #12]

	printf("%s \n\r", LoRaRxBuffer);
 800b0da:	6879      	ldr	r1, [r7, #4]
 800b0dc:	4819      	ldr	r0, [pc, #100]	; (800b144 <ProcessRxLoraDataForConsoleDisplay+0x94>)
 800b0de:	f003 fcf7 	bl	800ead0 <iprintf>

	sprintf(buffer, "%s", (uint8_t *)LoRaRxBuffer);
 800b0e2:	f107 030c 	add.w	r3, r7, #12
 800b0e6:	687a      	ldr	r2, [r7, #4]
 800b0e8:	4917      	ldr	r1, [pc, #92]	; (800b148 <ProcessRxLoraDataForConsoleDisplay+0x98>)
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	f003 fd92 	bl	800ec14 <siprintf>


	//if(
	memset(LoRaRxBuffer, 0, LoRaRxBuf_SIZE);
 800b0f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b0f4:	2100      	movs	r1, #0
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f003 feae 	bl	800ee58 <memset>

	int result = strncmp((char *)LoRaRxBuffer, (char *)OkResponseStr, Size);
 800b0fc:	887a      	ldrh	r2, [r7, #2]
 800b0fe:	f107 0320 	add.w	r3, r7, #32
 800b102:	4619      	mov	r1, r3
 800b104:	6878      	ldr	r0, [r7, #4]
 800b106:	f003 feaf 	bl	800ee68 <strncmp>
 800b10a:	62f8      	str	r0, [r7, #44]	; 0x2c

	if((LoRaMsgSent == true) && (result == 0))
 800b10c:	4b0f      	ldr	r3, [pc, #60]	; (800b14c <ProcessRxLoraDataForConsoleDisplay+0x9c>)
 800b10e:	781b      	ldrb	r3, [r3, #0]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d005      	beq.n	800b120 <ProcessRxLoraDataForConsoleDisplay+0x70>
 800b114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b116:	2b00      	cmp	r3, #0
 800b118:	d102      	bne.n	800b120 <ProcessRxLoraDataForConsoleDisplay+0x70>
	{
		printf("Message sent successfully \n");
 800b11a:	480d      	ldr	r0, [pc, #52]	; (800b150 <ProcessRxLoraDataForConsoleDisplay+0xa0>)
 800b11c:	f003 fd3e 	bl	800eb9c <puts>
	}

	memset(LoRaRxBuffer, 0, LoRaRxBuf_SIZE);
 800b120:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b124:	2100      	movs	r1, #0
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	f003 fe96 	bl	800ee58 <memset>

	if (result == 0)
 800b12c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d101      	bne.n	800b136 <ProcessRxLoraDataForConsoleDisplay+0x86>
	{
	   return true;
 800b132:	2301      	movs	r3, #1
 800b134:	e000      	b.n	800b138 <ProcessRxLoraDataForConsoleDisplay+0x88>
	}
	else
	{
	   return false;
 800b136:	2300      	movs	r3, #0
	}
}
 800b138:	4618      	mov	r0, r3
 800b13a:	3730      	adds	r7, #48	; 0x30
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bd80      	pop	{r7, pc}
 800b140:	08010e40 	.word	0x08010e40
 800b144:	08010e18 	.word	0x08010e18
 800b148:	08010e20 	.word	0x08010e20
 800b14c:	240006ac 	.word	0x240006ac
 800b150:	08010e24 	.word	0x08010e24

0800b154 <ProcessRxLoRaMsg>:
}



void ProcessRxLoRaMsg(uint8_t *LoRaRxBuffer, uint16_t Size)
{
 800b154:	b5b0      	push	{r4, r5, r7, lr}
 800b156:	b09e      	sub	sp, #120	; 0x78
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
 800b15c:	460b      	mov	r3, r1
 800b15e:	807b      	strh	r3, [r7, #2]
	uint8_t OkResponseStr1[] = "+OK\r\n\r\n";
 800b160:	4a3a      	ldr	r2, [pc, #232]	; (800b24c <ProcessRxLoRaMsg+0xf8>)
 800b162:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800b166:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b16a:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t OkResponseStr2[] = "\r\n\AT_ERROR\r\n";
 800b16e:	4b38      	ldr	r3, [pc, #224]	; (800b250 <ProcessRxLoRaMsg+0xfc>)
 800b170:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 800b174:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b176:	c407      	stmia	r4!, {r0, r1, r2}
 800b178:	7023      	strb	r3, [r4, #0]
	uint8_t DataSentReplyMsg1Str[] = "\r\n\AT_NO_NETWORK_JOINED\r\n";
 800b17a:	4b36      	ldr	r3, [pc, #216]	; (800b254 <ProcessRxLoRaMsg+0x100>)
 800b17c:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800b180:	461d      	mov	r5, r3
 800b182:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b184:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b186:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b18a:	c403      	stmia	r4!, {r0, r1}
 800b18c:	7022      	strb	r2, [r4, #0]
	uint8_t  buffer[50] = {0};
 800b18e:	2300      	movs	r3, #0
 800b190:	60fb      	str	r3, [r7, #12]
 800b192:	f107 0310 	add.w	r3, r7, #16
 800b196:	222e      	movs	r2, #46	; 0x2e
 800b198:	2100      	movs	r1, #0
 800b19a:	4618      	mov	r0, r3
 800b19c:	f003 fe5c 	bl	800ee58 <memset>
	int result;


	printf("%s", (uint8_t *)LoRaRxBuffer);
 800b1a0:	6879      	ldr	r1, [r7, #4]
 800b1a2:	482d      	ldr	r0, [pc, #180]	; (800b258 <ProcessRxLoRaMsg+0x104>)
 800b1a4:	f003 fc94 	bl	800ead0 <iprintf>

	sprintf(buffer, "%s", (uint8_t *)LoRaRxBuffer);
 800b1a8:	f107 030c 	add.w	r3, r7, #12
 800b1ac:	687a      	ldr	r2, [r7, #4]
 800b1ae:	492a      	ldr	r1, [pc, #168]	; (800b258 <ProcessRxLoRaMsg+0x104>)
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	f003 fd2f 	bl	800ec14 <siprintf>

	result = strncmp((char *)LoRaRxBuffer, (char *)DataSentReplyMsg1Str, Size);
 800b1b6:	887a      	ldrh	r2, [r7, #2]
 800b1b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b1bc:	4619      	mov	r1, r3
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	f003 fe52 	bl	800ee68 <strncmp>
 800b1c4:	6778      	str	r0, [r7, #116]	; 0x74
	if (result == 0)
 800b1c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d102      	bne.n	800b1d2 <ProcessRxLoRaMsg+0x7e>
	{
		printf("Error Message: AT_NO_NETWORK_JOINED \n\r");
 800b1cc:	4823      	ldr	r0, [pc, #140]	; (800b25c <ProcessRxLoRaMsg+0x108>)
 800b1ce:	f003 fc7f 	bl	800ead0 <iprintf>
	}

	result = strncmp((char *)LoRaRxBuffer, (char *)OkResponseStr1, Size);
 800b1d2:	887a      	ldrh	r2, [r7, #2]
 800b1d4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800b1d8:	4619      	mov	r1, r3
 800b1da:	6878      	ldr	r0, [r7, #4]
 800b1dc:	f003 fe44 	bl	800ee68 <strncmp>
 800b1e0:	6778      	str	r0, [r7, #116]	; 0x74
	if ((result == 0) && (LoRaMsgSent = false))
 800b1e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d102      	bne.n	800b1ee <ProcessRxLoRaMsg+0x9a>
 800b1e8:	4b1d      	ldr	r3, [pc, #116]	; (800b260 <ProcessRxLoRaMsg+0x10c>)
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	701a      	strb	r2, [r3, #0]
	{
		printf("AT Message: OK \n\r");
	}

	result = memcmp(buffer, (char *)OkResponseStr1, 3);
 800b1ee:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 800b1f2:	f107 030c 	add.w	r3, r7, #12
 800b1f6:	2203      	movs	r2, #3
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	f003 fe03 	bl	800ee04 <memcmp>
 800b1fe:	6778      	str	r0, [r7, #116]	; 0x74
	if((LoRaMsgSent == true) && (result == 0))
 800b200:	4b17      	ldr	r3, [pc, #92]	; (800b260 <ProcessRxLoRaMsg+0x10c>)
 800b202:	781b      	ldrb	r3, [r3, #0]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d008      	beq.n	800b21a <ProcessRxLoRaMsg+0xc6>
 800b208:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d105      	bne.n	800b21a <ProcessRxLoRaMsg+0xc6>
	{
		printf("Message sent successfully \n\r");
 800b20e:	4815      	ldr	r0, [pc, #84]	; (800b264 <ProcessRxLoRaMsg+0x110>)
 800b210:	f003 fc5e 	bl	800ead0 <iprintf>

		LoRaMsgSent = false;
 800b214:	4b12      	ldr	r3, [pc, #72]	; (800b260 <ProcessRxLoRaMsg+0x10c>)
 800b216:	2200      	movs	r2, #0
 800b218:	701a      	strb	r2, [r3, #0]
	}

	result = strncmp((char *)LoRaRxBuffer, (char *)OkResponseStr2, Size);
 800b21a:	887a      	ldrh	r2, [r7, #2]
 800b21c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800b220:	4619      	mov	r1, r3
 800b222:	6878      	ldr	r0, [r7, #4]
 800b224:	f003 fe20 	bl	800ee68 <strncmp>
 800b228:	6778      	str	r0, [r7, #116]	; 0x74
	if (result == 0)
 800b22a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d102      	bne.n	800b236 <ProcessRxLoRaMsg+0xe2>
	{
		printf("AT Message: AT_ERROR\n\r");
 800b230:	480d      	ldr	r0, [pc, #52]	; (800b268 <ProcessRxLoRaMsg+0x114>)
 800b232:	f003 fc4d 	bl	800ead0 <iprintf>
	}

	memset(LoRaRxBuffer, 0, LoRaRxBuf_SIZE);
 800b236:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b23a:	2100      	movs	r1, #0
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	f003 fe0b 	bl	800ee58 <memset>
}
 800b242:	bf00      	nop
 800b244:	3778      	adds	r7, #120	; 0x78
 800b246:	46bd      	mov	sp, r7
 800b248:	bdb0      	pop	{r4, r5, r7, pc}
 800b24a:	bf00      	nop
 800b24c:	08010ec8 	.word	0x08010ec8
 800b250:	08010ed0 	.word	0x08010ed0
 800b254:	08010ee0 	.word	0x08010ee0
 800b258:	08010e20 	.word	0x08010e20
 800b25c:	08010e68 	.word	0x08010e68
 800b260:	240006ac 	.word	0x240006ac
 800b264:	08010e90 	.word	0x08010e90
 800b268:	08010eb0 	.word	0x08010eb0

0800b26c <QueryLoRaModule>:



void QueryLoRaModule(void)
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b082      	sub	sp, #8
 800b270:	af00      	add	r7, sp, #0
	  bool status = false;
 800b272:	2300      	movs	r3, #0
 800b274:	71fb      	strb	r3, [r7, #7]

	 //send uart tx to LORa Module
	  status = TestLoRaModuleComms(LoRaRxBuffer, LoRaATcommand, sizeof(LoRaATcommand));
 800b276:	2204      	movs	r2, #4
 800b278:	4915      	ldr	r1, [pc, #84]	; (800b2d0 <QueryLoRaModule+0x64>)
 800b27a:	4816      	ldr	r0, [pc, #88]	; (800b2d4 <QueryLoRaModule+0x68>)
 800b27c:	f7ff fe10 	bl	800aea0 <TestLoRaModuleComms>
 800b280:	4603      	mov	r3, r0
 800b282:	71fb      	strb	r3, [r7, #7]
	  if(status)
 800b284:	79fb      	ldrb	r3, [r7, #7]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d002      	beq.n	800b290 <QueryLoRaModule+0x24>
	  {
		  printf("Lora Module responded to AT command \n\n\r");
 800b28a:	4813      	ldr	r0, [pc, #76]	; (800b2d8 <QueryLoRaModule+0x6c>)
 800b28c:	f003 fc20 	bl	800ead0 <iprintf>
//	  status = TestLoRaModuleComms(LoRaRxBuffer, LoRaJoinATcommand , sizeof(LoRaJoinATcommand));
//	  status = TestLoRaModuleComms(LoRaRxBuffer, LoRaGetRFParametersATcommand , sizeof(LoRaGetRFParametersATcommand));
//	  status = TestLoRaModuleComms(LoRaRxBuffer, LoRaGetRFPowerATcommand , sizeof(LoRaGetRFPowerATcommand));
//	  status = TestLoRaModuleComms(LoRaRxBuffer, LoRaGetDataRateATcommand, sizeof(LoRaGetDataRateATcommand));
//	  status = TestLoRaModuleComms(LoRaRxBuffer, LoRaGetRxChannelFreqATcommand , sizeof(LoRaGetRxChannelFreqATcommand));
	  status = TestLoRaModuleComms(LoRaRxBuffer, LoRaGetDataRateATcommand, sizeof(LoRaGetDataRateATcommand));
 800b290:	2208      	movs	r2, #8
 800b292:	4912      	ldr	r1, [pc, #72]	; (800b2dc <QueryLoRaModule+0x70>)
 800b294:	480f      	ldr	r0, [pc, #60]	; (800b2d4 <QueryLoRaModule+0x68>)
 800b296:	f7ff fe03 	bl	800aea0 <TestLoRaModuleComms>
 800b29a:	4603      	mov	r3, r0
 800b29c:	71fb      	strb	r3, [r7, #7]

	  status = TestLoRaModuleComms(LoRaRxBuffer, LoRaGetPortATcommand , sizeof(LoRaGetPortATcommand));
 800b29e:	220a      	movs	r2, #10
 800b2a0:	490f      	ldr	r1, [pc, #60]	; (800b2e0 <QueryLoRaModule+0x74>)
 800b2a2:	480c      	ldr	r0, [pc, #48]	; (800b2d4 <QueryLoRaModule+0x68>)
 800b2a4:	f7ff fdfc 	bl	800aea0 <TestLoRaModuleComms>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	71fb      	strb	r3, [r7, #7]
	  status = TestLoRaModuleComms(LoRaRxBuffer, LoRaSendHelloMsgATcommand, sizeof(LoRaSendHelloMsgATcommand));
 800b2ac:	2210      	movs	r2, #16
 800b2ae:	490d      	ldr	r1, [pc, #52]	; (800b2e4 <QueryLoRaModule+0x78>)
 800b2b0:	4808      	ldr	r0, [pc, #32]	; (800b2d4 <QueryLoRaModule+0x68>)
 800b2b2:	f7ff fdf5 	bl	800aea0 <TestLoRaModuleComms>
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	71fb      	strb	r3, [r7, #7]
	  status = TestLoRaModuleComms(LoRaRxBuffer, LoRaGetRssiATcommand , sizeof(LoRaGetRssiATcommand));
 800b2ba:	2209      	movs	r2, #9
 800b2bc:	490a      	ldr	r1, [pc, #40]	; (800b2e8 <QueryLoRaModule+0x7c>)
 800b2be:	4805      	ldr	r0, [pc, #20]	; (800b2d4 <QueryLoRaModule+0x68>)
 800b2c0:	f7ff fdee 	bl	800aea0 <TestLoRaModuleComms>
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	71fb      	strb	r3, [r7, #7]

}
 800b2c8:	bf00      	nop
 800b2ca:	3708      	adds	r7, #8
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	bd80      	pop	{r7, pc}
 800b2d0:	08011024 	.word	0x08011024
 800b2d4:	30004800 	.word	0x30004800
 800b2d8:	08010efc 	.word	0x08010efc
 800b2dc:	08011028 	.word	0x08011028
 800b2e0:	08011030 	.word	0x08011030
 800b2e4:	0801103c 	.word	0x0801103c
 800b2e8:	0801104c 	.word	0x0801104c

0800b2ec <ReadRcvMsgRRSI>:


void ReadRcvMsgRRSI(void)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b082      	sub	sp, #8
 800b2f0:	af00      	add	r7, sp, #0
   bool status = false;
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	71fb      	strb	r3, [r7, #7]
   status = TestLoRaModuleComms(LoRaRxBuffer, LoRaGetRssiATcommand , sizeof(LoRaGetRssiATcommand));
 800b2f6:	2209      	movs	r2, #9
 800b2f8:	4904      	ldr	r1, [pc, #16]	; (800b30c <ReadRcvMsgRRSI+0x20>)
 800b2fa:	4805      	ldr	r0, [pc, #20]	; (800b310 <ReadRcvMsgRRSI+0x24>)
 800b2fc:	f7ff fdd0 	bl	800aea0 <TestLoRaModuleComms>
 800b300:	4603      	mov	r3, r0
 800b302:	71fb      	strb	r3, [r7, #7]
}
 800b304:	bf00      	nop
 800b306:	3708      	adds	r7, #8
 800b308:	46bd      	mov	sp, r7
 800b30a:	bd80      	pop	{r7, pc}
 800b30c:	0801104c 	.word	0x0801104c
 800b310:	30004800 	.word	0x30004800

0800b314 <SendLoraMsg>:

void SendLoraMsg(void)
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b082      	sub	sp, #8
 800b318:	af00      	add	r7, sp, #0
	bool status = false;
 800b31a:	2300      	movs	r3, #0
 800b31c:	71fb      	strb	r3, [r7, #7]

	LoRaMsgSent = true;
 800b31e:	4b0b      	ldr	r3, [pc, #44]	; (800b34c <SendLoraMsg+0x38>)
 800b320:	2201      	movs	r2, #1
 800b322:	701a      	strb	r2, [r3, #0]

	// Turn ON the RF path for LORa RF path
    HAL_GPIO_WritePin(RF_SW_CNTRL_GPIO_Port, RF_SW_CNTRL_Pin, GPIO_PIN_SET);
 800b324:	2201      	movs	r2, #1
 800b326:	2101      	movs	r1, #1
 800b328:	4809      	ldr	r0, [pc, #36]	; (800b350 <SendLoraMsg+0x3c>)
 800b32a:	f7fa fac5 	bl	80058b8 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800b32e:	2064      	movs	r0, #100	; 0x64
 800b330:	f7f6 fd3c 	bl	8001dac <HAL_Delay>
    status = TestLoRaModuleComms(LoRaRxBuffer, LoRaSendHelloMsgATcommand, sizeof(LoRaSendHelloMsgATcommand));
 800b334:	2210      	movs	r2, #16
 800b336:	4907      	ldr	r1, [pc, #28]	; (800b354 <SendLoraMsg+0x40>)
 800b338:	4807      	ldr	r0, [pc, #28]	; (800b358 <SendLoraMsg+0x44>)
 800b33a:	f7ff fdb1 	bl	800aea0 <TestLoRaModuleComms>
 800b33e:	4603      	mov	r3, r0
 800b340:	71fb      	strb	r3, [r7, #7]
}
 800b342:	bf00      	nop
 800b344:	3708      	adds	r7, #8
 800b346:	46bd      	mov	sp, r7
 800b348:	bd80      	pop	{r7, pc}
 800b34a:	bf00      	nop
 800b34c:	240006ac 	.word	0x240006ac
 800b350:	58020400 	.word	0x58020400
 800b354:	0801103c 	.word	0x0801103c
 800b358:	30004800 	.word	0x30004800

0800b35c <__NVIC_SetPriority>:
{
 800b35c:	b480      	push	{r7}
 800b35e:	b083      	sub	sp, #12
 800b360:	af00      	add	r7, sp, #0
 800b362:	4603      	mov	r3, r0
 800b364:	6039      	str	r1, [r7, #0]
 800b366:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800b368:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	db0a      	blt.n	800b386 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	b2da      	uxtb	r2, r3
 800b374:	490c      	ldr	r1, [pc, #48]	; (800b3a8 <__NVIC_SetPriority+0x4c>)
 800b376:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b37a:	0112      	lsls	r2, r2, #4
 800b37c:	b2d2      	uxtb	r2, r2
 800b37e:	440b      	add	r3, r1
 800b380:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b384:	e00a      	b.n	800b39c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b386:	683b      	ldr	r3, [r7, #0]
 800b388:	b2da      	uxtb	r2, r3
 800b38a:	4908      	ldr	r1, [pc, #32]	; (800b3ac <__NVIC_SetPriority+0x50>)
 800b38c:	88fb      	ldrh	r3, [r7, #6]
 800b38e:	f003 030f 	and.w	r3, r3, #15
 800b392:	3b04      	subs	r3, #4
 800b394:	0112      	lsls	r2, r2, #4
 800b396:	b2d2      	uxtb	r2, r2
 800b398:	440b      	add	r3, r1
 800b39a:	761a      	strb	r2, [r3, #24]
}
 800b39c:	bf00      	nop
 800b39e:	370c      	adds	r7, #12
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a6:	4770      	bx	lr
 800b3a8:	e000e100 	.word	0xe000e100
 800b3ac:	e000ed00 	.word	0xe000ed00

0800b3b0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b3b4:	4b05      	ldr	r3, [pc, #20]	; (800b3cc <SysTick_Handler+0x1c>)
 800b3b6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b3b8:	f001 fe08 	bl	800cfcc <xTaskGetSchedulerState>
 800b3bc:	4603      	mov	r3, r0
 800b3be:	2b01      	cmp	r3, #1
 800b3c0:	d001      	beq.n	800b3c6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b3c2:	f002 fbf1 	bl	800dba8 <xPortSysTickHandler>
  }
}
 800b3c6:	bf00      	nop
 800b3c8:	bd80      	pop	{r7, pc}
 800b3ca:	bf00      	nop
 800b3cc:	e000e010 	.word	0xe000e010

0800b3d0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b3d4:	2100      	movs	r1, #0
 800b3d6:	f06f 0004 	mvn.w	r0, #4
 800b3da:	f7ff ffbf 	bl	800b35c <__NVIC_SetPriority>
#endif
}
 800b3de:	bf00      	nop
 800b3e0:	bd80      	pop	{r7, pc}
	...

0800b3e4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b3e4:	b480      	push	{r7}
 800b3e6:	b083      	sub	sp, #12
 800b3e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b3ea:	f3ef 8305 	mrs	r3, IPSR
 800b3ee:	603b      	str	r3, [r7, #0]
  return(result);
 800b3f0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d003      	beq.n	800b3fe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b3f6:	f06f 0305 	mvn.w	r3, #5
 800b3fa:	607b      	str	r3, [r7, #4]
 800b3fc:	e00c      	b.n	800b418 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b3fe:	4b0a      	ldr	r3, [pc, #40]	; (800b428 <osKernelInitialize+0x44>)
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d105      	bne.n	800b412 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b406:	4b08      	ldr	r3, [pc, #32]	; (800b428 <osKernelInitialize+0x44>)
 800b408:	2201      	movs	r2, #1
 800b40a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b40c:	2300      	movs	r3, #0
 800b40e:	607b      	str	r3, [r7, #4]
 800b410:	e002      	b.n	800b418 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b412:	f04f 33ff 	mov.w	r3, #4294967295
 800b416:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b418:	687b      	ldr	r3, [r7, #4]
}
 800b41a:	4618      	mov	r0, r3
 800b41c:	370c      	adds	r7, #12
 800b41e:	46bd      	mov	sp, r7
 800b420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b424:	4770      	bx	lr
 800b426:	bf00      	nop
 800b428:	240006b0 	.word	0x240006b0

0800b42c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b082      	sub	sp, #8
 800b430:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b432:	f3ef 8305 	mrs	r3, IPSR
 800b436:	603b      	str	r3, [r7, #0]
  return(result);
 800b438:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d003      	beq.n	800b446 <osKernelStart+0x1a>
    stat = osErrorISR;
 800b43e:	f06f 0305 	mvn.w	r3, #5
 800b442:	607b      	str	r3, [r7, #4]
 800b444:	e010      	b.n	800b468 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b446:	4b0b      	ldr	r3, [pc, #44]	; (800b474 <osKernelStart+0x48>)
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	2b01      	cmp	r3, #1
 800b44c:	d109      	bne.n	800b462 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b44e:	f7ff ffbf 	bl	800b3d0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b452:	4b08      	ldr	r3, [pc, #32]	; (800b474 <osKernelStart+0x48>)
 800b454:	2202      	movs	r2, #2
 800b456:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b458:	f001 f94c 	bl	800c6f4 <vTaskStartScheduler>
      stat = osOK;
 800b45c:	2300      	movs	r3, #0
 800b45e:	607b      	str	r3, [r7, #4]
 800b460:	e002      	b.n	800b468 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b462:	f04f 33ff 	mov.w	r3, #4294967295
 800b466:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b468:	687b      	ldr	r3, [r7, #4]
}
 800b46a:	4618      	mov	r0, r3
 800b46c:	3708      	adds	r7, #8
 800b46e:	46bd      	mov	sp, r7
 800b470:	bd80      	pop	{r7, pc}
 800b472:	bf00      	nop
 800b474:	240006b0 	.word	0x240006b0

0800b478 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b478:	b580      	push	{r7, lr}
 800b47a:	b08e      	sub	sp, #56	; 0x38
 800b47c:	af04      	add	r7, sp, #16
 800b47e:	60f8      	str	r0, [r7, #12]
 800b480:	60b9      	str	r1, [r7, #8]
 800b482:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b484:	2300      	movs	r3, #0
 800b486:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b488:	f3ef 8305 	mrs	r3, IPSR
 800b48c:	617b      	str	r3, [r7, #20]
  return(result);
 800b48e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b490:	2b00      	cmp	r3, #0
 800b492:	d17e      	bne.n	800b592 <osThreadNew+0x11a>
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d07b      	beq.n	800b592 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b49a:	2380      	movs	r3, #128	; 0x80
 800b49c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b49e:	2318      	movs	r3, #24
 800b4a0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800b4a6:	f04f 33ff 	mov.w	r3, #4294967295
 800b4aa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d045      	beq.n	800b53e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d002      	beq.n	800b4c0 <osThreadNew+0x48>
        name = attr->name;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	699b      	ldr	r3, [r3, #24]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d002      	beq.n	800b4ce <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	699b      	ldr	r3, [r3, #24]
 800b4cc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b4ce:	69fb      	ldr	r3, [r7, #28]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d008      	beq.n	800b4e6 <osThreadNew+0x6e>
 800b4d4:	69fb      	ldr	r3, [r7, #28]
 800b4d6:	2b38      	cmp	r3, #56	; 0x38
 800b4d8:	d805      	bhi.n	800b4e6 <osThreadNew+0x6e>
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	685b      	ldr	r3, [r3, #4]
 800b4de:	f003 0301 	and.w	r3, r3, #1
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d001      	beq.n	800b4ea <osThreadNew+0x72>
        return (NULL);
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	e054      	b.n	800b594 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	695b      	ldr	r3, [r3, #20]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d003      	beq.n	800b4fa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	695b      	ldr	r3, [r3, #20]
 800b4f6:	089b      	lsrs	r3, r3, #2
 800b4f8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	689b      	ldr	r3, [r3, #8]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d00e      	beq.n	800b520 <osThreadNew+0xa8>
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	68db      	ldr	r3, [r3, #12]
 800b506:	2ba7      	cmp	r3, #167	; 0xa7
 800b508:	d90a      	bls.n	800b520 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d006      	beq.n	800b520 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	695b      	ldr	r3, [r3, #20]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d002      	beq.n	800b520 <osThreadNew+0xa8>
        mem = 1;
 800b51a:	2301      	movs	r3, #1
 800b51c:	61bb      	str	r3, [r7, #24]
 800b51e:	e010      	b.n	800b542 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	689b      	ldr	r3, [r3, #8]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d10c      	bne.n	800b542 <osThreadNew+0xca>
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	68db      	ldr	r3, [r3, #12]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d108      	bne.n	800b542 <osThreadNew+0xca>
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	691b      	ldr	r3, [r3, #16]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d104      	bne.n	800b542 <osThreadNew+0xca>
          mem = 0;
 800b538:	2300      	movs	r3, #0
 800b53a:	61bb      	str	r3, [r7, #24]
 800b53c:	e001      	b.n	800b542 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b53e:	2300      	movs	r3, #0
 800b540:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b542:	69bb      	ldr	r3, [r7, #24]
 800b544:	2b01      	cmp	r3, #1
 800b546:	d110      	bne.n	800b56a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b54c:	687a      	ldr	r2, [r7, #4]
 800b54e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b550:	9202      	str	r2, [sp, #8]
 800b552:	9301      	str	r3, [sp, #4]
 800b554:	69fb      	ldr	r3, [r7, #28]
 800b556:	9300      	str	r3, [sp, #0]
 800b558:	68bb      	ldr	r3, [r7, #8]
 800b55a:	6a3a      	ldr	r2, [r7, #32]
 800b55c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b55e:	68f8      	ldr	r0, [r7, #12]
 800b560:	f000 fedc 	bl	800c31c <xTaskCreateStatic>
 800b564:	4603      	mov	r3, r0
 800b566:	613b      	str	r3, [r7, #16]
 800b568:	e013      	b.n	800b592 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b56a:	69bb      	ldr	r3, [r7, #24]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d110      	bne.n	800b592 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b570:	6a3b      	ldr	r3, [r7, #32]
 800b572:	b29a      	uxth	r2, r3
 800b574:	f107 0310 	add.w	r3, r7, #16
 800b578:	9301      	str	r3, [sp, #4]
 800b57a:	69fb      	ldr	r3, [r7, #28]
 800b57c:	9300      	str	r3, [sp, #0]
 800b57e:	68bb      	ldr	r3, [r7, #8]
 800b580:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b582:	68f8      	ldr	r0, [r7, #12]
 800b584:	f000 ff27 	bl	800c3d6 <xTaskCreate>
 800b588:	4603      	mov	r3, r0
 800b58a:	2b01      	cmp	r3, #1
 800b58c:	d001      	beq.n	800b592 <osThreadNew+0x11a>
            hTask = NULL;
 800b58e:	2300      	movs	r3, #0
 800b590:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b592:	693b      	ldr	r3, [r7, #16]
}
 800b594:	4618      	mov	r0, r3
 800b596:	3728      	adds	r7, #40	; 0x28
 800b598:	46bd      	mov	sp, r7
 800b59a:	bd80      	pop	{r7, pc}

0800b59c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b084      	sub	sp, #16
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b5a4:	f3ef 8305 	mrs	r3, IPSR
 800b5a8:	60bb      	str	r3, [r7, #8]
  return(result);
 800b5aa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d003      	beq.n	800b5b8 <osDelay+0x1c>
    stat = osErrorISR;
 800b5b0:	f06f 0305 	mvn.w	r3, #5
 800b5b4:	60fb      	str	r3, [r7, #12]
 800b5b6:	e007      	b.n	800b5c8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d002      	beq.n	800b5c8 <osDelay+0x2c>
      vTaskDelay(ticks);
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	f001 f862 	bl	800c68c <vTaskDelay>
    }
  }

  return (stat);
 800b5c8:	68fb      	ldr	r3, [r7, #12]
}
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	3710      	adds	r7, #16
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	bd80      	pop	{r7, pc}
	...

0800b5d4 <osSemaphoreRelease>:
  }

  return (stat);
}

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b086      	sub	sp, #24
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800b5e4:	693b      	ldr	r3, [r7, #16]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d103      	bne.n	800b5f2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800b5ea:	f06f 0303 	mvn.w	r3, #3
 800b5ee:	617b      	str	r3, [r7, #20]
 800b5f0:	e02c      	b.n	800b64c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b5f2:	f3ef 8305 	mrs	r3, IPSR
 800b5f6:	60fb      	str	r3, [r7, #12]
  return(result);
 800b5f8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d01a      	beq.n	800b634 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800b5fe:	2300      	movs	r3, #0
 800b600:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b602:	f107 0308 	add.w	r3, r7, #8
 800b606:	4619      	mov	r1, r3
 800b608:	6938      	ldr	r0, [r7, #16]
 800b60a:	f000 fbac 	bl	800bd66 <xQueueGiveFromISR>
 800b60e:	4603      	mov	r3, r0
 800b610:	2b01      	cmp	r3, #1
 800b612:	d003      	beq.n	800b61c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800b614:	f06f 0302 	mvn.w	r3, #2
 800b618:	617b      	str	r3, [r7, #20]
 800b61a:	e017      	b.n	800b64c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800b61c:	68bb      	ldr	r3, [r7, #8]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d014      	beq.n	800b64c <osSemaphoreRelease+0x78>
 800b622:	4b0d      	ldr	r3, [pc, #52]	; (800b658 <osSemaphoreRelease+0x84>)
 800b624:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b628:	601a      	str	r2, [r3, #0]
 800b62a:	f3bf 8f4f 	dsb	sy
 800b62e:	f3bf 8f6f 	isb	sy
 800b632:	e00b      	b.n	800b64c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b634:	2300      	movs	r3, #0
 800b636:	2200      	movs	r2, #0
 800b638:	2100      	movs	r1, #0
 800b63a:	6938      	ldr	r0, [r7, #16]
 800b63c:	f000 f9fa 	bl	800ba34 <xQueueGenericSend>
 800b640:	4603      	mov	r3, r0
 800b642:	2b01      	cmp	r3, #1
 800b644:	d002      	beq.n	800b64c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800b646:	f06f 0302 	mvn.w	r3, #2
 800b64a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800b64c:	697b      	ldr	r3, [r7, #20]
}
 800b64e:	4618      	mov	r0, r3
 800b650:	3718      	adds	r7, #24
 800b652:	46bd      	mov	sp, r7
 800b654:	bd80      	pop	{r7, pc}
 800b656:	bf00      	nop
 800b658:	e000ed04 	.word	0xe000ed04

0800b65c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b65c:	b480      	push	{r7}
 800b65e:	b085      	sub	sp, #20
 800b660:	af00      	add	r7, sp, #0
 800b662:	60f8      	str	r0, [r7, #12]
 800b664:	60b9      	str	r1, [r7, #8]
 800b666:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	4a07      	ldr	r2, [pc, #28]	; (800b688 <vApplicationGetIdleTaskMemory+0x2c>)
 800b66c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b66e:	68bb      	ldr	r3, [r7, #8]
 800b670:	4a06      	ldr	r2, [pc, #24]	; (800b68c <vApplicationGetIdleTaskMemory+0x30>)
 800b672:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2280      	movs	r2, #128	; 0x80
 800b678:	601a      	str	r2, [r3, #0]
}
 800b67a:	bf00      	nop
 800b67c:	3714      	adds	r7, #20
 800b67e:	46bd      	mov	sp, r7
 800b680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b684:	4770      	bx	lr
 800b686:	bf00      	nop
 800b688:	240006b4 	.word	0x240006b4
 800b68c:	2400075c 	.word	0x2400075c

0800b690 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b690:	b480      	push	{r7}
 800b692:	b085      	sub	sp, #20
 800b694:	af00      	add	r7, sp, #0
 800b696:	60f8      	str	r0, [r7, #12]
 800b698:	60b9      	str	r1, [r7, #8]
 800b69a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	4a07      	ldr	r2, [pc, #28]	; (800b6bc <vApplicationGetTimerTaskMemory+0x2c>)
 800b6a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b6a2:	68bb      	ldr	r3, [r7, #8]
 800b6a4:	4a06      	ldr	r2, [pc, #24]	; (800b6c0 <vApplicationGetTimerTaskMemory+0x30>)
 800b6a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b6ae:	601a      	str	r2, [r3, #0]
}
 800b6b0:	bf00      	nop
 800b6b2:	3714      	adds	r7, #20
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ba:	4770      	bx	lr
 800b6bc:	2400095c 	.word	0x2400095c
 800b6c0:	24000a04 	.word	0x24000a04

0800b6c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b6c4:	b480      	push	{r7}
 800b6c6:	b083      	sub	sp, #12
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	f103 0208 	add.w	r2, r3, #8
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	f04f 32ff 	mov.w	r2, #4294967295
 800b6dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	f103 0208 	add.w	r2, r3, #8
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	f103 0208 	add.w	r2, r3, #8
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b6f8:	bf00      	nop
 800b6fa:	370c      	adds	r7, #12
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b702:	4770      	bx	lr

0800b704 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b704:	b480      	push	{r7}
 800b706:	b083      	sub	sp, #12
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2200      	movs	r2, #0
 800b710:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b712:	bf00      	nop
 800b714:	370c      	adds	r7, #12
 800b716:	46bd      	mov	sp, r7
 800b718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71c:	4770      	bx	lr

0800b71e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b71e:	b480      	push	{r7}
 800b720:	b085      	sub	sp, #20
 800b722:	af00      	add	r7, sp, #0
 800b724:	6078      	str	r0, [r7, #4]
 800b726:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	685b      	ldr	r3, [r3, #4]
 800b72c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	68fa      	ldr	r2, [r7, #12]
 800b732:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	689a      	ldr	r2, [r3, #8]
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	689b      	ldr	r3, [r3, #8]
 800b740:	683a      	ldr	r2, [r7, #0]
 800b742:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	683a      	ldr	r2, [r7, #0]
 800b748:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	687a      	ldr	r2, [r7, #4]
 800b74e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	1c5a      	adds	r2, r3, #1
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	601a      	str	r2, [r3, #0]
}
 800b75a:	bf00      	nop
 800b75c:	3714      	adds	r7, #20
 800b75e:	46bd      	mov	sp, r7
 800b760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b764:	4770      	bx	lr

0800b766 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b766:	b480      	push	{r7}
 800b768:	b085      	sub	sp, #20
 800b76a:	af00      	add	r7, sp, #0
 800b76c:	6078      	str	r0, [r7, #4]
 800b76e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b770:	683b      	ldr	r3, [r7, #0]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b776:	68bb      	ldr	r3, [r7, #8]
 800b778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b77c:	d103      	bne.n	800b786 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	691b      	ldr	r3, [r3, #16]
 800b782:	60fb      	str	r3, [r7, #12]
 800b784:	e00c      	b.n	800b7a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	3308      	adds	r3, #8
 800b78a:	60fb      	str	r3, [r7, #12]
 800b78c:	e002      	b.n	800b794 <vListInsert+0x2e>
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	685b      	ldr	r3, [r3, #4]
 800b792:	60fb      	str	r3, [r7, #12]
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	685b      	ldr	r3, [r3, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	68ba      	ldr	r2, [r7, #8]
 800b79c:	429a      	cmp	r2, r3
 800b79e:	d2f6      	bcs.n	800b78e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	685a      	ldr	r2, [r3, #4]
 800b7a4:	683b      	ldr	r3, [r7, #0]
 800b7a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	685b      	ldr	r3, [r3, #4]
 800b7ac:	683a      	ldr	r2, [r7, #0]
 800b7ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b7b0:	683b      	ldr	r3, [r7, #0]
 800b7b2:	68fa      	ldr	r2, [r7, #12]
 800b7b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	683a      	ldr	r2, [r7, #0]
 800b7ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b7bc:	683b      	ldr	r3, [r7, #0]
 800b7be:	687a      	ldr	r2, [r7, #4]
 800b7c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	1c5a      	adds	r2, r3, #1
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	601a      	str	r2, [r3, #0]
}
 800b7cc:	bf00      	nop
 800b7ce:	3714      	adds	r7, #20
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d6:	4770      	bx	lr

0800b7d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b7d8:	b480      	push	{r7}
 800b7da:	b085      	sub	sp, #20
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	691b      	ldr	r3, [r3, #16]
 800b7e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	685b      	ldr	r3, [r3, #4]
 800b7ea:	687a      	ldr	r2, [r7, #4]
 800b7ec:	6892      	ldr	r2, [r2, #8]
 800b7ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	689b      	ldr	r3, [r3, #8]
 800b7f4:	687a      	ldr	r2, [r7, #4]
 800b7f6:	6852      	ldr	r2, [r2, #4]
 800b7f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	685b      	ldr	r3, [r3, #4]
 800b7fe:	687a      	ldr	r2, [r7, #4]
 800b800:	429a      	cmp	r2, r3
 800b802:	d103      	bne.n	800b80c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	689a      	ldr	r2, [r3, #8]
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2200      	movs	r2, #0
 800b810:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	1e5a      	subs	r2, r3, #1
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	681b      	ldr	r3, [r3, #0]
}
 800b820:	4618      	mov	r0, r3
 800b822:	3714      	adds	r7, #20
 800b824:	46bd      	mov	sp, r7
 800b826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82a:	4770      	bx	lr

0800b82c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b084      	sub	sp, #16
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
 800b834:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d10a      	bne.n	800b856 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b840:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b844:	f383 8811 	msr	BASEPRI, r3
 800b848:	f3bf 8f6f 	isb	sy
 800b84c:	f3bf 8f4f 	dsb	sy
 800b850:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b852:	bf00      	nop
 800b854:	e7fe      	b.n	800b854 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b856:	f002 f915 	bl	800da84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	681a      	ldr	r2, [r3, #0]
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b862:	68f9      	ldr	r1, [r7, #12]
 800b864:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b866:	fb01 f303 	mul.w	r3, r1, r3
 800b86a:	441a      	add	r2, r3
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	2200      	movs	r2, #0
 800b874:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	681a      	ldr	r2, [r3, #0]
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	681a      	ldr	r2, [r3, #0]
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b886:	3b01      	subs	r3, #1
 800b888:	68f9      	ldr	r1, [r7, #12]
 800b88a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b88c:	fb01 f303 	mul.w	r3, r1, r3
 800b890:	441a      	add	r2, r3
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	22ff      	movs	r2, #255	; 0xff
 800b89a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	22ff      	movs	r2, #255	; 0xff
 800b8a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b8a6:	683b      	ldr	r3, [r7, #0]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d114      	bne.n	800b8d6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	691b      	ldr	r3, [r3, #16]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d01a      	beq.n	800b8ea <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	3310      	adds	r3, #16
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	f001 f9c5 	bl	800cc48 <xTaskRemoveFromEventList>
 800b8be:	4603      	mov	r3, r0
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d012      	beq.n	800b8ea <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b8c4:	4b0c      	ldr	r3, [pc, #48]	; (800b8f8 <xQueueGenericReset+0xcc>)
 800b8c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8ca:	601a      	str	r2, [r3, #0]
 800b8cc:	f3bf 8f4f 	dsb	sy
 800b8d0:	f3bf 8f6f 	isb	sy
 800b8d4:	e009      	b.n	800b8ea <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	3310      	adds	r3, #16
 800b8da:	4618      	mov	r0, r3
 800b8dc:	f7ff fef2 	bl	800b6c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	3324      	adds	r3, #36	; 0x24
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	f7ff feed 	bl	800b6c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b8ea:	f002 f8fb 	bl	800dae4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b8ee:	2301      	movs	r3, #1
}
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	3710      	adds	r7, #16
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	bd80      	pop	{r7, pc}
 800b8f8:	e000ed04 	.word	0xe000ed04

0800b8fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b08e      	sub	sp, #56	; 0x38
 800b900:	af02      	add	r7, sp, #8
 800b902:	60f8      	str	r0, [r7, #12]
 800b904:	60b9      	str	r1, [r7, #8]
 800b906:	607a      	str	r2, [r7, #4]
 800b908:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d10a      	bne.n	800b926 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b910:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b914:	f383 8811 	msr	BASEPRI, r3
 800b918:	f3bf 8f6f 	isb	sy
 800b91c:	f3bf 8f4f 	dsb	sy
 800b920:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b922:	bf00      	nop
 800b924:	e7fe      	b.n	800b924 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d10a      	bne.n	800b942 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b92c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b930:	f383 8811 	msr	BASEPRI, r3
 800b934:	f3bf 8f6f 	isb	sy
 800b938:	f3bf 8f4f 	dsb	sy
 800b93c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b93e:	bf00      	nop
 800b940:	e7fe      	b.n	800b940 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d002      	beq.n	800b94e <xQueueGenericCreateStatic+0x52>
 800b948:	68bb      	ldr	r3, [r7, #8]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d001      	beq.n	800b952 <xQueueGenericCreateStatic+0x56>
 800b94e:	2301      	movs	r3, #1
 800b950:	e000      	b.n	800b954 <xQueueGenericCreateStatic+0x58>
 800b952:	2300      	movs	r3, #0
 800b954:	2b00      	cmp	r3, #0
 800b956:	d10a      	bne.n	800b96e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b95c:	f383 8811 	msr	BASEPRI, r3
 800b960:	f3bf 8f6f 	isb	sy
 800b964:	f3bf 8f4f 	dsb	sy
 800b968:	623b      	str	r3, [r7, #32]
}
 800b96a:	bf00      	nop
 800b96c:	e7fe      	b.n	800b96c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d102      	bne.n	800b97a <xQueueGenericCreateStatic+0x7e>
 800b974:	68bb      	ldr	r3, [r7, #8]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d101      	bne.n	800b97e <xQueueGenericCreateStatic+0x82>
 800b97a:	2301      	movs	r3, #1
 800b97c:	e000      	b.n	800b980 <xQueueGenericCreateStatic+0x84>
 800b97e:	2300      	movs	r3, #0
 800b980:	2b00      	cmp	r3, #0
 800b982:	d10a      	bne.n	800b99a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b984:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b988:	f383 8811 	msr	BASEPRI, r3
 800b98c:	f3bf 8f6f 	isb	sy
 800b990:	f3bf 8f4f 	dsb	sy
 800b994:	61fb      	str	r3, [r7, #28]
}
 800b996:	bf00      	nop
 800b998:	e7fe      	b.n	800b998 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b99a:	2350      	movs	r3, #80	; 0x50
 800b99c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b99e:	697b      	ldr	r3, [r7, #20]
 800b9a0:	2b50      	cmp	r3, #80	; 0x50
 800b9a2:	d00a      	beq.n	800b9ba <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b9a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9a8:	f383 8811 	msr	BASEPRI, r3
 800b9ac:	f3bf 8f6f 	isb	sy
 800b9b0:	f3bf 8f4f 	dsb	sy
 800b9b4:	61bb      	str	r3, [r7, #24]
}
 800b9b6:	bf00      	nop
 800b9b8:	e7fe      	b.n	800b9b8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b9ba:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b9bc:	683b      	ldr	r3, [r7, #0]
 800b9be:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b9c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d00d      	beq.n	800b9e2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b9c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9c8:	2201      	movs	r2, #1
 800b9ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b9ce:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b9d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9d4:	9300      	str	r3, [sp, #0]
 800b9d6:	4613      	mov	r3, r2
 800b9d8:	687a      	ldr	r2, [r7, #4]
 800b9da:	68b9      	ldr	r1, [r7, #8]
 800b9dc:	68f8      	ldr	r0, [r7, #12]
 800b9de:	f000 f805 	bl	800b9ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b9e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	3730      	adds	r7, #48	; 0x30
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bd80      	pop	{r7, pc}

0800b9ec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b084      	sub	sp, #16
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	60f8      	str	r0, [r7, #12]
 800b9f4:	60b9      	str	r1, [r7, #8]
 800b9f6:	607a      	str	r2, [r7, #4]
 800b9f8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b9fa:	68bb      	ldr	r3, [r7, #8]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d103      	bne.n	800ba08 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ba00:	69bb      	ldr	r3, [r7, #24]
 800ba02:	69ba      	ldr	r2, [r7, #24]
 800ba04:	601a      	str	r2, [r3, #0]
 800ba06:	e002      	b.n	800ba0e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ba08:	69bb      	ldr	r3, [r7, #24]
 800ba0a:	687a      	ldr	r2, [r7, #4]
 800ba0c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ba0e:	69bb      	ldr	r3, [r7, #24]
 800ba10:	68fa      	ldr	r2, [r7, #12]
 800ba12:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ba14:	69bb      	ldr	r3, [r7, #24]
 800ba16:	68ba      	ldr	r2, [r7, #8]
 800ba18:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ba1a:	2101      	movs	r1, #1
 800ba1c:	69b8      	ldr	r0, [r7, #24]
 800ba1e:	f7ff ff05 	bl	800b82c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ba22:	69bb      	ldr	r3, [r7, #24]
 800ba24:	78fa      	ldrb	r2, [r7, #3]
 800ba26:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ba2a:	bf00      	nop
 800ba2c:	3710      	adds	r7, #16
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}
	...

0800ba34 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b08e      	sub	sp, #56	; 0x38
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	60f8      	str	r0, [r7, #12]
 800ba3c:	60b9      	str	r1, [r7, #8]
 800ba3e:	607a      	str	r2, [r7, #4]
 800ba40:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ba42:	2300      	movs	r3, #0
 800ba44:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ba4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d10a      	bne.n	800ba66 <xQueueGenericSend+0x32>
	__asm volatile
 800ba50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba54:	f383 8811 	msr	BASEPRI, r3
 800ba58:	f3bf 8f6f 	isb	sy
 800ba5c:	f3bf 8f4f 	dsb	sy
 800ba60:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ba62:	bf00      	nop
 800ba64:	e7fe      	b.n	800ba64 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ba66:	68bb      	ldr	r3, [r7, #8]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d103      	bne.n	800ba74 <xQueueGenericSend+0x40>
 800ba6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d101      	bne.n	800ba78 <xQueueGenericSend+0x44>
 800ba74:	2301      	movs	r3, #1
 800ba76:	e000      	b.n	800ba7a <xQueueGenericSend+0x46>
 800ba78:	2300      	movs	r3, #0
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d10a      	bne.n	800ba94 <xQueueGenericSend+0x60>
	__asm volatile
 800ba7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba82:	f383 8811 	msr	BASEPRI, r3
 800ba86:	f3bf 8f6f 	isb	sy
 800ba8a:	f3bf 8f4f 	dsb	sy
 800ba8e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ba90:	bf00      	nop
 800ba92:	e7fe      	b.n	800ba92 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	2b02      	cmp	r3, #2
 800ba98:	d103      	bne.n	800baa2 <xQueueGenericSend+0x6e>
 800ba9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba9e:	2b01      	cmp	r3, #1
 800baa0:	d101      	bne.n	800baa6 <xQueueGenericSend+0x72>
 800baa2:	2301      	movs	r3, #1
 800baa4:	e000      	b.n	800baa8 <xQueueGenericSend+0x74>
 800baa6:	2300      	movs	r3, #0
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d10a      	bne.n	800bac2 <xQueueGenericSend+0x8e>
	__asm volatile
 800baac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bab0:	f383 8811 	msr	BASEPRI, r3
 800bab4:	f3bf 8f6f 	isb	sy
 800bab8:	f3bf 8f4f 	dsb	sy
 800babc:	623b      	str	r3, [r7, #32]
}
 800babe:	bf00      	nop
 800bac0:	e7fe      	b.n	800bac0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bac2:	f001 fa83 	bl	800cfcc <xTaskGetSchedulerState>
 800bac6:	4603      	mov	r3, r0
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d102      	bne.n	800bad2 <xQueueGenericSend+0x9e>
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d101      	bne.n	800bad6 <xQueueGenericSend+0xa2>
 800bad2:	2301      	movs	r3, #1
 800bad4:	e000      	b.n	800bad8 <xQueueGenericSend+0xa4>
 800bad6:	2300      	movs	r3, #0
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d10a      	bne.n	800baf2 <xQueueGenericSend+0xbe>
	__asm volatile
 800badc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bae0:	f383 8811 	msr	BASEPRI, r3
 800bae4:	f3bf 8f6f 	isb	sy
 800bae8:	f3bf 8f4f 	dsb	sy
 800baec:	61fb      	str	r3, [r7, #28]
}
 800baee:	bf00      	nop
 800baf0:	e7fe      	b.n	800baf0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800baf2:	f001 ffc7 	bl	800da84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800baf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bafa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bafc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bafe:	429a      	cmp	r2, r3
 800bb00:	d302      	bcc.n	800bb08 <xQueueGenericSend+0xd4>
 800bb02:	683b      	ldr	r3, [r7, #0]
 800bb04:	2b02      	cmp	r3, #2
 800bb06:	d129      	bne.n	800bb5c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bb08:	683a      	ldr	r2, [r7, #0]
 800bb0a:	68b9      	ldr	r1, [r7, #8]
 800bb0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb0e:	f000 fa97 	bl	800c040 <prvCopyDataToQueue>
 800bb12:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bb14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d010      	beq.n	800bb3e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bb1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb1e:	3324      	adds	r3, #36	; 0x24
 800bb20:	4618      	mov	r0, r3
 800bb22:	f001 f891 	bl	800cc48 <xTaskRemoveFromEventList>
 800bb26:	4603      	mov	r3, r0
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d013      	beq.n	800bb54 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bb2c:	4b3f      	ldr	r3, [pc, #252]	; (800bc2c <xQueueGenericSend+0x1f8>)
 800bb2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb32:	601a      	str	r2, [r3, #0]
 800bb34:	f3bf 8f4f 	dsb	sy
 800bb38:	f3bf 8f6f 	isb	sy
 800bb3c:	e00a      	b.n	800bb54 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bb3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d007      	beq.n	800bb54 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bb44:	4b39      	ldr	r3, [pc, #228]	; (800bc2c <xQueueGenericSend+0x1f8>)
 800bb46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb4a:	601a      	str	r2, [r3, #0]
 800bb4c:	f3bf 8f4f 	dsb	sy
 800bb50:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bb54:	f001 ffc6 	bl	800dae4 <vPortExitCritical>
				return pdPASS;
 800bb58:	2301      	movs	r3, #1
 800bb5a:	e063      	b.n	800bc24 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d103      	bne.n	800bb6a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bb62:	f001 ffbf 	bl	800dae4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bb66:	2300      	movs	r3, #0
 800bb68:	e05c      	b.n	800bc24 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bb6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d106      	bne.n	800bb7e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bb70:	f107 0314 	add.w	r3, r7, #20
 800bb74:	4618      	mov	r0, r3
 800bb76:	f001 f8cb 	bl	800cd10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bb7a:	2301      	movs	r3, #1
 800bb7c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bb7e:	f001 ffb1 	bl	800dae4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bb82:	f000 fe27 	bl	800c7d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bb86:	f001 ff7d 	bl	800da84 <vPortEnterCritical>
 800bb8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bb90:	b25b      	sxtb	r3, r3
 800bb92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb96:	d103      	bne.n	800bba0 <xQueueGenericSend+0x16c>
 800bb98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bba2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bba6:	b25b      	sxtb	r3, r3
 800bba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbac:	d103      	bne.n	800bbb6 <xQueueGenericSend+0x182>
 800bbae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bbb6:	f001 ff95 	bl	800dae4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bbba:	1d3a      	adds	r2, r7, #4
 800bbbc:	f107 0314 	add.w	r3, r7, #20
 800bbc0:	4611      	mov	r1, r2
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	f001 f8ba 	bl	800cd3c <xTaskCheckForTimeOut>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d124      	bne.n	800bc18 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bbce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bbd0:	f000 fb2e 	bl	800c230 <prvIsQueueFull>
 800bbd4:	4603      	mov	r3, r0
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d018      	beq.n	800bc0c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bbda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbdc:	3310      	adds	r3, #16
 800bbde:	687a      	ldr	r2, [r7, #4]
 800bbe0:	4611      	mov	r1, r2
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	f000 ffe0 	bl	800cba8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bbe8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bbea:	f000 fab9 	bl	800c160 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bbee:	f000 fdff 	bl	800c7f0 <xTaskResumeAll>
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	f47f af7c 	bne.w	800baf2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800bbfa:	4b0c      	ldr	r3, [pc, #48]	; (800bc2c <xQueueGenericSend+0x1f8>)
 800bbfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc00:	601a      	str	r2, [r3, #0]
 800bc02:	f3bf 8f4f 	dsb	sy
 800bc06:	f3bf 8f6f 	isb	sy
 800bc0a:	e772      	b.n	800baf2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bc0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bc0e:	f000 faa7 	bl	800c160 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bc12:	f000 fded 	bl	800c7f0 <xTaskResumeAll>
 800bc16:	e76c      	b.n	800baf2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bc18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bc1a:	f000 faa1 	bl	800c160 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bc1e:	f000 fde7 	bl	800c7f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bc22:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bc24:	4618      	mov	r0, r3
 800bc26:	3738      	adds	r7, #56	; 0x38
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	bd80      	pop	{r7, pc}
 800bc2c:	e000ed04 	.word	0xe000ed04

0800bc30 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b090      	sub	sp, #64	; 0x40
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	60f8      	str	r0, [r7, #12]
 800bc38:	60b9      	str	r1, [r7, #8]
 800bc3a:	607a      	str	r2, [r7, #4]
 800bc3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800bc42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d10a      	bne.n	800bc5e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800bc48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc4c:	f383 8811 	msr	BASEPRI, r3
 800bc50:	f3bf 8f6f 	isb	sy
 800bc54:	f3bf 8f4f 	dsb	sy
 800bc58:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bc5a:	bf00      	nop
 800bc5c:	e7fe      	b.n	800bc5c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bc5e:	68bb      	ldr	r3, [r7, #8]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d103      	bne.n	800bc6c <xQueueGenericSendFromISR+0x3c>
 800bc64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d101      	bne.n	800bc70 <xQueueGenericSendFromISR+0x40>
 800bc6c:	2301      	movs	r3, #1
 800bc6e:	e000      	b.n	800bc72 <xQueueGenericSendFromISR+0x42>
 800bc70:	2300      	movs	r3, #0
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d10a      	bne.n	800bc8c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800bc76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc7a:	f383 8811 	msr	BASEPRI, r3
 800bc7e:	f3bf 8f6f 	isb	sy
 800bc82:	f3bf 8f4f 	dsb	sy
 800bc86:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bc88:	bf00      	nop
 800bc8a:	e7fe      	b.n	800bc8a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bc8c:	683b      	ldr	r3, [r7, #0]
 800bc8e:	2b02      	cmp	r3, #2
 800bc90:	d103      	bne.n	800bc9a <xQueueGenericSendFromISR+0x6a>
 800bc92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc96:	2b01      	cmp	r3, #1
 800bc98:	d101      	bne.n	800bc9e <xQueueGenericSendFromISR+0x6e>
 800bc9a:	2301      	movs	r3, #1
 800bc9c:	e000      	b.n	800bca0 <xQueueGenericSendFromISR+0x70>
 800bc9e:	2300      	movs	r3, #0
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d10a      	bne.n	800bcba <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800bca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bca8:	f383 8811 	msr	BASEPRI, r3
 800bcac:	f3bf 8f6f 	isb	sy
 800bcb0:	f3bf 8f4f 	dsb	sy
 800bcb4:	623b      	str	r3, [r7, #32]
}
 800bcb6:	bf00      	nop
 800bcb8:	e7fe      	b.n	800bcb8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bcba:	f001 ffc5 	bl	800dc48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bcbe:	f3ef 8211 	mrs	r2, BASEPRI
 800bcc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcc6:	f383 8811 	msr	BASEPRI, r3
 800bcca:	f3bf 8f6f 	isb	sy
 800bcce:	f3bf 8f4f 	dsb	sy
 800bcd2:	61fa      	str	r2, [r7, #28]
 800bcd4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bcd6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bcd8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bcda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bcde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bce2:	429a      	cmp	r2, r3
 800bce4:	d302      	bcc.n	800bcec <xQueueGenericSendFromISR+0xbc>
 800bce6:	683b      	ldr	r3, [r7, #0]
 800bce8:	2b02      	cmp	r3, #2
 800bcea:	d12f      	bne.n	800bd4c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bcec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bcf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bcf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcfa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bcfc:	683a      	ldr	r2, [r7, #0]
 800bcfe:	68b9      	ldr	r1, [r7, #8]
 800bd00:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bd02:	f000 f99d 	bl	800c040 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bd06:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800bd0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd0e:	d112      	bne.n	800bd36 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bd10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d016      	beq.n	800bd46 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bd18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd1a:	3324      	adds	r3, #36	; 0x24
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	f000 ff93 	bl	800cc48 <xTaskRemoveFromEventList>
 800bd22:	4603      	mov	r3, r0
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d00e      	beq.n	800bd46 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d00b      	beq.n	800bd46 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	2201      	movs	r2, #1
 800bd32:	601a      	str	r2, [r3, #0]
 800bd34:	e007      	b.n	800bd46 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bd36:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bd3a:	3301      	adds	r3, #1
 800bd3c:	b2db      	uxtb	r3, r3
 800bd3e:	b25a      	sxtb	r2, r3
 800bd40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bd46:	2301      	movs	r3, #1
 800bd48:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800bd4a:	e001      	b.n	800bd50 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd52:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bd54:	697b      	ldr	r3, [r7, #20]
 800bd56:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bd5a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bd5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800bd5e:	4618      	mov	r0, r3
 800bd60:	3740      	adds	r7, #64	; 0x40
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bd80      	pop	{r7, pc}

0800bd66 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bd66:	b580      	push	{r7, lr}
 800bd68:	b08e      	sub	sp, #56	; 0x38
 800bd6a:	af00      	add	r7, sp, #0
 800bd6c:	6078      	str	r0, [r7, #4]
 800bd6e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800bd74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d10a      	bne.n	800bd90 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800bd7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd7e:	f383 8811 	msr	BASEPRI, r3
 800bd82:	f3bf 8f6f 	isb	sy
 800bd86:	f3bf 8f4f 	dsb	sy
 800bd8a:	623b      	str	r3, [r7, #32]
}
 800bd8c:	bf00      	nop
 800bd8e:	e7fe      	b.n	800bd8e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bd90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d00a      	beq.n	800bdae <xQueueGiveFromISR+0x48>
	__asm volatile
 800bd98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd9c:	f383 8811 	msr	BASEPRI, r3
 800bda0:	f3bf 8f6f 	isb	sy
 800bda4:	f3bf 8f4f 	dsb	sy
 800bda8:	61fb      	str	r3, [r7, #28]
}
 800bdaa:	bf00      	nop
 800bdac:	e7fe      	b.n	800bdac <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800bdae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d103      	bne.n	800bdbe <xQueueGiveFromISR+0x58>
 800bdb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdb8:	689b      	ldr	r3, [r3, #8]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d101      	bne.n	800bdc2 <xQueueGiveFromISR+0x5c>
 800bdbe:	2301      	movs	r3, #1
 800bdc0:	e000      	b.n	800bdc4 <xQueueGiveFromISR+0x5e>
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d10a      	bne.n	800bdde <xQueueGiveFromISR+0x78>
	__asm volatile
 800bdc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdcc:	f383 8811 	msr	BASEPRI, r3
 800bdd0:	f3bf 8f6f 	isb	sy
 800bdd4:	f3bf 8f4f 	dsb	sy
 800bdd8:	61bb      	str	r3, [r7, #24]
}
 800bdda:	bf00      	nop
 800bddc:	e7fe      	b.n	800bddc <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bdde:	f001 ff33 	bl	800dc48 <vPortValidateInterruptPriority>
	__asm volatile
 800bde2:	f3ef 8211 	mrs	r2, BASEPRI
 800bde6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdea:	f383 8811 	msr	BASEPRI, r3
 800bdee:	f3bf 8f6f 	isb	sy
 800bdf2:	f3bf 8f4f 	dsb	sy
 800bdf6:	617a      	str	r2, [r7, #20]
 800bdf8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800bdfa:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bdfc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bdfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be02:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800be04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be0a:	429a      	cmp	r2, r3
 800be0c:	d22b      	bcs.n	800be66 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800be0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800be14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800be18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be1a:	1c5a      	adds	r2, r3, #1
 800be1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be1e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800be20:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800be24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be28:	d112      	bne.n	800be50 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800be2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d016      	beq.n	800be60 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800be32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be34:	3324      	adds	r3, #36	; 0x24
 800be36:	4618      	mov	r0, r3
 800be38:	f000 ff06 	bl	800cc48 <xTaskRemoveFromEventList>
 800be3c:	4603      	mov	r3, r0
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d00e      	beq.n	800be60 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800be42:	683b      	ldr	r3, [r7, #0]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d00b      	beq.n	800be60 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	2201      	movs	r2, #1
 800be4c:	601a      	str	r2, [r3, #0]
 800be4e:	e007      	b.n	800be60 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800be50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800be54:	3301      	adds	r3, #1
 800be56:	b2db      	uxtb	r3, r3
 800be58:	b25a      	sxtb	r2, r3
 800be5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800be60:	2301      	movs	r3, #1
 800be62:	637b      	str	r3, [r7, #52]	; 0x34
 800be64:	e001      	b.n	800be6a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800be66:	2300      	movs	r3, #0
 800be68:	637b      	str	r3, [r7, #52]	; 0x34
 800be6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be6c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	f383 8811 	msr	BASEPRI, r3
}
 800be74:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800be76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800be78:	4618      	mov	r0, r3
 800be7a:	3738      	adds	r7, #56	; 0x38
 800be7c:	46bd      	mov	sp, r7
 800be7e:	bd80      	pop	{r7, pc}

0800be80 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b08c      	sub	sp, #48	; 0x30
 800be84:	af00      	add	r7, sp, #0
 800be86:	60f8      	str	r0, [r7, #12]
 800be88:	60b9      	str	r1, [r7, #8]
 800be8a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800be8c:	2300      	movs	r3, #0
 800be8e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800be94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be96:	2b00      	cmp	r3, #0
 800be98:	d10a      	bne.n	800beb0 <xQueueReceive+0x30>
	__asm volatile
 800be9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be9e:	f383 8811 	msr	BASEPRI, r3
 800bea2:	f3bf 8f6f 	isb	sy
 800bea6:	f3bf 8f4f 	dsb	sy
 800beaa:	623b      	str	r3, [r7, #32]
}
 800beac:	bf00      	nop
 800beae:	e7fe      	b.n	800beae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800beb0:	68bb      	ldr	r3, [r7, #8]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d103      	bne.n	800bebe <xQueueReceive+0x3e>
 800beb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d101      	bne.n	800bec2 <xQueueReceive+0x42>
 800bebe:	2301      	movs	r3, #1
 800bec0:	e000      	b.n	800bec4 <xQueueReceive+0x44>
 800bec2:	2300      	movs	r3, #0
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d10a      	bne.n	800bede <xQueueReceive+0x5e>
	__asm volatile
 800bec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800becc:	f383 8811 	msr	BASEPRI, r3
 800bed0:	f3bf 8f6f 	isb	sy
 800bed4:	f3bf 8f4f 	dsb	sy
 800bed8:	61fb      	str	r3, [r7, #28]
}
 800beda:	bf00      	nop
 800bedc:	e7fe      	b.n	800bedc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bede:	f001 f875 	bl	800cfcc <xTaskGetSchedulerState>
 800bee2:	4603      	mov	r3, r0
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d102      	bne.n	800beee <xQueueReceive+0x6e>
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d101      	bne.n	800bef2 <xQueueReceive+0x72>
 800beee:	2301      	movs	r3, #1
 800bef0:	e000      	b.n	800bef4 <xQueueReceive+0x74>
 800bef2:	2300      	movs	r3, #0
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d10a      	bne.n	800bf0e <xQueueReceive+0x8e>
	__asm volatile
 800bef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800befc:	f383 8811 	msr	BASEPRI, r3
 800bf00:	f3bf 8f6f 	isb	sy
 800bf04:	f3bf 8f4f 	dsb	sy
 800bf08:	61bb      	str	r3, [r7, #24]
}
 800bf0a:	bf00      	nop
 800bf0c:	e7fe      	b.n	800bf0c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bf0e:	f001 fdb9 	bl	800da84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bf12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf16:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bf18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d01f      	beq.n	800bf5e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bf1e:	68b9      	ldr	r1, [r7, #8]
 800bf20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf22:	f000 f8f7 	bl	800c114 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bf26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf28:	1e5a      	subs	r2, r3, #1
 800bf2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf2c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bf2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf30:	691b      	ldr	r3, [r3, #16]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d00f      	beq.n	800bf56 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bf36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf38:	3310      	adds	r3, #16
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	f000 fe84 	bl	800cc48 <xTaskRemoveFromEventList>
 800bf40:	4603      	mov	r3, r0
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d007      	beq.n	800bf56 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bf46:	4b3d      	ldr	r3, [pc, #244]	; (800c03c <xQueueReceive+0x1bc>)
 800bf48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf4c:	601a      	str	r2, [r3, #0]
 800bf4e:	f3bf 8f4f 	dsb	sy
 800bf52:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bf56:	f001 fdc5 	bl	800dae4 <vPortExitCritical>
				return pdPASS;
 800bf5a:	2301      	movs	r3, #1
 800bf5c:	e069      	b.n	800c032 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d103      	bne.n	800bf6c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bf64:	f001 fdbe 	bl	800dae4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bf68:	2300      	movs	r3, #0
 800bf6a:	e062      	b.n	800c032 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bf6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d106      	bne.n	800bf80 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bf72:	f107 0310 	add.w	r3, r7, #16
 800bf76:	4618      	mov	r0, r3
 800bf78:	f000 feca 	bl	800cd10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bf7c:	2301      	movs	r3, #1
 800bf7e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bf80:	f001 fdb0 	bl	800dae4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bf84:	f000 fc26 	bl	800c7d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bf88:	f001 fd7c 	bl	800da84 <vPortEnterCritical>
 800bf8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bf92:	b25b      	sxtb	r3, r3
 800bf94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf98:	d103      	bne.n	800bfa2 <xQueueReceive+0x122>
 800bf9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bfa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfa4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bfa8:	b25b      	sxtb	r3, r3
 800bfaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfae:	d103      	bne.n	800bfb8 <xQueueReceive+0x138>
 800bfb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bfb8:	f001 fd94 	bl	800dae4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bfbc:	1d3a      	adds	r2, r7, #4
 800bfbe:	f107 0310 	add.w	r3, r7, #16
 800bfc2:	4611      	mov	r1, r2
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	f000 feb9 	bl	800cd3c <xTaskCheckForTimeOut>
 800bfca:	4603      	mov	r3, r0
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d123      	bne.n	800c018 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bfd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bfd2:	f000 f917 	bl	800c204 <prvIsQueueEmpty>
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d017      	beq.n	800c00c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bfdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfde:	3324      	adds	r3, #36	; 0x24
 800bfe0:	687a      	ldr	r2, [r7, #4]
 800bfe2:	4611      	mov	r1, r2
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	f000 fddf 	bl	800cba8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bfea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bfec:	f000 f8b8 	bl	800c160 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bff0:	f000 fbfe 	bl	800c7f0 <xTaskResumeAll>
 800bff4:	4603      	mov	r3, r0
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d189      	bne.n	800bf0e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800bffa:	4b10      	ldr	r3, [pc, #64]	; (800c03c <xQueueReceive+0x1bc>)
 800bffc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c000:	601a      	str	r2, [r3, #0]
 800c002:	f3bf 8f4f 	dsb	sy
 800c006:	f3bf 8f6f 	isb	sy
 800c00a:	e780      	b.n	800bf0e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c00c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c00e:	f000 f8a7 	bl	800c160 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c012:	f000 fbed 	bl	800c7f0 <xTaskResumeAll>
 800c016:	e77a      	b.n	800bf0e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c018:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c01a:	f000 f8a1 	bl	800c160 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c01e:	f000 fbe7 	bl	800c7f0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c022:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c024:	f000 f8ee 	bl	800c204 <prvIsQueueEmpty>
 800c028:	4603      	mov	r3, r0
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	f43f af6f 	beq.w	800bf0e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c030:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c032:	4618      	mov	r0, r3
 800c034:	3730      	adds	r7, #48	; 0x30
 800c036:	46bd      	mov	sp, r7
 800c038:	bd80      	pop	{r7, pc}
 800c03a:	bf00      	nop
 800c03c:	e000ed04 	.word	0xe000ed04

0800c040 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c040:	b580      	push	{r7, lr}
 800c042:	b086      	sub	sp, #24
 800c044:	af00      	add	r7, sp, #0
 800c046:	60f8      	str	r0, [r7, #12]
 800c048:	60b9      	str	r1, [r7, #8]
 800c04a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c04c:	2300      	movs	r3, #0
 800c04e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c054:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d10d      	bne.n	800c07a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d14d      	bne.n	800c102 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	689b      	ldr	r3, [r3, #8]
 800c06a:	4618      	mov	r0, r3
 800c06c:	f000 ffcc 	bl	800d008 <xTaskPriorityDisinherit>
 800c070:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	2200      	movs	r2, #0
 800c076:	609a      	str	r2, [r3, #8]
 800c078:	e043      	b.n	800c102 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d119      	bne.n	800c0b4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	6858      	ldr	r0, [r3, #4]
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c088:	461a      	mov	r2, r3
 800c08a:	68b9      	ldr	r1, [r7, #8]
 800c08c:	f002 ffd5 	bl	800f03a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	685a      	ldr	r2, [r3, #4]
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c098:	441a      	add	r2, r3
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	685a      	ldr	r2, [r3, #4]
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	689b      	ldr	r3, [r3, #8]
 800c0a6:	429a      	cmp	r2, r3
 800c0a8:	d32b      	bcc.n	800c102 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	681a      	ldr	r2, [r3, #0]
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	605a      	str	r2, [r3, #4]
 800c0b2:	e026      	b.n	800c102 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	68d8      	ldr	r0, [r3, #12]
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0bc:	461a      	mov	r2, r3
 800c0be:	68b9      	ldr	r1, [r7, #8]
 800c0c0:	f002 ffbb 	bl	800f03a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	68da      	ldr	r2, [r3, #12]
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0cc:	425b      	negs	r3, r3
 800c0ce:	441a      	add	r2, r3
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	68da      	ldr	r2, [r3, #12]
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	429a      	cmp	r2, r3
 800c0de:	d207      	bcs.n	800c0f0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	689a      	ldr	r2, [r3, #8]
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0e8:	425b      	negs	r3, r3
 800c0ea:	441a      	add	r2, r3
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	2b02      	cmp	r3, #2
 800c0f4:	d105      	bne.n	800c102 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c0f6:	693b      	ldr	r3, [r7, #16]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d002      	beq.n	800c102 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c0fc:	693b      	ldr	r3, [r7, #16]
 800c0fe:	3b01      	subs	r3, #1
 800c100:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c102:	693b      	ldr	r3, [r7, #16]
 800c104:	1c5a      	adds	r2, r3, #1
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c10a:	697b      	ldr	r3, [r7, #20]
}
 800c10c:	4618      	mov	r0, r3
 800c10e:	3718      	adds	r7, #24
 800c110:	46bd      	mov	sp, r7
 800c112:	bd80      	pop	{r7, pc}

0800c114 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c114:	b580      	push	{r7, lr}
 800c116:	b082      	sub	sp, #8
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
 800c11c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c122:	2b00      	cmp	r3, #0
 800c124:	d018      	beq.n	800c158 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	68da      	ldr	r2, [r3, #12]
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c12e:	441a      	add	r2, r3
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	68da      	ldr	r2, [r3, #12]
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	689b      	ldr	r3, [r3, #8]
 800c13c:	429a      	cmp	r2, r3
 800c13e:	d303      	bcc.n	800c148 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681a      	ldr	r2, [r3, #0]
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	68d9      	ldr	r1, [r3, #12]
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c150:	461a      	mov	r2, r3
 800c152:	6838      	ldr	r0, [r7, #0]
 800c154:	f002 ff71 	bl	800f03a <memcpy>
	}
}
 800c158:	bf00      	nop
 800c15a:	3708      	adds	r7, #8
 800c15c:	46bd      	mov	sp, r7
 800c15e:	bd80      	pop	{r7, pc}

0800c160 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b084      	sub	sp, #16
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c168:	f001 fc8c 	bl	800da84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c172:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c174:	e011      	b.n	800c19a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d012      	beq.n	800c1a4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	3324      	adds	r3, #36	; 0x24
 800c182:	4618      	mov	r0, r3
 800c184:	f000 fd60 	bl	800cc48 <xTaskRemoveFromEventList>
 800c188:	4603      	mov	r3, r0
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d001      	beq.n	800c192 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c18e:	f000 fe37 	bl	800ce00 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c192:	7bfb      	ldrb	r3, [r7, #15]
 800c194:	3b01      	subs	r3, #1
 800c196:	b2db      	uxtb	r3, r3
 800c198:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c19a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	dce9      	bgt.n	800c176 <prvUnlockQueue+0x16>
 800c1a2:	e000      	b.n	800c1a6 <prvUnlockQueue+0x46>
					break;
 800c1a4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	22ff      	movs	r2, #255	; 0xff
 800c1aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c1ae:	f001 fc99 	bl	800dae4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c1b2:	f001 fc67 	bl	800da84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c1bc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c1be:	e011      	b.n	800c1e4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	691b      	ldr	r3, [r3, #16]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d012      	beq.n	800c1ee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	3310      	adds	r3, #16
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	f000 fd3b 	bl	800cc48 <xTaskRemoveFromEventList>
 800c1d2:	4603      	mov	r3, r0
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d001      	beq.n	800c1dc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c1d8:	f000 fe12 	bl	800ce00 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c1dc:	7bbb      	ldrb	r3, [r7, #14]
 800c1de:	3b01      	subs	r3, #1
 800c1e0:	b2db      	uxtb	r3, r3
 800c1e2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c1e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	dce9      	bgt.n	800c1c0 <prvUnlockQueue+0x60>
 800c1ec:	e000      	b.n	800c1f0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c1ee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	22ff      	movs	r2, #255	; 0xff
 800c1f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c1f8:	f001 fc74 	bl	800dae4 <vPortExitCritical>
}
 800c1fc:	bf00      	nop
 800c1fe:	3710      	adds	r7, #16
 800c200:	46bd      	mov	sp, r7
 800c202:	bd80      	pop	{r7, pc}

0800c204 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c204:	b580      	push	{r7, lr}
 800c206:	b084      	sub	sp, #16
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c20c:	f001 fc3a 	bl	800da84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c214:	2b00      	cmp	r3, #0
 800c216:	d102      	bne.n	800c21e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c218:	2301      	movs	r3, #1
 800c21a:	60fb      	str	r3, [r7, #12]
 800c21c:	e001      	b.n	800c222 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c21e:	2300      	movs	r3, #0
 800c220:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c222:	f001 fc5f 	bl	800dae4 <vPortExitCritical>

	return xReturn;
 800c226:	68fb      	ldr	r3, [r7, #12]
}
 800c228:	4618      	mov	r0, r3
 800c22a:	3710      	adds	r7, #16
 800c22c:	46bd      	mov	sp, r7
 800c22e:	bd80      	pop	{r7, pc}

0800c230 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b084      	sub	sp, #16
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c238:	f001 fc24 	bl	800da84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c244:	429a      	cmp	r2, r3
 800c246:	d102      	bne.n	800c24e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c248:	2301      	movs	r3, #1
 800c24a:	60fb      	str	r3, [r7, #12]
 800c24c:	e001      	b.n	800c252 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c24e:	2300      	movs	r3, #0
 800c250:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c252:	f001 fc47 	bl	800dae4 <vPortExitCritical>

	return xReturn;
 800c256:	68fb      	ldr	r3, [r7, #12]
}
 800c258:	4618      	mov	r0, r3
 800c25a:	3710      	adds	r7, #16
 800c25c:	46bd      	mov	sp, r7
 800c25e:	bd80      	pop	{r7, pc}

0800c260 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c260:	b480      	push	{r7}
 800c262:	b085      	sub	sp, #20
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]
 800c268:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c26a:	2300      	movs	r3, #0
 800c26c:	60fb      	str	r3, [r7, #12]
 800c26e:	e014      	b.n	800c29a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c270:	4a0f      	ldr	r2, [pc, #60]	; (800c2b0 <vQueueAddToRegistry+0x50>)
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d10b      	bne.n	800c294 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c27c:	490c      	ldr	r1, [pc, #48]	; (800c2b0 <vQueueAddToRegistry+0x50>)
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	683a      	ldr	r2, [r7, #0]
 800c282:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c286:	4a0a      	ldr	r2, [pc, #40]	; (800c2b0 <vQueueAddToRegistry+0x50>)
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	00db      	lsls	r3, r3, #3
 800c28c:	4413      	add	r3, r2
 800c28e:	687a      	ldr	r2, [r7, #4]
 800c290:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c292:	e006      	b.n	800c2a2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	3301      	adds	r3, #1
 800c298:	60fb      	str	r3, [r7, #12]
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	2b07      	cmp	r3, #7
 800c29e:	d9e7      	bls.n	800c270 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c2a0:	bf00      	nop
 800c2a2:	bf00      	nop
 800c2a4:	3714      	adds	r7, #20
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ac:	4770      	bx	lr
 800c2ae:	bf00      	nop
 800c2b0:	24000e04 	.word	0x24000e04

0800c2b4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b086      	sub	sp, #24
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	60f8      	str	r0, [r7, #12]
 800c2bc:	60b9      	str	r1, [r7, #8]
 800c2be:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c2c4:	f001 fbde 	bl	800da84 <vPortEnterCritical>
 800c2c8:	697b      	ldr	r3, [r7, #20]
 800c2ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c2ce:	b25b      	sxtb	r3, r3
 800c2d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2d4:	d103      	bne.n	800c2de <vQueueWaitForMessageRestricted+0x2a>
 800c2d6:	697b      	ldr	r3, [r7, #20]
 800c2d8:	2200      	movs	r2, #0
 800c2da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c2de:	697b      	ldr	r3, [r7, #20]
 800c2e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c2e4:	b25b      	sxtb	r3, r3
 800c2e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2ea:	d103      	bne.n	800c2f4 <vQueueWaitForMessageRestricted+0x40>
 800c2ec:	697b      	ldr	r3, [r7, #20]
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c2f4:	f001 fbf6 	bl	800dae4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c2f8:	697b      	ldr	r3, [r7, #20]
 800c2fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d106      	bne.n	800c30e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c300:	697b      	ldr	r3, [r7, #20]
 800c302:	3324      	adds	r3, #36	; 0x24
 800c304:	687a      	ldr	r2, [r7, #4]
 800c306:	68b9      	ldr	r1, [r7, #8]
 800c308:	4618      	mov	r0, r3
 800c30a:	f000 fc71 	bl	800cbf0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c30e:	6978      	ldr	r0, [r7, #20]
 800c310:	f7ff ff26 	bl	800c160 <prvUnlockQueue>
	}
 800c314:	bf00      	nop
 800c316:	3718      	adds	r7, #24
 800c318:	46bd      	mov	sp, r7
 800c31a:	bd80      	pop	{r7, pc}

0800c31c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b08e      	sub	sp, #56	; 0x38
 800c320:	af04      	add	r7, sp, #16
 800c322:	60f8      	str	r0, [r7, #12]
 800c324:	60b9      	str	r1, [r7, #8]
 800c326:	607a      	str	r2, [r7, #4]
 800c328:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c32a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d10a      	bne.n	800c346 <xTaskCreateStatic+0x2a>
	__asm volatile
 800c330:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c334:	f383 8811 	msr	BASEPRI, r3
 800c338:	f3bf 8f6f 	isb	sy
 800c33c:	f3bf 8f4f 	dsb	sy
 800c340:	623b      	str	r3, [r7, #32]
}
 800c342:	bf00      	nop
 800c344:	e7fe      	b.n	800c344 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d10a      	bne.n	800c362 <xTaskCreateStatic+0x46>
	__asm volatile
 800c34c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c350:	f383 8811 	msr	BASEPRI, r3
 800c354:	f3bf 8f6f 	isb	sy
 800c358:	f3bf 8f4f 	dsb	sy
 800c35c:	61fb      	str	r3, [r7, #28]
}
 800c35e:	bf00      	nop
 800c360:	e7fe      	b.n	800c360 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c362:	23a8      	movs	r3, #168	; 0xa8
 800c364:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c366:	693b      	ldr	r3, [r7, #16]
 800c368:	2ba8      	cmp	r3, #168	; 0xa8
 800c36a:	d00a      	beq.n	800c382 <xTaskCreateStatic+0x66>
	__asm volatile
 800c36c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c370:	f383 8811 	msr	BASEPRI, r3
 800c374:	f3bf 8f6f 	isb	sy
 800c378:	f3bf 8f4f 	dsb	sy
 800c37c:	61bb      	str	r3, [r7, #24]
}
 800c37e:	bf00      	nop
 800c380:	e7fe      	b.n	800c380 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c382:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c386:	2b00      	cmp	r3, #0
 800c388:	d01e      	beq.n	800c3c8 <xTaskCreateStatic+0xac>
 800c38a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d01b      	beq.n	800c3c8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c392:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c396:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c398:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c39c:	2202      	movs	r2, #2
 800c39e:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	9303      	str	r3, [sp, #12]
 800c3a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3a8:	9302      	str	r3, [sp, #8]
 800c3aa:	f107 0314 	add.w	r3, r7, #20
 800c3ae:	9301      	str	r3, [sp, #4]
 800c3b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3b2:	9300      	str	r3, [sp, #0]
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	687a      	ldr	r2, [r7, #4]
 800c3b8:	68b9      	ldr	r1, [r7, #8]
 800c3ba:	68f8      	ldr	r0, [r7, #12]
 800c3bc:	f000 f850 	bl	800c460 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c3c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c3c2:	f000 f8f3 	bl	800c5ac <prvAddNewTaskToReadyList>
 800c3c6:	e001      	b.n	800c3cc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c3cc:	697b      	ldr	r3, [r7, #20]
	}
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	3728      	adds	r7, #40	; 0x28
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	bd80      	pop	{r7, pc}

0800c3d6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c3d6:	b580      	push	{r7, lr}
 800c3d8:	b08c      	sub	sp, #48	; 0x30
 800c3da:	af04      	add	r7, sp, #16
 800c3dc:	60f8      	str	r0, [r7, #12]
 800c3de:	60b9      	str	r1, [r7, #8]
 800c3e0:	603b      	str	r3, [r7, #0]
 800c3e2:	4613      	mov	r3, r2
 800c3e4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c3e6:	88fb      	ldrh	r3, [r7, #6]
 800c3e8:	009b      	lsls	r3, r3, #2
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	f001 fc6c 	bl	800dcc8 <pvPortMalloc>
 800c3f0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c3f2:	697b      	ldr	r3, [r7, #20]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d00e      	beq.n	800c416 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c3f8:	20a8      	movs	r0, #168	; 0xa8
 800c3fa:	f001 fc65 	bl	800dcc8 <pvPortMalloc>
 800c3fe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c400:	69fb      	ldr	r3, [r7, #28]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d003      	beq.n	800c40e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c406:	69fb      	ldr	r3, [r7, #28]
 800c408:	697a      	ldr	r2, [r7, #20]
 800c40a:	631a      	str	r2, [r3, #48]	; 0x30
 800c40c:	e005      	b.n	800c41a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c40e:	6978      	ldr	r0, [r7, #20]
 800c410:	f001 fc6c 	bl	800dcec <vPortFree>
 800c414:	e001      	b.n	800c41a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c416:	2300      	movs	r3, #0
 800c418:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c41a:	69fb      	ldr	r3, [r7, #28]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d017      	beq.n	800c450 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c420:	69fb      	ldr	r3, [r7, #28]
 800c422:	2200      	movs	r2, #0
 800c424:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c428:	88fa      	ldrh	r2, [r7, #6]
 800c42a:	2300      	movs	r3, #0
 800c42c:	9303      	str	r3, [sp, #12]
 800c42e:	69fb      	ldr	r3, [r7, #28]
 800c430:	9302      	str	r3, [sp, #8]
 800c432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c434:	9301      	str	r3, [sp, #4]
 800c436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c438:	9300      	str	r3, [sp, #0]
 800c43a:	683b      	ldr	r3, [r7, #0]
 800c43c:	68b9      	ldr	r1, [r7, #8]
 800c43e:	68f8      	ldr	r0, [r7, #12]
 800c440:	f000 f80e 	bl	800c460 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c444:	69f8      	ldr	r0, [r7, #28]
 800c446:	f000 f8b1 	bl	800c5ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c44a:	2301      	movs	r3, #1
 800c44c:	61bb      	str	r3, [r7, #24]
 800c44e:	e002      	b.n	800c456 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c450:	f04f 33ff 	mov.w	r3, #4294967295
 800c454:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c456:	69bb      	ldr	r3, [r7, #24]
	}
 800c458:	4618      	mov	r0, r3
 800c45a:	3720      	adds	r7, #32
 800c45c:	46bd      	mov	sp, r7
 800c45e:	bd80      	pop	{r7, pc}

0800c460 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c460:	b580      	push	{r7, lr}
 800c462:	b088      	sub	sp, #32
 800c464:	af00      	add	r7, sp, #0
 800c466:	60f8      	str	r0, [r7, #12]
 800c468:	60b9      	str	r1, [r7, #8]
 800c46a:	607a      	str	r2, [r7, #4]
 800c46c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c470:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	009b      	lsls	r3, r3, #2
 800c476:	461a      	mov	r2, r3
 800c478:	21a5      	movs	r1, #165	; 0xa5
 800c47a:	f002 fced 	bl	800ee58 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c47e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c480:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c482:	6879      	ldr	r1, [r7, #4]
 800c484:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800c488:	440b      	add	r3, r1
 800c48a:	009b      	lsls	r3, r3, #2
 800c48c:	4413      	add	r3, r2
 800c48e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c490:	69bb      	ldr	r3, [r7, #24]
 800c492:	f023 0307 	bic.w	r3, r3, #7
 800c496:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c498:	69bb      	ldr	r3, [r7, #24]
 800c49a:	f003 0307 	and.w	r3, r3, #7
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d00a      	beq.n	800c4b8 <prvInitialiseNewTask+0x58>
	__asm volatile
 800c4a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4a6:	f383 8811 	msr	BASEPRI, r3
 800c4aa:	f3bf 8f6f 	isb	sy
 800c4ae:	f3bf 8f4f 	dsb	sy
 800c4b2:	617b      	str	r3, [r7, #20]
}
 800c4b4:	bf00      	nop
 800c4b6:	e7fe      	b.n	800c4b6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c4b8:	68bb      	ldr	r3, [r7, #8]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d01f      	beq.n	800c4fe <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c4be:	2300      	movs	r3, #0
 800c4c0:	61fb      	str	r3, [r7, #28]
 800c4c2:	e012      	b.n	800c4ea <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c4c4:	68ba      	ldr	r2, [r7, #8]
 800c4c6:	69fb      	ldr	r3, [r7, #28]
 800c4c8:	4413      	add	r3, r2
 800c4ca:	7819      	ldrb	r1, [r3, #0]
 800c4cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4ce:	69fb      	ldr	r3, [r7, #28]
 800c4d0:	4413      	add	r3, r2
 800c4d2:	3334      	adds	r3, #52	; 0x34
 800c4d4:	460a      	mov	r2, r1
 800c4d6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c4d8:	68ba      	ldr	r2, [r7, #8]
 800c4da:	69fb      	ldr	r3, [r7, #28]
 800c4dc:	4413      	add	r3, r2
 800c4de:	781b      	ldrb	r3, [r3, #0]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d006      	beq.n	800c4f2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c4e4:	69fb      	ldr	r3, [r7, #28]
 800c4e6:	3301      	adds	r3, #1
 800c4e8:	61fb      	str	r3, [r7, #28]
 800c4ea:	69fb      	ldr	r3, [r7, #28]
 800c4ec:	2b0f      	cmp	r3, #15
 800c4ee:	d9e9      	bls.n	800c4c4 <prvInitialiseNewTask+0x64>
 800c4f0:	e000      	b.n	800c4f4 <prvInitialiseNewTask+0x94>
			{
				break;
 800c4f2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c4f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c4fc:	e003      	b.n	800c506 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c4fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c500:	2200      	movs	r2, #0
 800c502:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c508:	2b37      	cmp	r3, #55	; 0x37
 800c50a:	d901      	bls.n	800c510 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c50c:	2337      	movs	r3, #55	; 0x37
 800c50e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c512:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c514:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c518:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c51a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c51c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c51e:	2200      	movs	r2, #0
 800c520:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c524:	3304      	adds	r3, #4
 800c526:	4618      	mov	r0, r3
 800c528:	f7ff f8ec 	bl	800b704 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c52c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c52e:	3318      	adds	r3, #24
 800c530:	4618      	mov	r0, r3
 800c532:	f7ff f8e7 	bl	800b704 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c538:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c53a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c53c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c53e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c544:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c548:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c54a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c54c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c54e:	2200      	movs	r2, #0
 800c550:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c556:	2200      	movs	r2, #0
 800c558:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c55c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c55e:	3354      	adds	r3, #84	; 0x54
 800c560:	224c      	movs	r2, #76	; 0x4c
 800c562:	2100      	movs	r1, #0
 800c564:	4618      	mov	r0, r3
 800c566:	f002 fc77 	bl	800ee58 <memset>
 800c56a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c56c:	4a0c      	ldr	r2, [pc, #48]	; (800c5a0 <prvInitialiseNewTask+0x140>)
 800c56e:	659a      	str	r2, [r3, #88]	; 0x58
 800c570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c572:	4a0c      	ldr	r2, [pc, #48]	; (800c5a4 <prvInitialiseNewTask+0x144>)
 800c574:	65da      	str	r2, [r3, #92]	; 0x5c
 800c576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c578:	4a0b      	ldr	r2, [pc, #44]	; (800c5a8 <prvInitialiseNewTask+0x148>)
 800c57a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c57c:	683a      	ldr	r2, [r7, #0]
 800c57e:	68f9      	ldr	r1, [r7, #12]
 800c580:	69b8      	ldr	r0, [r7, #24]
 800c582:	f001 f951 	bl	800d828 <pxPortInitialiseStack>
 800c586:	4602      	mov	r2, r0
 800c588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c58a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c58c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d002      	beq.n	800c598 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c594:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c596:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c598:	bf00      	nop
 800c59a:	3720      	adds	r7, #32
 800c59c:	46bd      	mov	sp, r7
 800c59e:	bd80      	pop	{r7, pc}
 800c5a0:	24003490 	.word	0x24003490
 800c5a4:	240034f8 	.word	0x240034f8
 800c5a8:	24003560 	.word	0x24003560

0800c5ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b082      	sub	sp, #8
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c5b4:	f001 fa66 	bl	800da84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c5b8:	4b2d      	ldr	r3, [pc, #180]	; (800c670 <prvAddNewTaskToReadyList+0xc4>)
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	3301      	adds	r3, #1
 800c5be:	4a2c      	ldr	r2, [pc, #176]	; (800c670 <prvAddNewTaskToReadyList+0xc4>)
 800c5c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c5c2:	4b2c      	ldr	r3, [pc, #176]	; (800c674 <prvAddNewTaskToReadyList+0xc8>)
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d109      	bne.n	800c5de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c5ca:	4a2a      	ldr	r2, [pc, #168]	; (800c674 <prvAddNewTaskToReadyList+0xc8>)
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c5d0:	4b27      	ldr	r3, [pc, #156]	; (800c670 <prvAddNewTaskToReadyList+0xc4>)
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	2b01      	cmp	r3, #1
 800c5d6:	d110      	bne.n	800c5fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c5d8:	f000 fc36 	bl	800ce48 <prvInitialiseTaskLists>
 800c5dc:	e00d      	b.n	800c5fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c5de:	4b26      	ldr	r3, [pc, #152]	; (800c678 <prvAddNewTaskToReadyList+0xcc>)
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d109      	bne.n	800c5fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c5e6:	4b23      	ldr	r3, [pc, #140]	; (800c674 <prvAddNewTaskToReadyList+0xc8>)
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5f0:	429a      	cmp	r2, r3
 800c5f2:	d802      	bhi.n	800c5fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c5f4:	4a1f      	ldr	r2, [pc, #124]	; (800c674 <prvAddNewTaskToReadyList+0xc8>)
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c5fa:	4b20      	ldr	r3, [pc, #128]	; (800c67c <prvAddNewTaskToReadyList+0xd0>)
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	3301      	adds	r3, #1
 800c600:	4a1e      	ldr	r2, [pc, #120]	; (800c67c <prvAddNewTaskToReadyList+0xd0>)
 800c602:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c604:	4b1d      	ldr	r3, [pc, #116]	; (800c67c <prvAddNewTaskToReadyList+0xd0>)
 800c606:	681a      	ldr	r2, [r3, #0]
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c610:	4b1b      	ldr	r3, [pc, #108]	; (800c680 <prvAddNewTaskToReadyList+0xd4>)
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	429a      	cmp	r2, r3
 800c616:	d903      	bls.n	800c620 <prvAddNewTaskToReadyList+0x74>
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c61c:	4a18      	ldr	r2, [pc, #96]	; (800c680 <prvAddNewTaskToReadyList+0xd4>)
 800c61e:	6013      	str	r3, [r2, #0]
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c624:	4613      	mov	r3, r2
 800c626:	009b      	lsls	r3, r3, #2
 800c628:	4413      	add	r3, r2
 800c62a:	009b      	lsls	r3, r3, #2
 800c62c:	4a15      	ldr	r2, [pc, #84]	; (800c684 <prvAddNewTaskToReadyList+0xd8>)
 800c62e:	441a      	add	r2, r3
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	3304      	adds	r3, #4
 800c634:	4619      	mov	r1, r3
 800c636:	4610      	mov	r0, r2
 800c638:	f7ff f871 	bl	800b71e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c63c:	f001 fa52 	bl	800dae4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c640:	4b0d      	ldr	r3, [pc, #52]	; (800c678 <prvAddNewTaskToReadyList+0xcc>)
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d00e      	beq.n	800c666 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c648:	4b0a      	ldr	r3, [pc, #40]	; (800c674 <prvAddNewTaskToReadyList+0xc8>)
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c652:	429a      	cmp	r2, r3
 800c654:	d207      	bcs.n	800c666 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c656:	4b0c      	ldr	r3, [pc, #48]	; (800c688 <prvAddNewTaskToReadyList+0xdc>)
 800c658:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c65c:	601a      	str	r2, [r3, #0]
 800c65e:	f3bf 8f4f 	dsb	sy
 800c662:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c666:	bf00      	nop
 800c668:	3708      	adds	r7, #8
 800c66a:	46bd      	mov	sp, r7
 800c66c:	bd80      	pop	{r7, pc}
 800c66e:	bf00      	nop
 800c670:	24001318 	.word	0x24001318
 800c674:	24000e44 	.word	0x24000e44
 800c678:	24001324 	.word	0x24001324
 800c67c:	24001334 	.word	0x24001334
 800c680:	24001320 	.word	0x24001320
 800c684:	24000e48 	.word	0x24000e48
 800c688:	e000ed04 	.word	0xe000ed04

0800c68c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b084      	sub	sp, #16
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c694:	2300      	movs	r3, #0
 800c696:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d017      	beq.n	800c6ce <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c69e:	4b13      	ldr	r3, [pc, #76]	; (800c6ec <vTaskDelay+0x60>)
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d00a      	beq.n	800c6bc <vTaskDelay+0x30>
	__asm volatile
 800c6a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6aa:	f383 8811 	msr	BASEPRI, r3
 800c6ae:	f3bf 8f6f 	isb	sy
 800c6b2:	f3bf 8f4f 	dsb	sy
 800c6b6:	60bb      	str	r3, [r7, #8]
}
 800c6b8:	bf00      	nop
 800c6ba:	e7fe      	b.n	800c6ba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c6bc:	f000 f88a 	bl	800c7d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c6c0:	2100      	movs	r1, #0
 800c6c2:	6878      	ldr	r0, [r7, #4]
 800c6c4:	f000 fd0e 	bl	800d0e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c6c8:	f000 f892 	bl	800c7f0 <xTaskResumeAll>
 800c6cc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d107      	bne.n	800c6e4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c6d4:	4b06      	ldr	r3, [pc, #24]	; (800c6f0 <vTaskDelay+0x64>)
 800c6d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6da:	601a      	str	r2, [r3, #0]
 800c6dc:	f3bf 8f4f 	dsb	sy
 800c6e0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c6e4:	bf00      	nop
 800c6e6:	3710      	adds	r7, #16
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	bd80      	pop	{r7, pc}
 800c6ec:	24001340 	.word	0x24001340
 800c6f0:	e000ed04 	.word	0xe000ed04

0800c6f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b08a      	sub	sp, #40	; 0x28
 800c6f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c6fe:	2300      	movs	r3, #0
 800c700:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c702:	463a      	mov	r2, r7
 800c704:	1d39      	adds	r1, r7, #4
 800c706:	f107 0308 	add.w	r3, r7, #8
 800c70a:	4618      	mov	r0, r3
 800c70c:	f7fe ffa6 	bl	800b65c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c710:	6839      	ldr	r1, [r7, #0]
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	68ba      	ldr	r2, [r7, #8]
 800c716:	9202      	str	r2, [sp, #8]
 800c718:	9301      	str	r3, [sp, #4]
 800c71a:	2300      	movs	r3, #0
 800c71c:	9300      	str	r3, [sp, #0]
 800c71e:	2300      	movs	r3, #0
 800c720:	460a      	mov	r2, r1
 800c722:	4924      	ldr	r1, [pc, #144]	; (800c7b4 <vTaskStartScheduler+0xc0>)
 800c724:	4824      	ldr	r0, [pc, #144]	; (800c7b8 <vTaskStartScheduler+0xc4>)
 800c726:	f7ff fdf9 	bl	800c31c <xTaskCreateStatic>
 800c72a:	4603      	mov	r3, r0
 800c72c:	4a23      	ldr	r2, [pc, #140]	; (800c7bc <vTaskStartScheduler+0xc8>)
 800c72e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c730:	4b22      	ldr	r3, [pc, #136]	; (800c7bc <vTaskStartScheduler+0xc8>)
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d002      	beq.n	800c73e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c738:	2301      	movs	r3, #1
 800c73a:	617b      	str	r3, [r7, #20]
 800c73c:	e001      	b.n	800c742 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c73e:	2300      	movs	r3, #0
 800c740:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c742:	697b      	ldr	r3, [r7, #20]
 800c744:	2b01      	cmp	r3, #1
 800c746:	d102      	bne.n	800c74e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c748:	f000 fd20 	bl	800d18c <xTimerCreateTimerTask>
 800c74c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c74e:	697b      	ldr	r3, [r7, #20]
 800c750:	2b01      	cmp	r3, #1
 800c752:	d11b      	bne.n	800c78c <vTaskStartScheduler+0x98>
	__asm volatile
 800c754:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c758:	f383 8811 	msr	BASEPRI, r3
 800c75c:	f3bf 8f6f 	isb	sy
 800c760:	f3bf 8f4f 	dsb	sy
 800c764:	613b      	str	r3, [r7, #16]
}
 800c766:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c768:	4b15      	ldr	r3, [pc, #84]	; (800c7c0 <vTaskStartScheduler+0xcc>)
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	3354      	adds	r3, #84	; 0x54
 800c76e:	4a15      	ldr	r2, [pc, #84]	; (800c7c4 <vTaskStartScheduler+0xd0>)
 800c770:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c772:	4b15      	ldr	r3, [pc, #84]	; (800c7c8 <vTaskStartScheduler+0xd4>)
 800c774:	f04f 32ff 	mov.w	r2, #4294967295
 800c778:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c77a:	4b14      	ldr	r3, [pc, #80]	; (800c7cc <vTaskStartScheduler+0xd8>)
 800c77c:	2201      	movs	r2, #1
 800c77e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c780:	4b13      	ldr	r3, [pc, #76]	; (800c7d0 <vTaskStartScheduler+0xdc>)
 800c782:	2200      	movs	r2, #0
 800c784:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c786:	f001 f8db 	bl	800d940 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c78a:	e00e      	b.n	800c7aa <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c78c:	697b      	ldr	r3, [r7, #20]
 800c78e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c792:	d10a      	bne.n	800c7aa <vTaskStartScheduler+0xb6>
	__asm volatile
 800c794:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c798:	f383 8811 	msr	BASEPRI, r3
 800c79c:	f3bf 8f6f 	isb	sy
 800c7a0:	f3bf 8f4f 	dsb	sy
 800c7a4:	60fb      	str	r3, [r7, #12]
}
 800c7a6:	bf00      	nop
 800c7a8:	e7fe      	b.n	800c7a8 <vTaskStartScheduler+0xb4>
}
 800c7aa:	bf00      	nop
 800c7ac:	3718      	adds	r7, #24
 800c7ae:	46bd      	mov	sp, r7
 800c7b0:	bd80      	pop	{r7, pc}
 800c7b2:	bf00      	nop
 800c7b4:	08010f24 	.word	0x08010f24
 800c7b8:	0800ce19 	.word	0x0800ce19
 800c7bc:	2400133c 	.word	0x2400133c
 800c7c0:	24000e44 	.word	0x24000e44
 800c7c4:	2400006c 	.word	0x2400006c
 800c7c8:	24001338 	.word	0x24001338
 800c7cc:	24001324 	.word	0x24001324
 800c7d0:	2400131c 	.word	0x2400131c

0800c7d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c7d4:	b480      	push	{r7}
 800c7d6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c7d8:	4b04      	ldr	r3, [pc, #16]	; (800c7ec <vTaskSuspendAll+0x18>)
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	3301      	adds	r3, #1
 800c7de:	4a03      	ldr	r2, [pc, #12]	; (800c7ec <vTaskSuspendAll+0x18>)
 800c7e0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c7e2:	bf00      	nop
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ea:	4770      	bx	lr
 800c7ec:	24001340 	.word	0x24001340

0800c7f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b084      	sub	sp, #16
 800c7f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c7fe:	4b42      	ldr	r3, [pc, #264]	; (800c908 <xTaskResumeAll+0x118>)
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d10a      	bne.n	800c81c <xTaskResumeAll+0x2c>
	__asm volatile
 800c806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c80a:	f383 8811 	msr	BASEPRI, r3
 800c80e:	f3bf 8f6f 	isb	sy
 800c812:	f3bf 8f4f 	dsb	sy
 800c816:	603b      	str	r3, [r7, #0]
}
 800c818:	bf00      	nop
 800c81a:	e7fe      	b.n	800c81a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c81c:	f001 f932 	bl	800da84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c820:	4b39      	ldr	r3, [pc, #228]	; (800c908 <xTaskResumeAll+0x118>)
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	3b01      	subs	r3, #1
 800c826:	4a38      	ldr	r2, [pc, #224]	; (800c908 <xTaskResumeAll+0x118>)
 800c828:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c82a:	4b37      	ldr	r3, [pc, #220]	; (800c908 <xTaskResumeAll+0x118>)
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d162      	bne.n	800c8f8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c832:	4b36      	ldr	r3, [pc, #216]	; (800c90c <xTaskResumeAll+0x11c>)
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d05e      	beq.n	800c8f8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c83a:	e02f      	b.n	800c89c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c83c:	4b34      	ldr	r3, [pc, #208]	; (800c910 <xTaskResumeAll+0x120>)
 800c83e:	68db      	ldr	r3, [r3, #12]
 800c840:	68db      	ldr	r3, [r3, #12]
 800c842:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	3318      	adds	r3, #24
 800c848:	4618      	mov	r0, r3
 800c84a:	f7fe ffc5 	bl	800b7d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	3304      	adds	r3, #4
 800c852:	4618      	mov	r0, r3
 800c854:	f7fe ffc0 	bl	800b7d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c85c:	4b2d      	ldr	r3, [pc, #180]	; (800c914 <xTaskResumeAll+0x124>)
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	429a      	cmp	r2, r3
 800c862:	d903      	bls.n	800c86c <xTaskResumeAll+0x7c>
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c868:	4a2a      	ldr	r2, [pc, #168]	; (800c914 <xTaskResumeAll+0x124>)
 800c86a:	6013      	str	r3, [r2, #0]
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c870:	4613      	mov	r3, r2
 800c872:	009b      	lsls	r3, r3, #2
 800c874:	4413      	add	r3, r2
 800c876:	009b      	lsls	r3, r3, #2
 800c878:	4a27      	ldr	r2, [pc, #156]	; (800c918 <xTaskResumeAll+0x128>)
 800c87a:	441a      	add	r2, r3
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	3304      	adds	r3, #4
 800c880:	4619      	mov	r1, r3
 800c882:	4610      	mov	r0, r2
 800c884:	f7fe ff4b 	bl	800b71e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c88c:	4b23      	ldr	r3, [pc, #140]	; (800c91c <xTaskResumeAll+0x12c>)
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c892:	429a      	cmp	r2, r3
 800c894:	d302      	bcc.n	800c89c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c896:	4b22      	ldr	r3, [pc, #136]	; (800c920 <xTaskResumeAll+0x130>)
 800c898:	2201      	movs	r2, #1
 800c89a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c89c:	4b1c      	ldr	r3, [pc, #112]	; (800c910 <xTaskResumeAll+0x120>)
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d1cb      	bne.n	800c83c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d001      	beq.n	800c8ae <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c8aa:	f000 fb6f 	bl	800cf8c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c8ae:	4b1d      	ldr	r3, [pc, #116]	; (800c924 <xTaskResumeAll+0x134>)
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d010      	beq.n	800c8dc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c8ba:	f000 f847 	bl	800c94c <xTaskIncrementTick>
 800c8be:	4603      	mov	r3, r0
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d002      	beq.n	800c8ca <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800c8c4:	4b16      	ldr	r3, [pc, #88]	; (800c920 <xTaskResumeAll+0x130>)
 800c8c6:	2201      	movs	r2, #1
 800c8c8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	3b01      	subs	r3, #1
 800c8ce:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d1f1      	bne.n	800c8ba <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800c8d6:	4b13      	ldr	r3, [pc, #76]	; (800c924 <xTaskResumeAll+0x134>)
 800c8d8:	2200      	movs	r2, #0
 800c8da:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c8dc:	4b10      	ldr	r3, [pc, #64]	; (800c920 <xTaskResumeAll+0x130>)
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d009      	beq.n	800c8f8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c8e4:	2301      	movs	r3, #1
 800c8e6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c8e8:	4b0f      	ldr	r3, [pc, #60]	; (800c928 <xTaskResumeAll+0x138>)
 800c8ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8ee:	601a      	str	r2, [r3, #0]
 800c8f0:	f3bf 8f4f 	dsb	sy
 800c8f4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c8f8:	f001 f8f4 	bl	800dae4 <vPortExitCritical>

	return xAlreadyYielded;
 800c8fc:	68bb      	ldr	r3, [r7, #8]
}
 800c8fe:	4618      	mov	r0, r3
 800c900:	3710      	adds	r7, #16
 800c902:	46bd      	mov	sp, r7
 800c904:	bd80      	pop	{r7, pc}
 800c906:	bf00      	nop
 800c908:	24001340 	.word	0x24001340
 800c90c:	24001318 	.word	0x24001318
 800c910:	240012d8 	.word	0x240012d8
 800c914:	24001320 	.word	0x24001320
 800c918:	24000e48 	.word	0x24000e48
 800c91c:	24000e44 	.word	0x24000e44
 800c920:	2400132c 	.word	0x2400132c
 800c924:	24001328 	.word	0x24001328
 800c928:	e000ed04 	.word	0xe000ed04

0800c92c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c92c:	b480      	push	{r7}
 800c92e:	b083      	sub	sp, #12
 800c930:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c932:	4b05      	ldr	r3, [pc, #20]	; (800c948 <xTaskGetTickCount+0x1c>)
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c938:	687b      	ldr	r3, [r7, #4]
}
 800c93a:	4618      	mov	r0, r3
 800c93c:	370c      	adds	r7, #12
 800c93e:	46bd      	mov	sp, r7
 800c940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c944:	4770      	bx	lr
 800c946:	bf00      	nop
 800c948:	2400131c 	.word	0x2400131c

0800c94c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c94c:	b580      	push	{r7, lr}
 800c94e:	b086      	sub	sp, #24
 800c950:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c952:	2300      	movs	r3, #0
 800c954:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c956:	4b4f      	ldr	r3, [pc, #316]	; (800ca94 <xTaskIncrementTick+0x148>)
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	f040 808f 	bne.w	800ca7e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c960:	4b4d      	ldr	r3, [pc, #308]	; (800ca98 <xTaskIncrementTick+0x14c>)
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	3301      	adds	r3, #1
 800c966:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c968:	4a4b      	ldr	r2, [pc, #300]	; (800ca98 <xTaskIncrementTick+0x14c>)
 800c96a:	693b      	ldr	r3, [r7, #16]
 800c96c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c96e:	693b      	ldr	r3, [r7, #16]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d120      	bne.n	800c9b6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c974:	4b49      	ldr	r3, [pc, #292]	; (800ca9c <xTaskIncrementTick+0x150>)
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d00a      	beq.n	800c994 <xTaskIncrementTick+0x48>
	__asm volatile
 800c97e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c982:	f383 8811 	msr	BASEPRI, r3
 800c986:	f3bf 8f6f 	isb	sy
 800c98a:	f3bf 8f4f 	dsb	sy
 800c98e:	603b      	str	r3, [r7, #0]
}
 800c990:	bf00      	nop
 800c992:	e7fe      	b.n	800c992 <xTaskIncrementTick+0x46>
 800c994:	4b41      	ldr	r3, [pc, #260]	; (800ca9c <xTaskIncrementTick+0x150>)
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	60fb      	str	r3, [r7, #12]
 800c99a:	4b41      	ldr	r3, [pc, #260]	; (800caa0 <xTaskIncrementTick+0x154>)
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	4a3f      	ldr	r2, [pc, #252]	; (800ca9c <xTaskIncrementTick+0x150>)
 800c9a0:	6013      	str	r3, [r2, #0]
 800c9a2:	4a3f      	ldr	r2, [pc, #252]	; (800caa0 <xTaskIncrementTick+0x154>)
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	6013      	str	r3, [r2, #0]
 800c9a8:	4b3e      	ldr	r3, [pc, #248]	; (800caa4 <xTaskIncrementTick+0x158>)
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	3301      	adds	r3, #1
 800c9ae:	4a3d      	ldr	r2, [pc, #244]	; (800caa4 <xTaskIncrementTick+0x158>)
 800c9b0:	6013      	str	r3, [r2, #0]
 800c9b2:	f000 faeb 	bl	800cf8c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c9b6:	4b3c      	ldr	r3, [pc, #240]	; (800caa8 <xTaskIncrementTick+0x15c>)
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	693a      	ldr	r2, [r7, #16]
 800c9bc:	429a      	cmp	r2, r3
 800c9be:	d349      	bcc.n	800ca54 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c9c0:	4b36      	ldr	r3, [pc, #216]	; (800ca9c <xTaskIncrementTick+0x150>)
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d104      	bne.n	800c9d4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c9ca:	4b37      	ldr	r3, [pc, #220]	; (800caa8 <xTaskIncrementTick+0x15c>)
 800c9cc:	f04f 32ff 	mov.w	r2, #4294967295
 800c9d0:	601a      	str	r2, [r3, #0]
					break;
 800c9d2:	e03f      	b.n	800ca54 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c9d4:	4b31      	ldr	r3, [pc, #196]	; (800ca9c <xTaskIncrementTick+0x150>)
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	68db      	ldr	r3, [r3, #12]
 800c9da:	68db      	ldr	r3, [r3, #12]
 800c9dc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c9de:	68bb      	ldr	r3, [r7, #8]
 800c9e0:	685b      	ldr	r3, [r3, #4]
 800c9e2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c9e4:	693a      	ldr	r2, [r7, #16]
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	429a      	cmp	r2, r3
 800c9ea:	d203      	bcs.n	800c9f4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c9ec:	4a2e      	ldr	r2, [pc, #184]	; (800caa8 <xTaskIncrementTick+0x15c>)
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c9f2:	e02f      	b.n	800ca54 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c9f4:	68bb      	ldr	r3, [r7, #8]
 800c9f6:	3304      	adds	r3, #4
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	f7fe feed 	bl	800b7d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c9fe:	68bb      	ldr	r3, [r7, #8]
 800ca00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d004      	beq.n	800ca10 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ca06:	68bb      	ldr	r3, [r7, #8]
 800ca08:	3318      	adds	r3, #24
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	f7fe fee4 	bl	800b7d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ca10:	68bb      	ldr	r3, [r7, #8]
 800ca12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca14:	4b25      	ldr	r3, [pc, #148]	; (800caac <xTaskIncrementTick+0x160>)
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	429a      	cmp	r2, r3
 800ca1a:	d903      	bls.n	800ca24 <xTaskIncrementTick+0xd8>
 800ca1c:	68bb      	ldr	r3, [r7, #8]
 800ca1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca20:	4a22      	ldr	r2, [pc, #136]	; (800caac <xTaskIncrementTick+0x160>)
 800ca22:	6013      	str	r3, [r2, #0]
 800ca24:	68bb      	ldr	r3, [r7, #8]
 800ca26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca28:	4613      	mov	r3, r2
 800ca2a:	009b      	lsls	r3, r3, #2
 800ca2c:	4413      	add	r3, r2
 800ca2e:	009b      	lsls	r3, r3, #2
 800ca30:	4a1f      	ldr	r2, [pc, #124]	; (800cab0 <xTaskIncrementTick+0x164>)
 800ca32:	441a      	add	r2, r3
 800ca34:	68bb      	ldr	r3, [r7, #8]
 800ca36:	3304      	adds	r3, #4
 800ca38:	4619      	mov	r1, r3
 800ca3a:	4610      	mov	r0, r2
 800ca3c:	f7fe fe6f 	bl	800b71e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ca40:	68bb      	ldr	r3, [r7, #8]
 800ca42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca44:	4b1b      	ldr	r3, [pc, #108]	; (800cab4 <xTaskIncrementTick+0x168>)
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca4a:	429a      	cmp	r2, r3
 800ca4c:	d3b8      	bcc.n	800c9c0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ca4e:	2301      	movs	r3, #1
 800ca50:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ca52:	e7b5      	b.n	800c9c0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ca54:	4b17      	ldr	r3, [pc, #92]	; (800cab4 <xTaskIncrementTick+0x168>)
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca5a:	4915      	ldr	r1, [pc, #84]	; (800cab0 <xTaskIncrementTick+0x164>)
 800ca5c:	4613      	mov	r3, r2
 800ca5e:	009b      	lsls	r3, r3, #2
 800ca60:	4413      	add	r3, r2
 800ca62:	009b      	lsls	r3, r3, #2
 800ca64:	440b      	add	r3, r1
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	2b01      	cmp	r3, #1
 800ca6a:	d901      	bls.n	800ca70 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ca6c:	2301      	movs	r3, #1
 800ca6e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ca70:	4b11      	ldr	r3, [pc, #68]	; (800cab8 <xTaskIncrementTick+0x16c>)
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d007      	beq.n	800ca88 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ca78:	2301      	movs	r3, #1
 800ca7a:	617b      	str	r3, [r7, #20]
 800ca7c:	e004      	b.n	800ca88 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ca7e:	4b0f      	ldr	r3, [pc, #60]	; (800cabc <xTaskIncrementTick+0x170>)
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	3301      	adds	r3, #1
 800ca84:	4a0d      	ldr	r2, [pc, #52]	; (800cabc <xTaskIncrementTick+0x170>)
 800ca86:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ca88:	697b      	ldr	r3, [r7, #20]
}
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	3718      	adds	r7, #24
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	bd80      	pop	{r7, pc}
 800ca92:	bf00      	nop
 800ca94:	24001340 	.word	0x24001340
 800ca98:	2400131c 	.word	0x2400131c
 800ca9c:	240012d0 	.word	0x240012d0
 800caa0:	240012d4 	.word	0x240012d4
 800caa4:	24001330 	.word	0x24001330
 800caa8:	24001338 	.word	0x24001338
 800caac:	24001320 	.word	0x24001320
 800cab0:	24000e48 	.word	0x24000e48
 800cab4:	24000e44 	.word	0x24000e44
 800cab8:	2400132c 	.word	0x2400132c
 800cabc:	24001328 	.word	0x24001328

0800cac0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b084      	sub	sp, #16
 800cac4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cac6:	4b32      	ldr	r3, [pc, #200]	; (800cb90 <vTaskSwitchContext+0xd0>)
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d003      	beq.n	800cad6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cace:	4b31      	ldr	r3, [pc, #196]	; (800cb94 <vTaskSwitchContext+0xd4>)
 800cad0:	2201      	movs	r2, #1
 800cad2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cad4:	e057      	b.n	800cb86 <vTaskSwitchContext+0xc6>
		xYieldPending = pdFALSE;
 800cad6:	4b2f      	ldr	r3, [pc, #188]	; (800cb94 <vTaskSwitchContext+0xd4>)
 800cad8:	2200      	movs	r2, #0
 800cada:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800cadc:	4b2e      	ldr	r3, [pc, #184]	; (800cb98 <vTaskSwitchContext+0xd8>)
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	681a      	ldr	r2, [r3, #0]
 800cae2:	4b2d      	ldr	r3, [pc, #180]	; (800cb98 <vTaskSwitchContext+0xd8>)
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cae8:	429a      	cmp	r2, r3
 800caea:	d808      	bhi.n	800cafe <vTaskSwitchContext+0x3e>
 800caec:	4b2a      	ldr	r3, [pc, #168]	; (800cb98 <vTaskSwitchContext+0xd8>)
 800caee:	681a      	ldr	r2, [r3, #0]
 800caf0:	4b29      	ldr	r3, [pc, #164]	; (800cb98 <vTaskSwitchContext+0xd8>)
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	3334      	adds	r3, #52	; 0x34
 800caf6:	4619      	mov	r1, r3
 800caf8:	4610      	mov	r0, r2
 800cafa:	f7f3 fddf 	bl	80006bc <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cafe:	4b27      	ldr	r3, [pc, #156]	; (800cb9c <vTaskSwitchContext+0xdc>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	60fb      	str	r3, [r7, #12]
 800cb04:	e010      	b.n	800cb28 <vTaskSwitchContext+0x68>
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d10a      	bne.n	800cb22 <vTaskSwitchContext+0x62>
	__asm volatile
 800cb0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb10:	f383 8811 	msr	BASEPRI, r3
 800cb14:	f3bf 8f6f 	isb	sy
 800cb18:	f3bf 8f4f 	dsb	sy
 800cb1c:	607b      	str	r3, [r7, #4]
}
 800cb1e:	bf00      	nop
 800cb20:	e7fe      	b.n	800cb20 <vTaskSwitchContext+0x60>
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	3b01      	subs	r3, #1
 800cb26:	60fb      	str	r3, [r7, #12]
 800cb28:	491d      	ldr	r1, [pc, #116]	; (800cba0 <vTaskSwitchContext+0xe0>)
 800cb2a:	68fa      	ldr	r2, [r7, #12]
 800cb2c:	4613      	mov	r3, r2
 800cb2e:	009b      	lsls	r3, r3, #2
 800cb30:	4413      	add	r3, r2
 800cb32:	009b      	lsls	r3, r3, #2
 800cb34:	440b      	add	r3, r1
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d0e4      	beq.n	800cb06 <vTaskSwitchContext+0x46>
 800cb3c:	68fa      	ldr	r2, [r7, #12]
 800cb3e:	4613      	mov	r3, r2
 800cb40:	009b      	lsls	r3, r3, #2
 800cb42:	4413      	add	r3, r2
 800cb44:	009b      	lsls	r3, r3, #2
 800cb46:	4a16      	ldr	r2, [pc, #88]	; (800cba0 <vTaskSwitchContext+0xe0>)
 800cb48:	4413      	add	r3, r2
 800cb4a:	60bb      	str	r3, [r7, #8]
 800cb4c:	68bb      	ldr	r3, [r7, #8]
 800cb4e:	685b      	ldr	r3, [r3, #4]
 800cb50:	685a      	ldr	r2, [r3, #4]
 800cb52:	68bb      	ldr	r3, [r7, #8]
 800cb54:	605a      	str	r2, [r3, #4]
 800cb56:	68bb      	ldr	r3, [r7, #8]
 800cb58:	685a      	ldr	r2, [r3, #4]
 800cb5a:	68bb      	ldr	r3, [r7, #8]
 800cb5c:	3308      	adds	r3, #8
 800cb5e:	429a      	cmp	r2, r3
 800cb60:	d104      	bne.n	800cb6c <vTaskSwitchContext+0xac>
 800cb62:	68bb      	ldr	r3, [r7, #8]
 800cb64:	685b      	ldr	r3, [r3, #4]
 800cb66:	685a      	ldr	r2, [r3, #4]
 800cb68:	68bb      	ldr	r3, [r7, #8]
 800cb6a:	605a      	str	r2, [r3, #4]
 800cb6c:	68bb      	ldr	r3, [r7, #8]
 800cb6e:	685b      	ldr	r3, [r3, #4]
 800cb70:	68db      	ldr	r3, [r3, #12]
 800cb72:	4a09      	ldr	r2, [pc, #36]	; (800cb98 <vTaskSwitchContext+0xd8>)
 800cb74:	6013      	str	r3, [r2, #0]
 800cb76:	4a09      	ldr	r2, [pc, #36]	; (800cb9c <vTaskSwitchContext+0xdc>)
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cb7c:	4b06      	ldr	r3, [pc, #24]	; (800cb98 <vTaskSwitchContext+0xd8>)
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	3354      	adds	r3, #84	; 0x54
 800cb82:	4a08      	ldr	r2, [pc, #32]	; (800cba4 <vTaskSwitchContext+0xe4>)
 800cb84:	6013      	str	r3, [r2, #0]
}
 800cb86:	bf00      	nop
 800cb88:	3710      	adds	r7, #16
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	bd80      	pop	{r7, pc}
 800cb8e:	bf00      	nop
 800cb90:	24001340 	.word	0x24001340
 800cb94:	2400132c 	.word	0x2400132c
 800cb98:	24000e44 	.word	0x24000e44
 800cb9c:	24001320 	.word	0x24001320
 800cba0:	24000e48 	.word	0x24000e48
 800cba4:	2400006c 	.word	0x2400006c

0800cba8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b084      	sub	sp, #16
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
 800cbb0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d10a      	bne.n	800cbce <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800cbb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbbc:	f383 8811 	msr	BASEPRI, r3
 800cbc0:	f3bf 8f6f 	isb	sy
 800cbc4:	f3bf 8f4f 	dsb	sy
 800cbc8:	60fb      	str	r3, [r7, #12]
}
 800cbca:	bf00      	nop
 800cbcc:	e7fe      	b.n	800cbcc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cbce:	4b07      	ldr	r3, [pc, #28]	; (800cbec <vTaskPlaceOnEventList+0x44>)
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	3318      	adds	r3, #24
 800cbd4:	4619      	mov	r1, r3
 800cbd6:	6878      	ldr	r0, [r7, #4]
 800cbd8:	f7fe fdc5 	bl	800b766 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cbdc:	2101      	movs	r1, #1
 800cbde:	6838      	ldr	r0, [r7, #0]
 800cbe0:	f000 fa80 	bl	800d0e4 <prvAddCurrentTaskToDelayedList>
}
 800cbe4:	bf00      	nop
 800cbe6:	3710      	adds	r7, #16
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	bd80      	pop	{r7, pc}
 800cbec:	24000e44 	.word	0x24000e44

0800cbf0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b086      	sub	sp, #24
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	60f8      	str	r0, [r7, #12]
 800cbf8:	60b9      	str	r1, [r7, #8]
 800cbfa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d10a      	bne.n	800cc18 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800cc02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc06:	f383 8811 	msr	BASEPRI, r3
 800cc0a:	f3bf 8f6f 	isb	sy
 800cc0e:	f3bf 8f4f 	dsb	sy
 800cc12:	617b      	str	r3, [r7, #20]
}
 800cc14:	bf00      	nop
 800cc16:	e7fe      	b.n	800cc16 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cc18:	4b0a      	ldr	r3, [pc, #40]	; (800cc44 <vTaskPlaceOnEventListRestricted+0x54>)
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	3318      	adds	r3, #24
 800cc1e:	4619      	mov	r1, r3
 800cc20:	68f8      	ldr	r0, [r7, #12]
 800cc22:	f7fe fd7c 	bl	800b71e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d002      	beq.n	800cc32 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800cc2c:	f04f 33ff 	mov.w	r3, #4294967295
 800cc30:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800cc32:	6879      	ldr	r1, [r7, #4]
 800cc34:	68b8      	ldr	r0, [r7, #8]
 800cc36:	f000 fa55 	bl	800d0e4 <prvAddCurrentTaskToDelayedList>
	}
 800cc3a:	bf00      	nop
 800cc3c:	3718      	adds	r7, #24
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	bd80      	pop	{r7, pc}
 800cc42:	bf00      	nop
 800cc44:	24000e44 	.word	0x24000e44

0800cc48 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b086      	sub	sp, #24
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	68db      	ldr	r3, [r3, #12]
 800cc54:	68db      	ldr	r3, [r3, #12]
 800cc56:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cc58:	693b      	ldr	r3, [r7, #16]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d10a      	bne.n	800cc74 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800cc5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc62:	f383 8811 	msr	BASEPRI, r3
 800cc66:	f3bf 8f6f 	isb	sy
 800cc6a:	f3bf 8f4f 	dsb	sy
 800cc6e:	60fb      	str	r3, [r7, #12]
}
 800cc70:	bf00      	nop
 800cc72:	e7fe      	b.n	800cc72 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cc74:	693b      	ldr	r3, [r7, #16]
 800cc76:	3318      	adds	r3, #24
 800cc78:	4618      	mov	r0, r3
 800cc7a:	f7fe fdad 	bl	800b7d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cc7e:	4b1e      	ldr	r3, [pc, #120]	; (800ccf8 <xTaskRemoveFromEventList+0xb0>)
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d11d      	bne.n	800ccc2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cc86:	693b      	ldr	r3, [r7, #16]
 800cc88:	3304      	adds	r3, #4
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	f7fe fda4 	bl	800b7d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cc90:	693b      	ldr	r3, [r7, #16]
 800cc92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc94:	4b19      	ldr	r3, [pc, #100]	; (800ccfc <xTaskRemoveFromEventList+0xb4>)
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	429a      	cmp	r2, r3
 800cc9a:	d903      	bls.n	800cca4 <xTaskRemoveFromEventList+0x5c>
 800cc9c:	693b      	ldr	r3, [r7, #16]
 800cc9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cca0:	4a16      	ldr	r2, [pc, #88]	; (800ccfc <xTaskRemoveFromEventList+0xb4>)
 800cca2:	6013      	str	r3, [r2, #0]
 800cca4:	693b      	ldr	r3, [r7, #16]
 800cca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cca8:	4613      	mov	r3, r2
 800ccaa:	009b      	lsls	r3, r3, #2
 800ccac:	4413      	add	r3, r2
 800ccae:	009b      	lsls	r3, r3, #2
 800ccb0:	4a13      	ldr	r2, [pc, #76]	; (800cd00 <xTaskRemoveFromEventList+0xb8>)
 800ccb2:	441a      	add	r2, r3
 800ccb4:	693b      	ldr	r3, [r7, #16]
 800ccb6:	3304      	adds	r3, #4
 800ccb8:	4619      	mov	r1, r3
 800ccba:	4610      	mov	r0, r2
 800ccbc:	f7fe fd2f 	bl	800b71e <vListInsertEnd>
 800ccc0:	e005      	b.n	800ccce <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ccc2:	693b      	ldr	r3, [r7, #16]
 800ccc4:	3318      	adds	r3, #24
 800ccc6:	4619      	mov	r1, r3
 800ccc8:	480e      	ldr	r0, [pc, #56]	; (800cd04 <xTaskRemoveFromEventList+0xbc>)
 800ccca:	f7fe fd28 	bl	800b71e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ccce:	693b      	ldr	r3, [r7, #16]
 800ccd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccd2:	4b0d      	ldr	r3, [pc, #52]	; (800cd08 <xTaskRemoveFromEventList+0xc0>)
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccd8:	429a      	cmp	r2, r3
 800ccda:	d905      	bls.n	800cce8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ccdc:	2301      	movs	r3, #1
 800ccde:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cce0:	4b0a      	ldr	r3, [pc, #40]	; (800cd0c <xTaskRemoveFromEventList+0xc4>)
 800cce2:	2201      	movs	r2, #1
 800cce4:	601a      	str	r2, [r3, #0]
 800cce6:	e001      	b.n	800ccec <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800cce8:	2300      	movs	r3, #0
 800ccea:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ccec:	697b      	ldr	r3, [r7, #20]
}
 800ccee:	4618      	mov	r0, r3
 800ccf0:	3718      	adds	r7, #24
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	bd80      	pop	{r7, pc}
 800ccf6:	bf00      	nop
 800ccf8:	24001340 	.word	0x24001340
 800ccfc:	24001320 	.word	0x24001320
 800cd00:	24000e48 	.word	0x24000e48
 800cd04:	240012d8 	.word	0x240012d8
 800cd08:	24000e44 	.word	0x24000e44
 800cd0c:	2400132c 	.word	0x2400132c

0800cd10 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cd10:	b480      	push	{r7}
 800cd12:	b083      	sub	sp, #12
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cd18:	4b06      	ldr	r3, [pc, #24]	; (800cd34 <vTaskInternalSetTimeOutState+0x24>)
 800cd1a:	681a      	ldr	r2, [r3, #0]
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cd20:	4b05      	ldr	r3, [pc, #20]	; (800cd38 <vTaskInternalSetTimeOutState+0x28>)
 800cd22:	681a      	ldr	r2, [r3, #0]
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	605a      	str	r2, [r3, #4]
}
 800cd28:	bf00      	nop
 800cd2a:	370c      	adds	r7, #12
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd32:	4770      	bx	lr
 800cd34:	24001330 	.word	0x24001330
 800cd38:	2400131c 	.word	0x2400131c

0800cd3c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b088      	sub	sp, #32
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	6078      	str	r0, [r7, #4]
 800cd44:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d10a      	bne.n	800cd62 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800cd4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd50:	f383 8811 	msr	BASEPRI, r3
 800cd54:	f3bf 8f6f 	isb	sy
 800cd58:	f3bf 8f4f 	dsb	sy
 800cd5c:	613b      	str	r3, [r7, #16]
}
 800cd5e:	bf00      	nop
 800cd60:	e7fe      	b.n	800cd60 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800cd62:	683b      	ldr	r3, [r7, #0]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d10a      	bne.n	800cd7e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800cd68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd6c:	f383 8811 	msr	BASEPRI, r3
 800cd70:	f3bf 8f6f 	isb	sy
 800cd74:	f3bf 8f4f 	dsb	sy
 800cd78:	60fb      	str	r3, [r7, #12]
}
 800cd7a:	bf00      	nop
 800cd7c:	e7fe      	b.n	800cd7c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800cd7e:	f000 fe81 	bl	800da84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cd82:	4b1d      	ldr	r3, [pc, #116]	; (800cdf8 <xTaskCheckForTimeOut+0xbc>)
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	685b      	ldr	r3, [r3, #4]
 800cd8c:	69ba      	ldr	r2, [r7, #24]
 800cd8e:	1ad3      	subs	r3, r2, r3
 800cd90:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cd92:	683b      	ldr	r3, [r7, #0]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd9a:	d102      	bne.n	800cda2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	61fb      	str	r3, [r7, #28]
 800cda0:	e023      	b.n	800cdea <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	681a      	ldr	r2, [r3, #0]
 800cda6:	4b15      	ldr	r3, [pc, #84]	; (800cdfc <xTaskCheckForTimeOut+0xc0>)
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	429a      	cmp	r2, r3
 800cdac:	d007      	beq.n	800cdbe <xTaskCheckForTimeOut+0x82>
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	685b      	ldr	r3, [r3, #4]
 800cdb2:	69ba      	ldr	r2, [r7, #24]
 800cdb4:	429a      	cmp	r2, r3
 800cdb6:	d302      	bcc.n	800cdbe <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cdb8:	2301      	movs	r3, #1
 800cdba:	61fb      	str	r3, [r7, #28]
 800cdbc:	e015      	b.n	800cdea <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cdbe:	683b      	ldr	r3, [r7, #0]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	697a      	ldr	r2, [r7, #20]
 800cdc4:	429a      	cmp	r2, r3
 800cdc6:	d20b      	bcs.n	800cde0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cdc8:	683b      	ldr	r3, [r7, #0]
 800cdca:	681a      	ldr	r2, [r3, #0]
 800cdcc:	697b      	ldr	r3, [r7, #20]
 800cdce:	1ad2      	subs	r2, r2, r3
 800cdd0:	683b      	ldr	r3, [r7, #0]
 800cdd2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cdd4:	6878      	ldr	r0, [r7, #4]
 800cdd6:	f7ff ff9b 	bl	800cd10 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cdda:	2300      	movs	r3, #0
 800cddc:	61fb      	str	r3, [r7, #28]
 800cdde:	e004      	b.n	800cdea <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800cde0:	683b      	ldr	r3, [r7, #0]
 800cde2:	2200      	movs	r2, #0
 800cde4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cde6:	2301      	movs	r3, #1
 800cde8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cdea:	f000 fe7b 	bl	800dae4 <vPortExitCritical>

	return xReturn;
 800cdee:	69fb      	ldr	r3, [r7, #28]
}
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	3720      	adds	r7, #32
 800cdf4:	46bd      	mov	sp, r7
 800cdf6:	bd80      	pop	{r7, pc}
 800cdf8:	2400131c 	.word	0x2400131c
 800cdfc:	24001330 	.word	0x24001330

0800ce00 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ce00:	b480      	push	{r7}
 800ce02:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ce04:	4b03      	ldr	r3, [pc, #12]	; (800ce14 <vTaskMissedYield+0x14>)
 800ce06:	2201      	movs	r2, #1
 800ce08:	601a      	str	r2, [r3, #0]
}
 800ce0a:	bf00      	nop
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce12:	4770      	bx	lr
 800ce14:	2400132c 	.word	0x2400132c

0800ce18 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b082      	sub	sp, #8
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ce20:	f000 f852 	bl	800cec8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ce24:	4b06      	ldr	r3, [pc, #24]	; (800ce40 <prvIdleTask+0x28>)
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	2b01      	cmp	r3, #1
 800ce2a:	d9f9      	bls.n	800ce20 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ce2c:	4b05      	ldr	r3, [pc, #20]	; (800ce44 <prvIdleTask+0x2c>)
 800ce2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce32:	601a      	str	r2, [r3, #0]
 800ce34:	f3bf 8f4f 	dsb	sy
 800ce38:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ce3c:	e7f0      	b.n	800ce20 <prvIdleTask+0x8>
 800ce3e:	bf00      	nop
 800ce40:	24000e48 	.word	0x24000e48
 800ce44:	e000ed04 	.word	0xe000ed04

0800ce48 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b082      	sub	sp, #8
 800ce4c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ce4e:	2300      	movs	r3, #0
 800ce50:	607b      	str	r3, [r7, #4]
 800ce52:	e00c      	b.n	800ce6e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ce54:	687a      	ldr	r2, [r7, #4]
 800ce56:	4613      	mov	r3, r2
 800ce58:	009b      	lsls	r3, r3, #2
 800ce5a:	4413      	add	r3, r2
 800ce5c:	009b      	lsls	r3, r3, #2
 800ce5e:	4a12      	ldr	r2, [pc, #72]	; (800cea8 <prvInitialiseTaskLists+0x60>)
 800ce60:	4413      	add	r3, r2
 800ce62:	4618      	mov	r0, r3
 800ce64:	f7fe fc2e 	bl	800b6c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	3301      	adds	r3, #1
 800ce6c:	607b      	str	r3, [r7, #4]
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	2b37      	cmp	r3, #55	; 0x37
 800ce72:	d9ef      	bls.n	800ce54 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ce74:	480d      	ldr	r0, [pc, #52]	; (800ceac <prvInitialiseTaskLists+0x64>)
 800ce76:	f7fe fc25 	bl	800b6c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ce7a:	480d      	ldr	r0, [pc, #52]	; (800ceb0 <prvInitialiseTaskLists+0x68>)
 800ce7c:	f7fe fc22 	bl	800b6c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ce80:	480c      	ldr	r0, [pc, #48]	; (800ceb4 <prvInitialiseTaskLists+0x6c>)
 800ce82:	f7fe fc1f 	bl	800b6c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ce86:	480c      	ldr	r0, [pc, #48]	; (800ceb8 <prvInitialiseTaskLists+0x70>)
 800ce88:	f7fe fc1c 	bl	800b6c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ce8c:	480b      	ldr	r0, [pc, #44]	; (800cebc <prvInitialiseTaskLists+0x74>)
 800ce8e:	f7fe fc19 	bl	800b6c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ce92:	4b0b      	ldr	r3, [pc, #44]	; (800cec0 <prvInitialiseTaskLists+0x78>)
 800ce94:	4a05      	ldr	r2, [pc, #20]	; (800ceac <prvInitialiseTaskLists+0x64>)
 800ce96:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ce98:	4b0a      	ldr	r3, [pc, #40]	; (800cec4 <prvInitialiseTaskLists+0x7c>)
 800ce9a:	4a05      	ldr	r2, [pc, #20]	; (800ceb0 <prvInitialiseTaskLists+0x68>)
 800ce9c:	601a      	str	r2, [r3, #0]
}
 800ce9e:	bf00      	nop
 800cea0:	3708      	adds	r7, #8
 800cea2:	46bd      	mov	sp, r7
 800cea4:	bd80      	pop	{r7, pc}
 800cea6:	bf00      	nop
 800cea8:	24000e48 	.word	0x24000e48
 800ceac:	240012a8 	.word	0x240012a8
 800ceb0:	240012bc 	.word	0x240012bc
 800ceb4:	240012d8 	.word	0x240012d8
 800ceb8:	240012ec 	.word	0x240012ec
 800cebc:	24001304 	.word	0x24001304
 800cec0:	240012d0 	.word	0x240012d0
 800cec4:	240012d4 	.word	0x240012d4

0800cec8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b082      	sub	sp, #8
 800cecc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cece:	e019      	b.n	800cf04 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ced0:	f000 fdd8 	bl	800da84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ced4:	4b10      	ldr	r3, [pc, #64]	; (800cf18 <prvCheckTasksWaitingTermination+0x50>)
 800ced6:	68db      	ldr	r3, [r3, #12]
 800ced8:	68db      	ldr	r3, [r3, #12]
 800ceda:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	3304      	adds	r3, #4
 800cee0:	4618      	mov	r0, r3
 800cee2:	f7fe fc79 	bl	800b7d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cee6:	4b0d      	ldr	r3, [pc, #52]	; (800cf1c <prvCheckTasksWaitingTermination+0x54>)
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	3b01      	subs	r3, #1
 800ceec:	4a0b      	ldr	r2, [pc, #44]	; (800cf1c <prvCheckTasksWaitingTermination+0x54>)
 800ceee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cef0:	4b0b      	ldr	r3, [pc, #44]	; (800cf20 <prvCheckTasksWaitingTermination+0x58>)
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	3b01      	subs	r3, #1
 800cef6:	4a0a      	ldr	r2, [pc, #40]	; (800cf20 <prvCheckTasksWaitingTermination+0x58>)
 800cef8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cefa:	f000 fdf3 	bl	800dae4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cefe:	6878      	ldr	r0, [r7, #4]
 800cf00:	f000 f810 	bl	800cf24 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cf04:	4b06      	ldr	r3, [pc, #24]	; (800cf20 <prvCheckTasksWaitingTermination+0x58>)
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d1e1      	bne.n	800ced0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cf0c:	bf00      	nop
 800cf0e:	bf00      	nop
 800cf10:	3708      	adds	r7, #8
 800cf12:	46bd      	mov	sp, r7
 800cf14:	bd80      	pop	{r7, pc}
 800cf16:	bf00      	nop
 800cf18:	240012ec 	.word	0x240012ec
 800cf1c:	24001318 	.word	0x24001318
 800cf20:	24001300 	.word	0x24001300

0800cf24 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b084      	sub	sp, #16
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	3354      	adds	r3, #84	; 0x54
 800cf30:	4618      	mov	r0, r3
 800cf32:	f001 ffbf 	bl	800eeb4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d108      	bne.n	800cf52 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf44:	4618      	mov	r0, r3
 800cf46:	f000 fed1 	bl	800dcec <vPortFree>
				vPortFree( pxTCB );
 800cf4a:	6878      	ldr	r0, [r7, #4]
 800cf4c:	f000 fece 	bl	800dcec <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cf50:	e018      	b.n	800cf84 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800cf58:	2b01      	cmp	r3, #1
 800cf5a:	d103      	bne.n	800cf64 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800cf5c:	6878      	ldr	r0, [r7, #4]
 800cf5e:	f000 fec5 	bl	800dcec <vPortFree>
	}
 800cf62:	e00f      	b.n	800cf84 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800cf6a:	2b02      	cmp	r3, #2
 800cf6c:	d00a      	beq.n	800cf84 <prvDeleteTCB+0x60>
	__asm volatile
 800cf6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf72:	f383 8811 	msr	BASEPRI, r3
 800cf76:	f3bf 8f6f 	isb	sy
 800cf7a:	f3bf 8f4f 	dsb	sy
 800cf7e:	60fb      	str	r3, [r7, #12]
}
 800cf80:	bf00      	nop
 800cf82:	e7fe      	b.n	800cf82 <prvDeleteTCB+0x5e>
	}
 800cf84:	bf00      	nop
 800cf86:	3710      	adds	r7, #16
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	bd80      	pop	{r7, pc}

0800cf8c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cf8c:	b480      	push	{r7}
 800cf8e:	b083      	sub	sp, #12
 800cf90:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cf92:	4b0c      	ldr	r3, [pc, #48]	; (800cfc4 <prvResetNextTaskUnblockTime+0x38>)
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d104      	bne.n	800cfa6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cf9c:	4b0a      	ldr	r3, [pc, #40]	; (800cfc8 <prvResetNextTaskUnblockTime+0x3c>)
 800cf9e:	f04f 32ff 	mov.w	r2, #4294967295
 800cfa2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cfa4:	e008      	b.n	800cfb8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cfa6:	4b07      	ldr	r3, [pc, #28]	; (800cfc4 <prvResetNextTaskUnblockTime+0x38>)
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	68db      	ldr	r3, [r3, #12]
 800cfac:	68db      	ldr	r3, [r3, #12]
 800cfae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	685b      	ldr	r3, [r3, #4]
 800cfb4:	4a04      	ldr	r2, [pc, #16]	; (800cfc8 <prvResetNextTaskUnblockTime+0x3c>)
 800cfb6:	6013      	str	r3, [r2, #0]
}
 800cfb8:	bf00      	nop
 800cfba:	370c      	adds	r7, #12
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc2:	4770      	bx	lr
 800cfc4:	240012d0 	.word	0x240012d0
 800cfc8:	24001338 	.word	0x24001338

0800cfcc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cfcc:	b480      	push	{r7}
 800cfce:	b083      	sub	sp, #12
 800cfd0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cfd2:	4b0b      	ldr	r3, [pc, #44]	; (800d000 <xTaskGetSchedulerState+0x34>)
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d102      	bne.n	800cfe0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cfda:	2301      	movs	r3, #1
 800cfdc:	607b      	str	r3, [r7, #4]
 800cfde:	e008      	b.n	800cff2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cfe0:	4b08      	ldr	r3, [pc, #32]	; (800d004 <xTaskGetSchedulerState+0x38>)
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d102      	bne.n	800cfee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cfe8:	2302      	movs	r3, #2
 800cfea:	607b      	str	r3, [r7, #4]
 800cfec:	e001      	b.n	800cff2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cfee:	2300      	movs	r3, #0
 800cff0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cff2:	687b      	ldr	r3, [r7, #4]
	}
 800cff4:	4618      	mov	r0, r3
 800cff6:	370c      	adds	r7, #12
 800cff8:	46bd      	mov	sp, r7
 800cffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cffe:	4770      	bx	lr
 800d000:	24001324 	.word	0x24001324
 800d004:	24001340 	.word	0x24001340

0800d008 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b086      	sub	sp, #24
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d014:	2300      	movs	r3, #0
 800d016:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d056      	beq.n	800d0cc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d01e:	4b2e      	ldr	r3, [pc, #184]	; (800d0d8 <xTaskPriorityDisinherit+0xd0>)
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	693a      	ldr	r2, [r7, #16]
 800d024:	429a      	cmp	r2, r3
 800d026:	d00a      	beq.n	800d03e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d02c:	f383 8811 	msr	BASEPRI, r3
 800d030:	f3bf 8f6f 	isb	sy
 800d034:	f3bf 8f4f 	dsb	sy
 800d038:	60fb      	str	r3, [r7, #12]
}
 800d03a:	bf00      	nop
 800d03c:	e7fe      	b.n	800d03c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d03e:	693b      	ldr	r3, [r7, #16]
 800d040:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d042:	2b00      	cmp	r3, #0
 800d044:	d10a      	bne.n	800d05c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d04a:	f383 8811 	msr	BASEPRI, r3
 800d04e:	f3bf 8f6f 	isb	sy
 800d052:	f3bf 8f4f 	dsb	sy
 800d056:	60bb      	str	r3, [r7, #8]
}
 800d058:	bf00      	nop
 800d05a:	e7fe      	b.n	800d05a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d05c:	693b      	ldr	r3, [r7, #16]
 800d05e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d060:	1e5a      	subs	r2, r3, #1
 800d062:	693b      	ldr	r3, [r7, #16]
 800d064:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d066:	693b      	ldr	r3, [r7, #16]
 800d068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d06a:	693b      	ldr	r3, [r7, #16]
 800d06c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d06e:	429a      	cmp	r2, r3
 800d070:	d02c      	beq.n	800d0cc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d072:	693b      	ldr	r3, [r7, #16]
 800d074:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d076:	2b00      	cmp	r3, #0
 800d078:	d128      	bne.n	800d0cc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d07a:	693b      	ldr	r3, [r7, #16]
 800d07c:	3304      	adds	r3, #4
 800d07e:	4618      	mov	r0, r3
 800d080:	f7fe fbaa 	bl	800b7d8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d084:	693b      	ldr	r3, [r7, #16]
 800d086:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d088:	693b      	ldr	r3, [r7, #16]
 800d08a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d08c:	693b      	ldr	r3, [r7, #16]
 800d08e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d090:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d094:	693b      	ldr	r3, [r7, #16]
 800d096:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d098:	693b      	ldr	r3, [r7, #16]
 800d09a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d09c:	4b0f      	ldr	r3, [pc, #60]	; (800d0dc <xTaskPriorityDisinherit+0xd4>)
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	429a      	cmp	r2, r3
 800d0a2:	d903      	bls.n	800d0ac <xTaskPriorityDisinherit+0xa4>
 800d0a4:	693b      	ldr	r3, [r7, #16]
 800d0a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0a8:	4a0c      	ldr	r2, [pc, #48]	; (800d0dc <xTaskPriorityDisinherit+0xd4>)
 800d0aa:	6013      	str	r3, [r2, #0]
 800d0ac:	693b      	ldr	r3, [r7, #16]
 800d0ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0b0:	4613      	mov	r3, r2
 800d0b2:	009b      	lsls	r3, r3, #2
 800d0b4:	4413      	add	r3, r2
 800d0b6:	009b      	lsls	r3, r3, #2
 800d0b8:	4a09      	ldr	r2, [pc, #36]	; (800d0e0 <xTaskPriorityDisinherit+0xd8>)
 800d0ba:	441a      	add	r2, r3
 800d0bc:	693b      	ldr	r3, [r7, #16]
 800d0be:	3304      	adds	r3, #4
 800d0c0:	4619      	mov	r1, r3
 800d0c2:	4610      	mov	r0, r2
 800d0c4:	f7fe fb2b 	bl	800b71e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d0c8:	2301      	movs	r3, #1
 800d0ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d0cc:	697b      	ldr	r3, [r7, #20]
	}
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	3718      	adds	r7, #24
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	bd80      	pop	{r7, pc}
 800d0d6:	bf00      	nop
 800d0d8:	24000e44 	.word	0x24000e44
 800d0dc:	24001320 	.word	0x24001320
 800d0e0:	24000e48 	.word	0x24000e48

0800d0e4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d0e4:	b580      	push	{r7, lr}
 800d0e6:	b084      	sub	sp, #16
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	6078      	str	r0, [r7, #4]
 800d0ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d0ee:	4b21      	ldr	r3, [pc, #132]	; (800d174 <prvAddCurrentTaskToDelayedList+0x90>)
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d0f4:	4b20      	ldr	r3, [pc, #128]	; (800d178 <prvAddCurrentTaskToDelayedList+0x94>)
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	3304      	adds	r3, #4
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	f7fe fb6c 	bl	800b7d8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d106:	d10a      	bne.n	800d11e <prvAddCurrentTaskToDelayedList+0x3a>
 800d108:	683b      	ldr	r3, [r7, #0]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d007      	beq.n	800d11e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d10e:	4b1a      	ldr	r3, [pc, #104]	; (800d178 <prvAddCurrentTaskToDelayedList+0x94>)
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	3304      	adds	r3, #4
 800d114:	4619      	mov	r1, r3
 800d116:	4819      	ldr	r0, [pc, #100]	; (800d17c <prvAddCurrentTaskToDelayedList+0x98>)
 800d118:	f7fe fb01 	bl	800b71e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d11c:	e026      	b.n	800d16c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d11e:	68fa      	ldr	r2, [r7, #12]
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	4413      	add	r3, r2
 800d124:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d126:	4b14      	ldr	r3, [pc, #80]	; (800d178 <prvAddCurrentTaskToDelayedList+0x94>)
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	68ba      	ldr	r2, [r7, #8]
 800d12c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d12e:	68ba      	ldr	r2, [r7, #8]
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	429a      	cmp	r2, r3
 800d134:	d209      	bcs.n	800d14a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d136:	4b12      	ldr	r3, [pc, #72]	; (800d180 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d138:	681a      	ldr	r2, [r3, #0]
 800d13a:	4b0f      	ldr	r3, [pc, #60]	; (800d178 <prvAddCurrentTaskToDelayedList+0x94>)
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	3304      	adds	r3, #4
 800d140:	4619      	mov	r1, r3
 800d142:	4610      	mov	r0, r2
 800d144:	f7fe fb0f 	bl	800b766 <vListInsert>
}
 800d148:	e010      	b.n	800d16c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d14a:	4b0e      	ldr	r3, [pc, #56]	; (800d184 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d14c:	681a      	ldr	r2, [r3, #0]
 800d14e:	4b0a      	ldr	r3, [pc, #40]	; (800d178 <prvAddCurrentTaskToDelayedList+0x94>)
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	3304      	adds	r3, #4
 800d154:	4619      	mov	r1, r3
 800d156:	4610      	mov	r0, r2
 800d158:	f7fe fb05 	bl	800b766 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d15c:	4b0a      	ldr	r3, [pc, #40]	; (800d188 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	68ba      	ldr	r2, [r7, #8]
 800d162:	429a      	cmp	r2, r3
 800d164:	d202      	bcs.n	800d16c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d166:	4a08      	ldr	r2, [pc, #32]	; (800d188 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d168:	68bb      	ldr	r3, [r7, #8]
 800d16a:	6013      	str	r3, [r2, #0]
}
 800d16c:	bf00      	nop
 800d16e:	3710      	adds	r7, #16
 800d170:	46bd      	mov	sp, r7
 800d172:	bd80      	pop	{r7, pc}
 800d174:	2400131c 	.word	0x2400131c
 800d178:	24000e44 	.word	0x24000e44
 800d17c:	24001304 	.word	0x24001304
 800d180:	240012d4 	.word	0x240012d4
 800d184:	240012d0 	.word	0x240012d0
 800d188:	24001338 	.word	0x24001338

0800d18c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b08a      	sub	sp, #40	; 0x28
 800d190:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d192:	2300      	movs	r3, #0
 800d194:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d196:	f000 fb07 	bl	800d7a8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d19a:	4b1c      	ldr	r3, [pc, #112]	; (800d20c <xTimerCreateTimerTask+0x80>)
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d021      	beq.n	800d1e6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d1aa:	1d3a      	adds	r2, r7, #4
 800d1ac:	f107 0108 	add.w	r1, r7, #8
 800d1b0:	f107 030c 	add.w	r3, r7, #12
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	f7fe fa6b 	bl	800b690 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d1ba:	6879      	ldr	r1, [r7, #4]
 800d1bc:	68bb      	ldr	r3, [r7, #8]
 800d1be:	68fa      	ldr	r2, [r7, #12]
 800d1c0:	9202      	str	r2, [sp, #8]
 800d1c2:	9301      	str	r3, [sp, #4]
 800d1c4:	2302      	movs	r3, #2
 800d1c6:	9300      	str	r3, [sp, #0]
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	460a      	mov	r2, r1
 800d1cc:	4910      	ldr	r1, [pc, #64]	; (800d210 <xTimerCreateTimerTask+0x84>)
 800d1ce:	4811      	ldr	r0, [pc, #68]	; (800d214 <xTimerCreateTimerTask+0x88>)
 800d1d0:	f7ff f8a4 	bl	800c31c <xTaskCreateStatic>
 800d1d4:	4603      	mov	r3, r0
 800d1d6:	4a10      	ldr	r2, [pc, #64]	; (800d218 <xTimerCreateTimerTask+0x8c>)
 800d1d8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d1da:	4b0f      	ldr	r3, [pc, #60]	; (800d218 <xTimerCreateTimerTask+0x8c>)
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d001      	beq.n	800d1e6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d1e2:	2301      	movs	r3, #1
 800d1e4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d1e6:	697b      	ldr	r3, [r7, #20]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d10a      	bne.n	800d202 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d1ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1f0:	f383 8811 	msr	BASEPRI, r3
 800d1f4:	f3bf 8f6f 	isb	sy
 800d1f8:	f3bf 8f4f 	dsb	sy
 800d1fc:	613b      	str	r3, [r7, #16]
}
 800d1fe:	bf00      	nop
 800d200:	e7fe      	b.n	800d200 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d202:	697b      	ldr	r3, [r7, #20]
}
 800d204:	4618      	mov	r0, r3
 800d206:	3718      	adds	r7, #24
 800d208:	46bd      	mov	sp, r7
 800d20a:	bd80      	pop	{r7, pc}
 800d20c:	24001374 	.word	0x24001374
 800d210:	08010f2c 	.word	0x08010f2c
 800d214:	0800d351 	.word	0x0800d351
 800d218:	24001378 	.word	0x24001378

0800d21c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d21c:	b580      	push	{r7, lr}
 800d21e:	b08a      	sub	sp, #40	; 0x28
 800d220:	af00      	add	r7, sp, #0
 800d222:	60f8      	str	r0, [r7, #12]
 800d224:	60b9      	str	r1, [r7, #8]
 800d226:	607a      	str	r2, [r7, #4]
 800d228:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d22a:	2300      	movs	r3, #0
 800d22c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	2b00      	cmp	r3, #0
 800d232:	d10a      	bne.n	800d24a <xTimerGenericCommand+0x2e>
	__asm volatile
 800d234:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d238:	f383 8811 	msr	BASEPRI, r3
 800d23c:	f3bf 8f6f 	isb	sy
 800d240:	f3bf 8f4f 	dsb	sy
 800d244:	623b      	str	r3, [r7, #32]
}
 800d246:	bf00      	nop
 800d248:	e7fe      	b.n	800d248 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d24a:	4b1a      	ldr	r3, [pc, #104]	; (800d2b4 <xTimerGenericCommand+0x98>)
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d02a      	beq.n	800d2a8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d252:	68bb      	ldr	r3, [r7, #8]
 800d254:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d25e:	68bb      	ldr	r3, [r7, #8]
 800d260:	2b05      	cmp	r3, #5
 800d262:	dc18      	bgt.n	800d296 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d264:	f7ff feb2 	bl	800cfcc <xTaskGetSchedulerState>
 800d268:	4603      	mov	r3, r0
 800d26a:	2b02      	cmp	r3, #2
 800d26c:	d109      	bne.n	800d282 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d26e:	4b11      	ldr	r3, [pc, #68]	; (800d2b4 <xTimerGenericCommand+0x98>)
 800d270:	6818      	ldr	r0, [r3, #0]
 800d272:	f107 0110 	add.w	r1, r7, #16
 800d276:	2300      	movs	r3, #0
 800d278:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d27a:	f7fe fbdb 	bl	800ba34 <xQueueGenericSend>
 800d27e:	6278      	str	r0, [r7, #36]	; 0x24
 800d280:	e012      	b.n	800d2a8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d282:	4b0c      	ldr	r3, [pc, #48]	; (800d2b4 <xTimerGenericCommand+0x98>)
 800d284:	6818      	ldr	r0, [r3, #0]
 800d286:	f107 0110 	add.w	r1, r7, #16
 800d28a:	2300      	movs	r3, #0
 800d28c:	2200      	movs	r2, #0
 800d28e:	f7fe fbd1 	bl	800ba34 <xQueueGenericSend>
 800d292:	6278      	str	r0, [r7, #36]	; 0x24
 800d294:	e008      	b.n	800d2a8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d296:	4b07      	ldr	r3, [pc, #28]	; (800d2b4 <xTimerGenericCommand+0x98>)
 800d298:	6818      	ldr	r0, [r3, #0]
 800d29a:	f107 0110 	add.w	r1, r7, #16
 800d29e:	2300      	movs	r3, #0
 800d2a0:	683a      	ldr	r2, [r7, #0]
 800d2a2:	f7fe fcc5 	bl	800bc30 <xQueueGenericSendFromISR>
 800d2a6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d2a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	3728      	adds	r7, #40	; 0x28
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	bd80      	pop	{r7, pc}
 800d2b2:	bf00      	nop
 800d2b4:	24001374 	.word	0x24001374

0800d2b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d2b8:	b580      	push	{r7, lr}
 800d2ba:	b088      	sub	sp, #32
 800d2bc:	af02      	add	r7, sp, #8
 800d2be:	6078      	str	r0, [r7, #4]
 800d2c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d2c2:	4b22      	ldr	r3, [pc, #136]	; (800d34c <prvProcessExpiredTimer+0x94>)
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	68db      	ldr	r3, [r3, #12]
 800d2c8:	68db      	ldr	r3, [r3, #12]
 800d2ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d2cc:	697b      	ldr	r3, [r7, #20]
 800d2ce:	3304      	adds	r3, #4
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	f7fe fa81 	bl	800b7d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d2d6:	697b      	ldr	r3, [r7, #20]
 800d2d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d2dc:	f003 0304 	and.w	r3, r3, #4
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d022      	beq.n	800d32a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d2e4:	697b      	ldr	r3, [r7, #20]
 800d2e6:	699a      	ldr	r2, [r3, #24]
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	18d1      	adds	r1, r2, r3
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	683a      	ldr	r2, [r7, #0]
 800d2f0:	6978      	ldr	r0, [r7, #20]
 800d2f2:	f000 f8d1 	bl	800d498 <prvInsertTimerInActiveList>
 800d2f6:	4603      	mov	r3, r0
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d01f      	beq.n	800d33c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	9300      	str	r3, [sp, #0]
 800d300:	2300      	movs	r3, #0
 800d302:	687a      	ldr	r2, [r7, #4]
 800d304:	2100      	movs	r1, #0
 800d306:	6978      	ldr	r0, [r7, #20]
 800d308:	f7ff ff88 	bl	800d21c <xTimerGenericCommand>
 800d30c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d30e:	693b      	ldr	r3, [r7, #16]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d113      	bne.n	800d33c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800d314:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d318:	f383 8811 	msr	BASEPRI, r3
 800d31c:	f3bf 8f6f 	isb	sy
 800d320:	f3bf 8f4f 	dsb	sy
 800d324:	60fb      	str	r3, [r7, #12]
}
 800d326:	bf00      	nop
 800d328:	e7fe      	b.n	800d328 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d32a:	697b      	ldr	r3, [r7, #20]
 800d32c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d330:	f023 0301 	bic.w	r3, r3, #1
 800d334:	b2da      	uxtb	r2, r3
 800d336:	697b      	ldr	r3, [r7, #20]
 800d338:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d33c:	697b      	ldr	r3, [r7, #20]
 800d33e:	6a1b      	ldr	r3, [r3, #32]
 800d340:	6978      	ldr	r0, [r7, #20]
 800d342:	4798      	blx	r3
}
 800d344:	bf00      	nop
 800d346:	3718      	adds	r7, #24
 800d348:	46bd      	mov	sp, r7
 800d34a:	bd80      	pop	{r7, pc}
 800d34c:	2400136c 	.word	0x2400136c

0800d350 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d350:	b580      	push	{r7, lr}
 800d352:	b084      	sub	sp, #16
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d358:	f107 0308 	add.w	r3, r7, #8
 800d35c:	4618      	mov	r0, r3
 800d35e:	f000 f857 	bl	800d410 <prvGetNextExpireTime>
 800d362:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d364:	68bb      	ldr	r3, [r7, #8]
 800d366:	4619      	mov	r1, r3
 800d368:	68f8      	ldr	r0, [r7, #12]
 800d36a:	f000 f803 	bl	800d374 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d36e:	f000 f8d5 	bl	800d51c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d372:	e7f1      	b.n	800d358 <prvTimerTask+0x8>

0800d374 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d374:	b580      	push	{r7, lr}
 800d376:	b084      	sub	sp, #16
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
 800d37c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d37e:	f7ff fa29 	bl	800c7d4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d382:	f107 0308 	add.w	r3, r7, #8
 800d386:	4618      	mov	r0, r3
 800d388:	f000 f866 	bl	800d458 <prvSampleTimeNow>
 800d38c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d38e:	68bb      	ldr	r3, [r7, #8]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d130      	bne.n	800d3f6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d394:	683b      	ldr	r3, [r7, #0]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d10a      	bne.n	800d3b0 <prvProcessTimerOrBlockTask+0x3c>
 800d39a:	687a      	ldr	r2, [r7, #4]
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	429a      	cmp	r2, r3
 800d3a0:	d806      	bhi.n	800d3b0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d3a2:	f7ff fa25 	bl	800c7f0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d3a6:	68f9      	ldr	r1, [r7, #12]
 800d3a8:	6878      	ldr	r0, [r7, #4]
 800d3aa:	f7ff ff85 	bl	800d2b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d3ae:	e024      	b.n	800d3fa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d3b0:	683b      	ldr	r3, [r7, #0]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d008      	beq.n	800d3c8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d3b6:	4b13      	ldr	r3, [pc, #76]	; (800d404 <prvProcessTimerOrBlockTask+0x90>)
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d101      	bne.n	800d3c4 <prvProcessTimerOrBlockTask+0x50>
 800d3c0:	2301      	movs	r3, #1
 800d3c2:	e000      	b.n	800d3c6 <prvProcessTimerOrBlockTask+0x52>
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d3c8:	4b0f      	ldr	r3, [pc, #60]	; (800d408 <prvProcessTimerOrBlockTask+0x94>)
 800d3ca:	6818      	ldr	r0, [r3, #0]
 800d3cc:	687a      	ldr	r2, [r7, #4]
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	1ad3      	subs	r3, r2, r3
 800d3d2:	683a      	ldr	r2, [r7, #0]
 800d3d4:	4619      	mov	r1, r3
 800d3d6:	f7fe ff6d 	bl	800c2b4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d3da:	f7ff fa09 	bl	800c7f0 <xTaskResumeAll>
 800d3de:	4603      	mov	r3, r0
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d10a      	bne.n	800d3fa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d3e4:	4b09      	ldr	r3, [pc, #36]	; (800d40c <prvProcessTimerOrBlockTask+0x98>)
 800d3e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3ea:	601a      	str	r2, [r3, #0]
 800d3ec:	f3bf 8f4f 	dsb	sy
 800d3f0:	f3bf 8f6f 	isb	sy
}
 800d3f4:	e001      	b.n	800d3fa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d3f6:	f7ff f9fb 	bl	800c7f0 <xTaskResumeAll>
}
 800d3fa:	bf00      	nop
 800d3fc:	3710      	adds	r7, #16
 800d3fe:	46bd      	mov	sp, r7
 800d400:	bd80      	pop	{r7, pc}
 800d402:	bf00      	nop
 800d404:	24001370 	.word	0x24001370
 800d408:	24001374 	.word	0x24001374
 800d40c:	e000ed04 	.word	0xe000ed04

0800d410 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d410:	b480      	push	{r7}
 800d412:	b085      	sub	sp, #20
 800d414:	af00      	add	r7, sp, #0
 800d416:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d418:	4b0e      	ldr	r3, [pc, #56]	; (800d454 <prvGetNextExpireTime+0x44>)
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d101      	bne.n	800d426 <prvGetNextExpireTime+0x16>
 800d422:	2201      	movs	r2, #1
 800d424:	e000      	b.n	800d428 <prvGetNextExpireTime+0x18>
 800d426:	2200      	movs	r2, #0
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d105      	bne.n	800d440 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d434:	4b07      	ldr	r3, [pc, #28]	; (800d454 <prvGetNextExpireTime+0x44>)
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	68db      	ldr	r3, [r3, #12]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	60fb      	str	r3, [r7, #12]
 800d43e:	e001      	b.n	800d444 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d440:	2300      	movs	r3, #0
 800d442:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d444:	68fb      	ldr	r3, [r7, #12]
}
 800d446:	4618      	mov	r0, r3
 800d448:	3714      	adds	r7, #20
 800d44a:	46bd      	mov	sp, r7
 800d44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d450:	4770      	bx	lr
 800d452:	bf00      	nop
 800d454:	2400136c 	.word	0x2400136c

0800d458 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d458:	b580      	push	{r7, lr}
 800d45a:	b084      	sub	sp, #16
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d460:	f7ff fa64 	bl	800c92c <xTaskGetTickCount>
 800d464:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d466:	4b0b      	ldr	r3, [pc, #44]	; (800d494 <prvSampleTimeNow+0x3c>)
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	68fa      	ldr	r2, [r7, #12]
 800d46c:	429a      	cmp	r2, r3
 800d46e:	d205      	bcs.n	800d47c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d470:	f000 f936 	bl	800d6e0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	2201      	movs	r2, #1
 800d478:	601a      	str	r2, [r3, #0]
 800d47a:	e002      	b.n	800d482 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	2200      	movs	r2, #0
 800d480:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d482:	4a04      	ldr	r2, [pc, #16]	; (800d494 <prvSampleTimeNow+0x3c>)
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d488:	68fb      	ldr	r3, [r7, #12]
}
 800d48a:	4618      	mov	r0, r3
 800d48c:	3710      	adds	r7, #16
 800d48e:	46bd      	mov	sp, r7
 800d490:	bd80      	pop	{r7, pc}
 800d492:	bf00      	nop
 800d494:	2400137c 	.word	0x2400137c

0800d498 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d498:	b580      	push	{r7, lr}
 800d49a:	b086      	sub	sp, #24
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	60f8      	str	r0, [r7, #12]
 800d4a0:	60b9      	str	r1, [r7, #8]
 800d4a2:	607a      	str	r2, [r7, #4]
 800d4a4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	68ba      	ldr	r2, [r7, #8]
 800d4ae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	68fa      	ldr	r2, [r7, #12]
 800d4b4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d4b6:	68ba      	ldr	r2, [r7, #8]
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	429a      	cmp	r2, r3
 800d4bc:	d812      	bhi.n	800d4e4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d4be:	687a      	ldr	r2, [r7, #4]
 800d4c0:	683b      	ldr	r3, [r7, #0]
 800d4c2:	1ad2      	subs	r2, r2, r3
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	699b      	ldr	r3, [r3, #24]
 800d4c8:	429a      	cmp	r2, r3
 800d4ca:	d302      	bcc.n	800d4d2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d4cc:	2301      	movs	r3, #1
 800d4ce:	617b      	str	r3, [r7, #20]
 800d4d0:	e01b      	b.n	800d50a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d4d2:	4b10      	ldr	r3, [pc, #64]	; (800d514 <prvInsertTimerInActiveList+0x7c>)
 800d4d4:	681a      	ldr	r2, [r3, #0]
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	3304      	adds	r3, #4
 800d4da:	4619      	mov	r1, r3
 800d4dc:	4610      	mov	r0, r2
 800d4de:	f7fe f942 	bl	800b766 <vListInsert>
 800d4e2:	e012      	b.n	800d50a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d4e4:	687a      	ldr	r2, [r7, #4]
 800d4e6:	683b      	ldr	r3, [r7, #0]
 800d4e8:	429a      	cmp	r2, r3
 800d4ea:	d206      	bcs.n	800d4fa <prvInsertTimerInActiveList+0x62>
 800d4ec:	68ba      	ldr	r2, [r7, #8]
 800d4ee:	683b      	ldr	r3, [r7, #0]
 800d4f0:	429a      	cmp	r2, r3
 800d4f2:	d302      	bcc.n	800d4fa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d4f4:	2301      	movs	r3, #1
 800d4f6:	617b      	str	r3, [r7, #20]
 800d4f8:	e007      	b.n	800d50a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d4fa:	4b07      	ldr	r3, [pc, #28]	; (800d518 <prvInsertTimerInActiveList+0x80>)
 800d4fc:	681a      	ldr	r2, [r3, #0]
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	3304      	adds	r3, #4
 800d502:	4619      	mov	r1, r3
 800d504:	4610      	mov	r0, r2
 800d506:	f7fe f92e 	bl	800b766 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d50a:	697b      	ldr	r3, [r7, #20]
}
 800d50c:	4618      	mov	r0, r3
 800d50e:	3718      	adds	r7, #24
 800d510:	46bd      	mov	sp, r7
 800d512:	bd80      	pop	{r7, pc}
 800d514:	24001370 	.word	0x24001370
 800d518:	2400136c 	.word	0x2400136c

0800d51c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b08e      	sub	sp, #56	; 0x38
 800d520:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d522:	e0ca      	b.n	800d6ba <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	2b00      	cmp	r3, #0
 800d528:	da18      	bge.n	800d55c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d52a:	1d3b      	adds	r3, r7, #4
 800d52c:	3304      	adds	r3, #4
 800d52e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d532:	2b00      	cmp	r3, #0
 800d534:	d10a      	bne.n	800d54c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800d536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d53a:	f383 8811 	msr	BASEPRI, r3
 800d53e:	f3bf 8f6f 	isb	sy
 800d542:	f3bf 8f4f 	dsb	sy
 800d546:	61fb      	str	r3, [r7, #28]
}
 800d548:	bf00      	nop
 800d54a:	e7fe      	b.n	800d54a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d54c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d552:	6850      	ldr	r0, [r2, #4]
 800d554:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d556:	6892      	ldr	r2, [r2, #8]
 800d558:	4611      	mov	r1, r2
 800d55a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	f2c0 80ab 	blt.w	800d6ba <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d56a:	695b      	ldr	r3, [r3, #20]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d004      	beq.n	800d57a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d572:	3304      	adds	r3, #4
 800d574:	4618      	mov	r0, r3
 800d576:	f7fe f92f 	bl	800b7d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d57a:	463b      	mov	r3, r7
 800d57c:	4618      	mov	r0, r3
 800d57e:	f7ff ff6b 	bl	800d458 <prvSampleTimeNow>
 800d582:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	2b09      	cmp	r3, #9
 800d588:	f200 8096 	bhi.w	800d6b8 <prvProcessReceivedCommands+0x19c>
 800d58c:	a201      	add	r2, pc, #4	; (adr r2, 800d594 <prvProcessReceivedCommands+0x78>)
 800d58e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d592:	bf00      	nop
 800d594:	0800d5bd 	.word	0x0800d5bd
 800d598:	0800d5bd 	.word	0x0800d5bd
 800d59c:	0800d5bd 	.word	0x0800d5bd
 800d5a0:	0800d631 	.word	0x0800d631
 800d5a4:	0800d645 	.word	0x0800d645
 800d5a8:	0800d68f 	.word	0x0800d68f
 800d5ac:	0800d5bd 	.word	0x0800d5bd
 800d5b0:	0800d5bd 	.word	0x0800d5bd
 800d5b4:	0800d631 	.word	0x0800d631
 800d5b8:	0800d645 	.word	0x0800d645
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d5bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d5c2:	f043 0301 	orr.w	r3, r3, #1
 800d5c6:	b2da      	uxtb	r2, r3
 800d5c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d5ce:	68ba      	ldr	r2, [r7, #8]
 800d5d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5d2:	699b      	ldr	r3, [r3, #24]
 800d5d4:	18d1      	adds	r1, r2, r3
 800d5d6:	68bb      	ldr	r3, [r7, #8]
 800d5d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d5da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d5dc:	f7ff ff5c 	bl	800d498 <prvInsertTimerInActiveList>
 800d5e0:	4603      	mov	r3, r0
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d069      	beq.n	800d6ba <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d5e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5e8:	6a1b      	ldr	r3, [r3, #32]
 800d5ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d5ec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d5ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d5f4:	f003 0304 	and.w	r3, r3, #4
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d05e      	beq.n	800d6ba <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d5fc:	68ba      	ldr	r2, [r7, #8]
 800d5fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d600:	699b      	ldr	r3, [r3, #24]
 800d602:	441a      	add	r2, r3
 800d604:	2300      	movs	r3, #0
 800d606:	9300      	str	r3, [sp, #0]
 800d608:	2300      	movs	r3, #0
 800d60a:	2100      	movs	r1, #0
 800d60c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d60e:	f7ff fe05 	bl	800d21c <xTimerGenericCommand>
 800d612:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d614:	6a3b      	ldr	r3, [r7, #32]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d14f      	bne.n	800d6ba <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800d61a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d61e:	f383 8811 	msr	BASEPRI, r3
 800d622:	f3bf 8f6f 	isb	sy
 800d626:	f3bf 8f4f 	dsb	sy
 800d62a:	61bb      	str	r3, [r7, #24]
}
 800d62c:	bf00      	nop
 800d62e:	e7fe      	b.n	800d62e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d632:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d636:	f023 0301 	bic.w	r3, r3, #1
 800d63a:	b2da      	uxtb	r2, r3
 800d63c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d63e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d642:	e03a      	b.n	800d6ba <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d646:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d64a:	f043 0301 	orr.w	r3, r3, #1
 800d64e:	b2da      	uxtb	r2, r3
 800d650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d652:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d656:	68ba      	ldr	r2, [r7, #8]
 800d658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d65a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d65c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d65e:	699b      	ldr	r3, [r3, #24]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d10a      	bne.n	800d67a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800d664:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d668:	f383 8811 	msr	BASEPRI, r3
 800d66c:	f3bf 8f6f 	isb	sy
 800d670:	f3bf 8f4f 	dsb	sy
 800d674:	617b      	str	r3, [r7, #20]
}
 800d676:	bf00      	nop
 800d678:	e7fe      	b.n	800d678 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d67a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d67c:	699a      	ldr	r2, [r3, #24]
 800d67e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d680:	18d1      	adds	r1, r2, r3
 800d682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d686:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d688:	f7ff ff06 	bl	800d498 <prvInsertTimerInActiveList>
					break;
 800d68c:	e015      	b.n	800d6ba <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d68e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d690:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d694:	f003 0302 	and.w	r3, r3, #2
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d103      	bne.n	800d6a4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800d69c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d69e:	f000 fb25 	bl	800dcec <vPortFree>
 800d6a2:	e00a      	b.n	800d6ba <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d6a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d6aa:	f023 0301 	bic.w	r3, r3, #1
 800d6ae:	b2da      	uxtb	r2, r3
 800d6b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d6b6:	e000      	b.n	800d6ba <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800d6b8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d6ba:	4b08      	ldr	r3, [pc, #32]	; (800d6dc <prvProcessReceivedCommands+0x1c0>)
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	1d39      	adds	r1, r7, #4
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	f7fe fbdc 	bl	800be80 <xQueueReceive>
 800d6c8:	4603      	mov	r3, r0
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	f47f af2a 	bne.w	800d524 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800d6d0:	bf00      	nop
 800d6d2:	bf00      	nop
 800d6d4:	3730      	adds	r7, #48	; 0x30
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	bd80      	pop	{r7, pc}
 800d6da:	bf00      	nop
 800d6dc:	24001374 	.word	0x24001374

0800d6e0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b088      	sub	sp, #32
 800d6e4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d6e6:	e048      	b.n	800d77a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d6e8:	4b2d      	ldr	r3, [pc, #180]	; (800d7a0 <prvSwitchTimerLists+0xc0>)
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	68db      	ldr	r3, [r3, #12]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d6f2:	4b2b      	ldr	r3, [pc, #172]	; (800d7a0 <prvSwitchTimerLists+0xc0>)
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	68db      	ldr	r3, [r3, #12]
 800d6f8:	68db      	ldr	r3, [r3, #12]
 800d6fa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	3304      	adds	r3, #4
 800d700:	4618      	mov	r0, r3
 800d702:	f7fe f869 	bl	800b7d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	6a1b      	ldr	r3, [r3, #32]
 800d70a:	68f8      	ldr	r0, [r7, #12]
 800d70c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d714:	f003 0304 	and.w	r3, r3, #4
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d02e      	beq.n	800d77a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	699b      	ldr	r3, [r3, #24]
 800d720:	693a      	ldr	r2, [r7, #16]
 800d722:	4413      	add	r3, r2
 800d724:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d726:	68ba      	ldr	r2, [r7, #8]
 800d728:	693b      	ldr	r3, [r7, #16]
 800d72a:	429a      	cmp	r2, r3
 800d72c:	d90e      	bls.n	800d74c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	68ba      	ldr	r2, [r7, #8]
 800d732:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	68fa      	ldr	r2, [r7, #12]
 800d738:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d73a:	4b19      	ldr	r3, [pc, #100]	; (800d7a0 <prvSwitchTimerLists+0xc0>)
 800d73c:	681a      	ldr	r2, [r3, #0]
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	3304      	adds	r3, #4
 800d742:	4619      	mov	r1, r3
 800d744:	4610      	mov	r0, r2
 800d746:	f7fe f80e 	bl	800b766 <vListInsert>
 800d74a:	e016      	b.n	800d77a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d74c:	2300      	movs	r3, #0
 800d74e:	9300      	str	r3, [sp, #0]
 800d750:	2300      	movs	r3, #0
 800d752:	693a      	ldr	r2, [r7, #16]
 800d754:	2100      	movs	r1, #0
 800d756:	68f8      	ldr	r0, [r7, #12]
 800d758:	f7ff fd60 	bl	800d21c <xTimerGenericCommand>
 800d75c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d10a      	bne.n	800d77a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800d764:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d768:	f383 8811 	msr	BASEPRI, r3
 800d76c:	f3bf 8f6f 	isb	sy
 800d770:	f3bf 8f4f 	dsb	sy
 800d774:	603b      	str	r3, [r7, #0]
}
 800d776:	bf00      	nop
 800d778:	e7fe      	b.n	800d778 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d77a:	4b09      	ldr	r3, [pc, #36]	; (800d7a0 <prvSwitchTimerLists+0xc0>)
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	2b00      	cmp	r3, #0
 800d782:	d1b1      	bne.n	800d6e8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d784:	4b06      	ldr	r3, [pc, #24]	; (800d7a0 <prvSwitchTimerLists+0xc0>)
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d78a:	4b06      	ldr	r3, [pc, #24]	; (800d7a4 <prvSwitchTimerLists+0xc4>)
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	4a04      	ldr	r2, [pc, #16]	; (800d7a0 <prvSwitchTimerLists+0xc0>)
 800d790:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d792:	4a04      	ldr	r2, [pc, #16]	; (800d7a4 <prvSwitchTimerLists+0xc4>)
 800d794:	697b      	ldr	r3, [r7, #20]
 800d796:	6013      	str	r3, [r2, #0]
}
 800d798:	bf00      	nop
 800d79a:	3718      	adds	r7, #24
 800d79c:	46bd      	mov	sp, r7
 800d79e:	bd80      	pop	{r7, pc}
 800d7a0:	2400136c 	.word	0x2400136c
 800d7a4:	24001370 	.word	0x24001370

0800d7a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d7a8:	b580      	push	{r7, lr}
 800d7aa:	b082      	sub	sp, #8
 800d7ac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d7ae:	f000 f969 	bl	800da84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d7b2:	4b15      	ldr	r3, [pc, #84]	; (800d808 <prvCheckForValidListAndQueue+0x60>)
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d120      	bne.n	800d7fc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d7ba:	4814      	ldr	r0, [pc, #80]	; (800d80c <prvCheckForValidListAndQueue+0x64>)
 800d7bc:	f7fd ff82 	bl	800b6c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d7c0:	4813      	ldr	r0, [pc, #76]	; (800d810 <prvCheckForValidListAndQueue+0x68>)
 800d7c2:	f7fd ff7f 	bl	800b6c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d7c6:	4b13      	ldr	r3, [pc, #76]	; (800d814 <prvCheckForValidListAndQueue+0x6c>)
 800d7c8:	4a10      	ldr	r2, [pc, #64]	; (800d80c <prvCheckForValidListAndQueue+0x64>)
 800d7ca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d7cc:	4b12      	ldr	r3, [pc, #72]	; (800d818 <prvCheckForValidListAndQueue+0x70>)
 800d7ce:	4a10      	ldr	r2, [pc, #64]	; (800d810 <prvCheckForValidListAndQueue+0x68>)
 800d7d0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	9300      	str	r3, [sp, #0]
 800d7d6:	4b11      	ldr	r3, [pc, #68]	; (800d81c <prvCheckForValidListAndQueue+0x74>)
 800d7d8:	4a11      	ldr	r2, [pc, #68]	; (800d820 <prvCheckForValidListAndQueue+0x78>)
 800d7da:	2110      	movs	r1, #16
 800d7dc:	200a      	movs	r0, #10
 800d7de:	f7fe f88d 	bl	800b8fc <xQueueGenericCreateStatic>
 800d7e2:	4603      	mov	r3, r0
 800d7e4:	4a08      	ldr	r2, [pc, #32]	; (800d808 <prvCheckForValidListAndQueue+0x60>)
 800d7e6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d7e8:	4b07      	ldr	r3, [pc, #28]	; (800d808 <prvCheckForValidListAndQueue+0x60>)
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d005      	beq.n	800d7fc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d7f0:	4b05      	ldr	r3, [pc, #20]	; (800d808 <prvCheckForValidListAndQueue+0x60>)
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	490b      	ldr	r1, [pc, #44]	; (800d824 <prvCheckForValidListAndQueue+0x7c>)
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	f7fe fd32 	bl	800c260 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d7fc:	f000 f972 	bl	800dae4 <vPortExitCritical>
}
 800d800:	bf00      	nop
 800d802:	46bd      	mov	sp, r7
 800d804:	bd80      	pop	{r7, pc}
 800d806:	bf00      	nop
 800d808:	24001374 	.word	0x24001374
 800d80c:	24001344 	.word	0x24001344
 800d810:	24001358 	.word	0x24001358
 800d814:	2400136c 	.word	0x2400136c
 800d818:	24001370 	.word	0x24001370
 800d81c:	24001420 	.word	0x24001420
 800d820:	24001380 	.word	0x24001380
 800d824:	08010f34 	.word	0x08010f34

0800d828 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d828:	b480      	push	{r7}
 800d82a:	b085      	sub	sp, #20
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	60f8      	str	r0, [r7, #12]
 800d830:	60b9      	str	r1, [r7, #8]
 800d832:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	3b04      	subs	r3, #4
 800d838:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d840:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	3b04      	subs	r3, #4
 800d846:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d848:	68bb      	ldr	r3, [r7, #8]
 800d84a:	f023 0201 	bic.w	r2, r3, #1
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	3b04      	subs	r3, #4
 800d856:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d858:	4a0c      	ldr	r2, [pc, #48]	; (800d88c <pxPortInitialiseStack+0x64>)
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	3b14      	subs	r3, #20
 800d862:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d864:	687a      	ldr	r2, [r7, #4]
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	3b04      	subs	r3, #4
 800d86e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	f06f 0202 	mvn.w	r2, #2
 800d876:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	3b20      	subs	r3, #32
 800d87c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d87e:	68fb      	ldr	r3, [r7, #12]
}
 800d880:	4618      	mov	r0, r3
 800d882:	3714      	adds	r7, #20
 800d884:	46bd      	mov	sp, r7
 800d886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88a:	4770      	bx	lr
 800d88c:	0800d891 	.word	0x0800d891

0800d890 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d890:	b480      	push	{r7}
 800d892:	b085      	sub	sp, #20
 800d894:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d896:	2300      	movs	r3, #0
 800d898:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d89a:	4b12      	ldr	r3, [pc, #72]	; (800d8e4 <prvTaskExitError+0x54>)
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8a2:	d00a      	beq.n	800d8ba <prvTaskExitError+0x2a>
	__asm volatile
 800d8a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8a8:	f383 8811 	msr	BASEPRI, r3
 800d8ac:	f3bf 8f6f 	isb	sy
 800d8b0:	f3bf 8f4f 	dsb	sy
 800d8b4:	60fb      	str	r3, [r7, #12]
}
 800d8b6:	bf00      	nop
 800d8b8:	e7fe      	b.n	800d8b8 <prvTaskExitError+0x28>
	__asm volatile
 800d8ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8be:	f383 8811 	msr	BASEPRI, r3
 800d8c2:	f3bf 8f6f 	isb	sy
 800d8c6:	f3bf 8f4f 	dsb	sy
 800d8ca:	60bb      	str	r3, [r7, #8]
}
 800d8cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d8ce:	bf00      	nop
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d0fc      	beq.n	800d8d0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d8d6:	bf00      	nop
 800d8d8:	bf00      	nop
 800d8da:	3714      	adds	r7, #20
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e2:	4770      	bx	lr
 800d8e4:	24000010 	.word	0x24000010
	...

0800d8f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d8f0:	4b07      	ldr	r3, [pc, #28]	; (800d910 <pxCurrentTCBConst2>)
 800d8f2:	6819      	ldr	r1, [r3, #0]
 800d8f4:	6808      	ldr	r0, [r1, #0]
 800d8f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8fa:	f380 8809 	msr	PSP, r0
 800d8fe:	f3bf 8f6f 	isb	sy
 800d902:	f04f 0000 	mov.w	r0, #0
 800d906:	f380 8811 	msr	BASEPRI, r0
 800d90a:	4770      	bx	lr
 800d90c:	f3af 8000 	nop.w

0800d910 <pxCurrentTCBConst2>:
 800d910:	24000e44 	.word	0x24000e44
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d914:	bf00      	nop
 800d916:	bf00      	nop

0800d918 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d918:	4808      	ldr	r0, [pc, #32]	; (800d93c <prvPortStartFirstTask+0x24>)
 800d91a:	6800      	ldr	r0, [r0, #0]
 800d91c:	6800      	ldr	r0, [r0, #0]
 800d91e:	f380 8808 	msr	MSP, r0
 800d922:	f04f 0000 	mov.w	r0, #0
 800d926:	f380 8814 	msr	CONTROL, r0
 800d92a:	b662      	cpsie	i
 800d92c:	b661      	cpsie	f
 800d92e:	f3bf 8f4f 	dsb	sy
 800d932:	f3bf 8f6f 	isb	sy
 800d936:	df00      	svc	0
 800d938:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d93a:	bf00      	nop
 800d93c:	e000ed08 	.word	0xe000ed08

0800d940 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d940:	b580      	push	{r7, lr}
 800d942:	b086      	sub	sp, #24
 800d944:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d946:	4b46      	ldr	r3, [pc, #280]	; (800da60 <xPortStartScheduler+0x120>)
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	4a46      	ldr	r2, [pc, #280]	; (800da64 <xPortStartScheduler+0x124>)
 800d94c:	4293      	cmp	r3, r2
 800d94e:	d10a      	bne.n	800d966 <xPortStartScheduler+0x26>
	__asm volatile
 800d950:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d954:	f383 8811 	msr	BASEPRI, r3
 800d958:	f3bf 8f6f 	isb	sy
 800d95c:	f3bf 8f4f 	dsb	sy
 800d960:	613b      	str	r3, [r7, #16]
}
 800d962:	bf00      	nop
 800d964:	e7fe      	b.n	800d964 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d966:	4b3e      	ldr	r3, [pc, #248]	; (800da60 <xPortStartScheduler+0x120>)
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	4a3f      	ldr	r2, [pc, #252]	; (800da68 <xPortStartScheduler+0x128>)
 800d96c:	4293      	cmp	r3, r2
 800d96e:	d10a      	bne.n	800d986 <xPortStartScheduler+0x46>
	__asm volatile
 800d970:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d974:	f383 8811 	msr	BASEPRI, r3
 800d978:	f3bf 8f6f 	isb	sy
 800d97c:	f3bf 8f4f 	dsb	sy
 800d980:	60fb      	str	r3, [r7, #12]
}
 800d982:	bf00      	nop
 800d984:	e7fe      	b.n	800d984 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d986:	4b39      	ldr	r3, [pc, #228]	; (800da6c <xPortStartScheduler+0x12c>)
 800d988:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d98a:	697b      	ldr	r3, [r7, #20]
 800d98c:	781b      	ldrb	r3, [r3, #0]
 800d98e:	b2db      	uxtb	r3, r3
 800d990:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d992:	697b      	ldr	r3, [r7, #20]
 800d994:	22ff      	movs	r2, #255	; 0xff
 800d996:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d998:	697b      	ldr	r3, [r7, #20]
 800d99a:	781b      	ldrb	r3, [r3, #0]
 800d99c:	b2db      	uxtb	r3, r3
 800d99e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d9a0:	78fb      	ldrb	r3, [r7, #3]
 800d9a2:	b2db      	uxtb	r3, r3
 800d9a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d9a8:	b2da      	uxtb	r2, r3
 800d9aa:	4b31      	ldr	r3, [pc, #196]	; (800da70 <xPortStartScheduler+0x130>)
 800d9ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d9ae:	4b31      	ldr	r3, [pc, #196]	; (800da74 <xPortStartScheduler+0x134>)
 800d9b0:	2207      	movs	r2, #7
 800d9b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d9b4:	e009      	b.n	800d9ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d9b6:	4b2f      	ldr	r3, [pc, #188]	; (800da74 <xPortStartScheduler+0x134>)
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	3b01      	subs	r3, #1
 800d9bc:	4a2d      	ldr	r2, [pc, #180]	; (800da74 <xPortStartScheduler+0x134>)
 800d9be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d9c0:	78fb      	ldrb	r3, [r7, #3]
 800d9c2:	b2db      	uxtb	r3, r3
 800d9c4:	005b      	lsls	r3, r3, #1
 800d9c6:	b2db      	uxtb	r3, r3
 800d9c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d9ca:	78fb      	ldrb	r3, [r7, #3]
 800d9cc:	b2db      	uxtb	r3, r3
 800d9ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d9d2:	2b80      	cmp	r3, #128	; 0x80
 800d9d4:	d0ef      	beq.n	800d9b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d9d6:	4b27      	ldr	r3, [pc, #156]	; (800da74 <xPortStartScheduler+0x134>)
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	f1c3 0307 	rsb	r3, r3, #7
 800d9de:	2b04      	cmp	r3, #4
 800d9e0:	d00a      	beq.n	800d9f8 <xPortStartScheduler+0xb8>
	__asm volatile
 800d9e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9e6:	f383 8811 	msr	BASEPRI, r3
 800d9ea:	f3bf 8f6f 	isb	sy
 800d9ee:	f3bf 8f4f 	dsb	sy
 800d9f2:	60bb      	str	r3, [r7, #8]
}
 800d9f4:	bf00      	nop
 800d9f6:	e7fe      	b.n	800d9f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d9f8:	4b1e      	ldr	r3, [pc, #120]	; (800da74 <xPortStartScheduler+0x134>)
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	021b      	lsls	r3, r3, #8
 800d9fe:	4a1d      	ldr	r2, [pc, #116]	; (800da74 <xPortStartScheduler+0x134>)
 800da00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800da02:	4b1c      	ldr	r3, [pc, #112]	; (800da74 <xPortStartScheduler+0x134>)
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800da0a:	4a1a      	ldr	r2, [pc, #104]	; (800da74 <xPortStartScheduler+0x134>)
 800da0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	b2da      	uxtb	r2, r3
 800da12:	697b      	ldr	r3, [r7, #20]
 800da14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800da16:	4b18      	ldr	r3, [pc, #96]	; (800da78 <xPortStartScheduler+0x138>)
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	4a17      	ldr	r2, [pc, #92]	; (800da78 <xPortStartScheduler+0x138>)
 800da1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800da20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800da22:	4b15      	ldr	r3, [pc, #84]	; (800da78 <xPortStartScheduler+0x138>)
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	4a14      	ldr	r2, [pc, #80]	; (800da78 <xPortStartScheduler+0x138>)
 800da28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800da2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800da2e:	f000 f8dd 	bl	800dbec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800da32:	4b12      	ldr	r3, [pc, #72]	; (800da7c <xPortStartScheduler+0x13c>)
 800da34:	2200      	movs	r2, #0
 800da36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800da38:	f000 f8fc 	bl	800dc34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800da3c:	4b10      	ldr	r3, [pc, #64]	; (800da80 <xPortStartScheduler+0x140>)
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	4a0f      	ldr	r2, [pc, #60]	; (800da80 <xPortStartScheduler+0x140>)
 800da42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800da46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800da48:	f7ff ff66 	bl	800d918 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800da4c:	f7ff f838 	bl	800cac0 <vTaskSwitchContext>
	prvTaskExitError();
 800da50:	f7ff ff1e 	bl	800d890 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800da54:	2300      	movs	r3, #0
}
 800da56:	4618      	mov	r0, r3
 800da58:	3718      	adds	r7, #24
 800da5a:	46bd      	mov	sp, r7
 800da5c:	bd80      	pop	{r7, pc}
 800da5e:	bf00      	nop
 800da60:	e000ed00 	.word	0xe000ed00
 800da64:	410fc271 	.word	0x410fc271
 800da68:	410fc270 	.word	0x410fc270
 800da6c:	e000e400 	.word	0xe000e400
 800da70:	24001470 	.word	0x24001470
 800da74:	24001474 	.word	0x24001474
 800da78:	e000ed20 	.word	0xe000ed20
 800da7c:	24000010 	.word	0x24000010
 800da80:	e000ef34 	.word	0xe000ef34

0800da84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800da84:	b480      	push	{r7}
 800da86:	b083      	sub	sp, #12
 800da88:	af00      	add	r7, sp, #0
	__asm volatile
 800da8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da8e:	f383 8811 	msr	BASEPRI, r3
 800da92:	f3bf 8f6f 	isb	sy
 800da96:	f3bf 8f4f 	dsb	sy
 800da9a:	607b      	str	r3, [r7, #4]
}
 800da9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800da9e:	4b0f      	ldr	r3, [pc, #60]	; (800dadc <vPortEnterCritical+0x58>)
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	3301      	adds	r3, #1
 800daa4:	4a0d      	ldr	r2, [pc, #52]	; (800dadc <vPortEnterCritical+0x58>)
 800daa6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800daa8:	4b0c      	ldr	r3, [pc, #48]	; (800dadc <vPortEnterCritical+0x58>)
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	2b01      	cmp	r3, #1
 800daae:	d10f      	bne.n	800dad0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800dab0:	4b0b      	ldr	r3, [pc, #44]	; (800dae0 <vPortEnterCritical+0x5c>)
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	b2db      	uxtb	r3, r3
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d00a      	beq.n	800dad0 <vPortEnterCritical+0x4c>
	__asm volatile
 800daba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dabe:	f383 8811 	msr	BASEPRI, r3
 800dac2:	f3bf 8f6f 	isb	sy
 800dac6:	f3bf 8f4f 	dsb	sy
 800daca:	603b      	str	r3, [r7, #0]
}
 800dacc:	bf00      	nop
 800dace:	e7fe      	b.n	800dace <vPortEnterCritical+0x4a>
	}
}
 800dad0:	bf00      	nop
 800dad2:	370c      	adds	r7, #12
 800dad4:	46bd      	mov	sp, r7
 800dad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dada:	4770      	bx	lr
 800dadc:	24000010 	.word	0x24000010
 800dae0:	e000ed04 	.word	0xe000ed04

0800dae4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800dae4:	b480      	push	{r7}
 800dae6:	b083      	sub	sp, #12
 800dae8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800daea:	4b12      	ldr	r3, [pc, #72]	; (800db34 <vPortExitCritical+0x50>)
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d10a      	bne.n	800db08 <vPortExitCritical+0x24>
	__asm volatile
 800daf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daf6:	f383 8811 	msr	BASEPRI, r3
 800dafa:	f3bf 8f6f 	isb	sy
 800dafe:	f3bf 8f4f 	dsb	sy
 800db02:	607b      	str	r3, [r7, #4]
}
 800db04:	bf00      	nop
 800db06:	e7fe      	b.n	800db06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800db08:	4b0a      	ldr	r3, [pc, #40]	; (800db34 <vPortExitCritical+0x50>)
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	3b01      	subs	r3, #1
 800db0e:	4a09      	ldr	r2, [pc, #36]	; (800db34 <vPortExitCritical+0x50>)
 800db10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800db12:	4b08      	ldr	r3, [pc, #32]	; (800db34 <vPortExitCritical+0x50>)
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	2b00      	cmp	r3, #0
 800db18:	d105      	bne.n	800db26 <vPortExitCritical+0x42>
 800db1a:	2300      	movs	r3, #0
 800db1c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800db1e:	683b      	ldr	r3, [r7, #0]
 800db20:	f383 8811 	msr	BASEPRI, r3
}
 800db24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800db26:	bf00      	nop
 800db28:	370c      	adds	r7, #12
 800db2a:	46bd      	mov	sp, r7
 800db2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db30:	4770      	bx	lr
 800db32:	bf00      	nop
 800db34:	24000010 	.word	0x24000010
	...

0800db40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800db40:	f3ef 8009 	mrs	r0, PSP
 800db44:	f3bf 8f6f 	isb	sy
 800db48:	4b15      	ldr	r3, [pc, #84]	; (800dba0 <pxCurrentTCBConst>)
 800db4a:	681a      	ldr	r2, [r3, #0]
 800db4c:	f01e 0f10 	tst.w	lr, #16
 800db50:	bf08      	it	eq
 800db52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800db56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db5a:	6010      	str	r0, [r2, #0]
 800db5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800db60:	f04f 0050 	mov.w	r0, #80	; 0x50
 800db64:	f380 8811 	msr	BASEPRI, r0
 800db68:	f3bf 8f4f 	dsb	sy
 800db6c:	f3bf 8f6f 	isb	sy
 800db70:	f7fe ffa6 	bl	800cac0 <vTaskSwitchContext>
 800db74:	f04f 0000 	mov.w	r0, #0
 800db78:	f380 8811 	msr	BASEPRI, r0
 800db7c:	bc09      	pop	{r0, r3}
 800db7e:	6819      	ldr	r1, [r3, #0]
 800db80:	6808      	ldr	r0, [r1, #0]
 800db82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db86:	f01e 0f10 	tst.w	lr, #16
 800db8a:	bf08      	it	eq
 800db8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800db90:	f380 8809 	msr	PSP, r0
 800db94:	f3bf 8f6f 	isb	sy
 800db98:	4770      	bx	lr
 800db9a:	bf00      	nop
 800db9c:	f3af 8000 	nop.w

0800dba0 <pxCurrentTCBConst>:
 800dba0:	24000e44 	.word	0x24000e44
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800dba4:	bf00      	nop
 800dba6:	bf00      	nop

0800dba8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b082      	sub	sp, #8
 800dbac:	af00      	add	r7, sp, #0
	__asm volatile
 800dbae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbb2:	f383 8811 	msr	BASEPRI, r3
 800dbb6:	f3bf 8f6f 	isb	sy
 800dbba:	f3bf 8f4f 	dsb	sy
 800dbbe:	607b      	str	r3, [r7, #4]
}
 800dbc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800dbc2:	f7fe fec3 	bl	800c94c <xTaskIncrementTick>
 800dbc6:	4603      	mov	r3, r0
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d003      	beq.n	800dbd4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800dbcc:	4b06      	ldr	r3, [pc, #24]	; (800dbe8 <xPortSysTickHandler+0x40>)
 800dbce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dbd2:	601a      	str	r2, [r3, #0]
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dbd8:	683b      	ldr	r3, [r7, #0]
 800dbda:	f383 8811 	msr	BASEPRI, r3
}
 800dbde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800dbe0:	bf00      	nop
 800dbe2:	3708      	adds	r7, #8
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	bd80      	pop	{r7, pc}
 800dbe8:	e000ed04 	.word	0xe000ed04

0800dbec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800dbec:	b480      	push	{r7}
 800dbee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800dbf0:	4b0b      	ldr	r3, [pc, #44]	; (800dc20 <vPortSetupTimerInterrupt+0x34>)
 800dbf2:	2200      	movs	r2, #0
 800dbf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800dbf6:	4b0b      	ldr	r3, [pc, #44]	; (800dc24 <vPortSetupTimerInterrupt+0x38>)
 800dbf8:	2200      	movs	r2, #0
 800dbfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800dbfc:	4b0a      	ldr	r3, [pc, #40]	; (800dc28 <vPortSetupTimerInterrupt+0x3c>)
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	4a0a      	ldr	r2, [pc, #40]	; (800dc2c <vPortSetupTimerInterrupt+0x40>)
 800dc02:	fba2 2303 	umull	r2, r3, r2, r3
 800dc06:	099b      	lsrs	r3, r3, #6
 800dc08:	4a09      	ldr	r2, [pc, #36]	; (800dc30 <vPortSetupTimerInterrupt+0x44>)
 800dc0a:	3b01      	subs	r3, #1
 800dc0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800dc0e:	4b04      	ldr	r3, [pc, #16]	; (800dc20 <vPortSetupTimerInterrupt+0x34>)
 800dc10:	2207      	movs	r2, #7
 800dc12:	601a      	str	r2, [r3, #0]
}
 800dc14:	bf00      	nop
 800dc16:	46bd      	mov	sp, r7
 800dc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc1c:	4770      	bx	lr
 800dc1e:	bf00      	nop
 800dc20:	e000e010 	.word	0xe000e010
 800dc24:	e000e018 	.word	0xe000e018
 800dc28:	24000000 	.word	0x24000000
 800dc2c:	10624dd3 	.word	0x10624dd3
 800dc30:	e000e014 	.word	0xe000e014

0800dc34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800dc34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800dc44 <vPortEnableVFP+0x10>
 800dc38:	6801      	ldr	r1, [r0, #0]
 800dc3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800dc3e:	6001      	str	r1, [r0, #0]
 800dc40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800dc42:	bf00      	nop
 800dc44:	e000ed88 	.word	0xe000ed88

0800dc48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800dc48:	b480      	push	{r7}
 800dc4a:	b085      	sub	sp, #20
 800dc4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800dc4e:	f3ef 8305 	mrs	r3, IPSR
 800dc52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	2b0f      	cmp	r3, #15
 800dc58:	d914      	bls.n	800dc84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800dc5a:	4a17      	ldr	r2, [pc, #92]	; (800dcb8 <vPortValidateInterruptPriority+0x70>)
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	4413      	add	r3, r2
 800dc60:	781b      	ldrb	r3, [r3, #0]
 800dc62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800dc64:	4b15      	ldr	r3, [pc, #84]	; (800dcbc <vPortValidateInterruptPriority+0x74>)
 800dc66:	781b      	ldrb	r3, [r3, #0]
 800dc68:	7afa      	ldrb	r2, [r7, #11]
 800dc6a:	429a      	cmp	r2, r3
 800dc6c:	d20a      	bcs.n	800dc84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800dc6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc72:	f383 8811 	msr	BASEPRI, r3
 800dc76:	f3bf 8f6f 	isb	sy
 800dc7a:	f3bf 8f4f 	dsb	sy
 800dc7e:	607b      	str	r3, [r7, #4]
}
 800dc80:	bf00      	nop
 800dc82:	e7fe      	b.n	800dc82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800dc84:	4b0e      	ldr	r3, [pc, #56]	; (800dcc0 <vPortValidateInterruptPriority+0x78>)
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800dc8c:	4b0d      	ldr	r3, [pc, #52]	; (800dcc4 <vPortValidateInterruptPriority+0x7c>)
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	429a      	cmp	r2, r3
 800dc92:	d90a      	bls.n	800dcaa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800dc94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc98:	f383 8811 	msr	BASEPRI, r3
 800dc9c:	f3bf 8f6f 	isb	sy
 800dca0:	f3bf 8f4f 	dsb	sy
 800dca4:	603b      	str	r3, [r7, #0]
}
 800dca6:	bf00      	nop
 800dca8:	e7fe      	b.n	800dca8 <vPortValidateInterruptPriority+0x60>
	}
 800dcaa:	bf00      	nop
 800dcac:	3714      	adds	r7, #20
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb4:	4770      	bx	lr
 800dcb6:	bf00      	nop
 800dcb8:	e000e3f0 	.word	0xe000e3f0
 800dcbc:	24001470 	.word	0x24001470
 800dcc0:	e000ed0c 	.word	0xe000ed0c
 800dcc4:	24001474 	.word	0x24001474

0800dcc8 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b084      	sub	sp, #16
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
 800dcd0:	f7fe fd80 	bl	800c7d4 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
 800dcd4:	6878      	ldr	r0, [r7, #4]
 800dcd6:	f000 f943 	bl	800df60 <malloc>
 800dcda:	4603      	mov	r3, r0
 800dcdc:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800dcde:	f7fe fd87 	bl	800c7f0 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 800dce2:	68fb      	ldr	r3, [r7, #12]
}
 800dce4:	4618      	mov	r0, r3
 800dce6:	3710      	adds	r7, #16
 800dce8:	46bd      	mov	sp, r7
 800dcea:	bd80      	pop	{r7, pc}

0800dcec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b082      	sub	sp, #8
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
	if( pv )
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d006      	beq.n	800dd08 <vPortFree+0x1c>
	{
		vTaskSuspendAll();
 800dcfa:	f7fe fd6b 	bl	800c7d4 <vTaskSuspendAll>
		{
			free( pv );
 800dcfe:	6878      	ldr	r0, [r7, #4]
 800dd00:	f000 f936 	bl	800df70 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
 800dd04:	f7fe fd74 	bl	800c7f0 <xTaskResumeAll>
	}
}
 800dd08:	bf00      	nop
 800dd0a:	3708      	adds	r7, #8
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	bd80      	pop	{r7, pc}

0800dd10 <ProcessReceivedData>:
	HAL_Delay(1000);
}


void ProcessReceivedData(uint16_t Size)
{
 800dd10:	b5b0      	push	{r4, r5, r7, lr}
 800dd12:	b090      	sub	sp, #64	; 0x40
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	4603      	mov	r3, r0
 800dd18:	80fb      	strh	r3, [r7, #6]
	unsigned char output[28]={0};
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	61fb      	str	r3, [r7, #28]
 800dd1e:	f107 0320 	add.w	r3, r7, #32
 800dd22:	2200      	movs	r2, #0
 800dd24:	601a      	str	r2, [r3, #0]
 800dd26:	605a      	str	r2, [r3, #4]
 800dd28:	609a      	str	r2, [r3, #8]
 800dd2a:	60da      	str	r2, [r3, #12]
 800dd2c:	611a      	str	r2, [r3, #16]
 800dd2e:	615a      	str	r2, [r3, #20]
	const char hexChars[] = "0123456789ABCDEF";
 800dd30:	4b6c      	ldr	r3, [pc, #432]	; (800dee4 <ProcessReceivedData+0x1d4>)
 800dd32:	f107 0408 	add.w	r4, r7, #8
 800dd36:	461d      	mov	r5, r3
 800dd38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dd3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dd3c:	682b      	ldr	r3, [r5, #0]
 800dd3e:	7023      	strb	r3, [r4, #0]
	uint16_t i, j = 0;
 800dd40:	2300      	movs	r3, #0
 800dd42:	87bb      	strh	r3, [r7, #60]	; 0x3c
	uint16_t TagIdIndex = 80;
 800dd44:	2350      	movs	r3, #80	; 0x50
 800dd46:	877b      	strh	r3, [r7, #58]	; 0x3a

	static uint8_t TagsCounter = 0;


	//confirm data received is for tag inventory
	if(aRxBuffer[17] == 0x13)
 800dd48:	4b67      	ldr	r3, [pc, #412]	; (800dee8 <ProcessReceivedData+0x1d8>)
 800dd4a:	7c5b      	ldrb	r3, [r3, #17]
 800dd4c:	2b13      	cmp	r3, #19
 800dd4e:	d10e      	bne.n	800dd6e <ProcessReceivedData+0x5e>
	{
		InventoryTagRequested = true;
 800dd50:	4b66      	ldr	r3, [pc, #408]	; (800deec <ProcessReceivedData+0x1dc>)
 800dd52:	2201      	movs	r2, #1
 800dd54:	701a      	strb	r2, [r3, #0]

		//get the size of data packet
		ReceivedDataSize = aRxBuffer[9] | (aRxBuffer[8] << 8);
 800dd56:	4b64      	ldr	r3, [pc, #400]	; (800dee8 <ProcessReceivedData+0x1d8>)
 800dd58:	7a5b      	ldrb	r3, [r3, #9]
 800dd5a:	b21a      	sxth	r2, r3
 800dd5c:	4b62      	ldr	r3, [pc, #392]	; (800dee8 <ProcessReceivedData+0x1d8>)
 800dd5e:	7a1b      	ldrb	r3, [r3, #8]
 800dd60:	021b      	lsls	r3, r3, #8
 800dd62:	b21b      	sxth	r3, r3
 800dd64:	4313      	orrs	r3, r2
 800dd66:	b21b      	sxth	r3, r3
 800dd68:	b29a      	uxth	r2, r3
 800dd6a:	4b61      	ldr	r3, [pc, #388]	; (800def0 <ProcessReceivedData+0x1e0>)
 800dd6c:	801a      	strh	r2, [r3, #0]
	}

	//keep copying data till buffer is full
	if(InventoryTagRequested == true)
 800dd6e:	4b5f      	ldr	r3, [pc, #380]	; (800deec <ProcessReceivedData+0x1dc>)
 800dd70:	781b      	ldrb	r3, [r3, #0]
 800dd72:	b2db      	uxtb	r3, r3
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d014      	beq.n	800dda2 <ProcessReceivedData+0x92>
	{
	   oldPos = newPos;  // Update the last position before copying new data
 800dd78:	4b5e      	ldr	r3, [pc, #376]	; (800def4 <ProcessReceivedData+0x1e4>)
 800dd7a:	881a      	ldrh	r2, [r3, #0]
 800dd7c:	4b5e      	ldr	r3, [pc, #376]	; (800def8 <ProcessReceivedData+0x1e8>)
 800dd7e:	801a      	strh	r2, [r3, #0]

	   //copy received data till buffer size is equal to ReceivedDataSize -1
	   memcpy ((uint8_t *)MainBuf+oldPos, aRxBuffer, Size);  // copy data in that remaining space
 800dd80:	4b5d      	ldr	r3, [pc, #372]	; (800def8 <ProcessReceivedData+0x1e8>)
 800dd82:	881b      	ldrh	r3, [r3, #0]
 800dd84:	461a      	mov	r2, r3
 800dd86:	4b5d      	ldr	r3, [pc, #372]	; (800defc <ProcessReceivedData+0x1ec>)
 800dd88:	4413      	add	r3, r2
 800dd8a:	88fa      	ldrh	r2, [r7, #6]
 800dd8c:	4956      	ldr	r1, [pc, #344]	; (800dee8 <ProcessReceivedData+0x1d8>)
 800dd8e:	4618      	mov	r0, r3
 800dd90:	f001 f953 	bl	800f03a <memcpy>

	   newPos = oldPos + Size;  // Update the last position before copying new data
 800dd94:	4b58      	ldr	r3, [pc, #352]	; (800def8 <ProcessReceivedData+0x1e8>)
 800dd96:	881a      	ldrh	r2, [r3, #0]
 800dd98:	88fb      	ldrh	r3, [r7, #6]
 800dd9a:	4413      	add	r3, r2
 800dd9c:	b29a      	uxth	r2, r3
 800dd9e:	4b55      	ldr	r3, [pc, #340]	; (800def4 <ProcessReceivedData+0x1e4>)
 800dda0:	801a      	strh	r2, [r3, #0]
	}

	if ((ReceivedDataSize == newPos) &&(InventoryTagRequested == true))
 800dda2:	4b53      	ldr	r3, [pc, #332]	; (800def0 <ProcessReceivedData+0x1e0>)
 800dda4:	881a      	ldrh	r2, [r3, #0]
 800dda6:	4b53      	ldr	r3, [pc, #332]	; (800def4 <ProcessReceivedData+0x1e4>)
 800dda8:	881b      	ldrh	r3, [r3, #0]
 800ddaa:	429a      	cmp	r2, r3
 800ddac:	f040 8095 	bne.w	800deda <ProcessReceivedData+0x1ca>
 800ddb0:	4b4e      	ldr	r3, [pc, #312]	; (800deec <ProcessReceivedData+0x1dc>)
 800ddb2:	781b      	ldrb	r3, [r3, #0]
 800ddb4:	b2db      	uxtb	r3, r3
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	f000 808f 	beq.w	800deda <ProcessReceivedData+0x1ca>
	{

	   do {
			 for (i = TagIdIndex; i < TagIdIndex + 12; i++)
 800ddbc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ddbe:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800ddc0:	e029      	b.n	800de16 <ProcessReceivedData+0x106>
			 {
				 output[j++] = hexChars[MainBuf[i] >> 4];
 800ddc2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ddc4:	4a4d      	ldr	r2, [pc, #308]	; (800defc <ProcessReceivedData+0x1ec>)
 800ddc6:	5cd3      	ldrb	r3, [r2, r3]
 800ddc8:	091b      	lsrs	r3, r3, #4
 800ddca:	b2db      	uxtb	r3, r3
 800ddcc:	461a      	mov	r2, r3
 800ddce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ddd0:	1c59      	adds	r1, r3, #1
 800ddd2:	87b9      	strh	r1, [r7, #60]	; 0x3c
 800ddd4:	4619      	mov	r1, r3
 800ddd6:	f102 0340 	add.w	r3, r2, #64	; 0x40
 800ddda:	443b      	add	r3, r7
 800dddc:	f813 2c38 	ldrb.w	r2, [r3, #-56]
 800dde0:	f101 0340 	add.w	r3, r1, #64	; 0x40
 800dde4:	443b      	add	r3, r7
 800dde6:	f803 2c24 	strb.w	r2, [r3, #-36]
				 output[j++] = hexChars[MainBuf[i] & 0x0F];  // Low nibble
 800ddea:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ddec:	4a43      	ldr	r2, [pc, #268]	; (800defc <ProcessReceivedData+0x1ec>)
 800ddee:	5cd3      	ldrb	r3, [r2, r3]
 800ddf0:	f003 020f 	and.w	r2, r3, #15
 800ddf4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ddf6:	1c59      	adds	r1, r3, #1
 800ddf8:	87b9      	strh	r1, [r7, #60]	; 0x3c
 800ddfa:	4619      	mov	r1, r3
 800ddfc:	f102 0340 	add.w	r3, r2, #64	; 0x40
 800de00:	443b      	add	r3, r7
 800de02:	f813 2c38 	ldrb.w	r2, [r3, #-56]
 800de06:	f101 0340 	add.w	r3, r1, #64	; 0x40
 800de0a:	443b      	add	r3, r7
 800de0c:	f803 2c24 	strb.w	r2, [r3, #-36]
			 for (i = TagIdIndex; i < TagIdIndex + 12; i++)
 800de10:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800de12:	3301      	adds	r3, #1
 800de14:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800de16:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800de18:	f103 020b 	add.w	r2, r3, #11
 800de1c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800de1e:	429a      	cmp	r2, r3
 800de20:	dacf      	bge.n	800ddc2 <ProcessReceivedData+0xb2>
			 }

			 output[j] = '\0'; // Null-terminate the string
 800de22:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800de24:	3340      	adds	r3, #64	; 0x40
 800de26:	443b      	add	r3, r7
 800de28:	2200      	movs	r2, #0
 800de2a:	f803 2c24 	strb.w	r2, [r3, #-36]
			 j++;
 800de2e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800de30:	3301      	adds	r3, #1
 800de32:	87bb      	strh	r3, [r7, #60]	; 0x3c
			 output[j] = '\n';
 800de34:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800de36:	3340      	adds	r3, #64	; 0x40
 800de38:	443b      	add	r3, r7
 800de3a:	220a      	movs	r2, #10
 800de3c:	f803 2c24 	strb.w	r2, [r3, #-36]
			 j++;
 800de40:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800de42:	3301      	adds	r3, #1
 800de44:	87bb      	strh	r3, [r7, #60]	; 0x3c
			 output[j] = '\r';
 800de46:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800de48:	3340      	adds	r3, #64	; 0x40
 800de4a:	443b      	add	r3, r7
 800de4c:	220d      	movs	r2, #13
 800de4e:	f803 2c24 	strb.w	r2, [r3, #-36]

			 if(HAL_UART_Transmit(&huart5, (uint8_t*)output, 27, 1000)!= HAL_OK)
 800de52:	f107 011c 	add.w	r1, r7, #28
 800de56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800de5a:	221b      	movs	r2, #27
 800de5c:	4828      	ldr	r0, [pc, #160]	; (800df00 <ProcessReceivedData+0x1f0>)
 800de5e:	f7fa fe86 	bl	8008b6e <HAL_UART_Transmit>
 800de62:	4603      	mov	r3, r0
 800de64:	2b00      	cmp	r3, #0
 800de66:	d001      	beq.n	800de6c <ProcessReceivedData+0x15c>
			 {
			 	Error_Handler();
 800de68:	f7f3 f930 	bl	80010cc <Error_Handler>
			 }

	         j =0;
 800de6c:	2300      	movs	r3, #0
 800de6e:	87bb      	strh	r3, [r7, #60]	; 0x3c
	         i =0;
 800de70:	2300      	movs	r3, #0
 800de72:	87fb      	strh	r3, [r7, #62]	; 0x3e
	         memset(output, 0, sizeof(output));
 800de74:	f107 031c 	add.w	r3, r7, #28
 800de78:	221c      	movs	r2, #28
 800de7a:	2100      	movs	r1, #0
 800de7c:	4618      	mov	r0, r3
 800de7e:	f000 ffeb 	bl	800ee58 <memset>

	         TagIdIndex = TagIdIndex + 74;
 800de82:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800de84:	334a      	adds	r3, #74	; 0x4a
 800de86:	877b      	strh	r3, [r7, #58]	; 0x3a

	         TagsCounter++;
 800de88:	4b1e      	ldr	r3, [pc, #120]	; (800df04 <ProcessReceivedData+0x1f4>)
 800de8a:	781b      	ldrb	r3, [r3, #0]
 800de8c:	3301      	adds	r3, #1
 800de8e:	b2da      	uxtb	r2, r3
 800de90:	4b1c      	ldr	r3, [pc, #112]	; (800df04 <ProcessReceivedData+0x1f4>)
 800de92:	701a      	strb	r2, [r3, #0]

	     } while (TagIdIndex < ReceivedDataSize);
 800de94:	4b16      	ldr	r3, [pc, #88]	; (800def0 <ProcessReceivedData+0x1e0>)
 800de96:	881b      	ldrh	r3, [r3, #0]
 800de98:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800de9a:	429a      	cmp	r2, r3
 800de9c:	d38e      	bcc.n	800ddbc <ProcessReceivedData+0xac>

	   printf("Number of tags responded with ID is: %d \n\n\r", TagsCounter);
 800de9e:	4b19      	ldr	r3, [pc, #100]	; (800df04 <ProcessReceivedData+0x1f4>)
 800dea0:	781b      	ldrb	r3, [r3, #0]
 800dea2:	4619      	mov	r1, r3
 800dea4:	4818      	ldr	r0, [pc, #96]	; (800df08 <ProcessReceivedData+0x1f8>)
 800dea6:	f000 fe13 	bl	800ead0 <iprintf>

	   TagsCounter = 0;
 800deaa:	4b16      	ldr	r3, [pc, #88]	; (800df04 <ProcessReceivedData+0x1f4>)
 800deac:	2200      	movs	r2, #0
 800deae:	701a      	strb	r2, [r3, #0]
	   InventoryTagRequested = false;
 800deb0:	4b0e      	ldr	r3, [pc, #56]	; (800deec <ProcessReceivedData+0x1dc>)
 800deb2:	2200      	movs	r2, #0
 800deb4:	701a      	strb	r2, [r3, #0]

	   oldPos = 0;
 800deb6:	4b10      	ldr	r3, [pc, #64]	; (800def8 <ProcessReceivedData+0x1e8>)
 800deb8:	2200      	movs	r2, #0
 800deba:	801a      	strh	r2, [r3, #0]
	   newPos = 0;
 800debc:	4b0d      	ldr	r3, [pc, #52]	; (800def4 <ProcessReceivedData+0x1e4>)
 800debe:	2200      	movs	r2, #0
 800dec0:	801a      	strh	r2, [r3, #0]
	   ReceivedDataSize = 0;
 800dec2:	4b0b      	ldr	r3, [pc, #44]	; (800def0 <ProcessReceivedData+0x1e0>)
 800dec4:	2200      	movs	r2, #0
 800dec6:	801a      	strh	r2, [r3, #0]
	   memset(MainBuf, 0, sizeof(MainBuf));
 800dec8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800decc:	2100      	movs	r1, #0
 800dece:	480b      	ldr	r0, [pc, #44]	; (800defc <ProcessReceivedData+0x1ec>)
 800ded0:	f000 ffc2 	bl	800ee58 <memset>
	   RxTagsDataCompleted = true;
 800ded4:	4b0d      	ldr	r3, [pc, #52]	; (800df0c <ProcessReceivedData+0x1fc>)
 800ded6:	2201      	movs	r2, #1
 800ded8:	701a      	strb	r2, [r3, #0]
   }

}
 800deda:	bf00      	nop
 800dedc:	3740      	adds	r7, #64	; 0x40
 800dede:	46bd      	mov	sp, r7
 800dee0:	bdb0      	pop	{r4, r5, r7, pc}
 800dee2:	bf00      	nop
 800dee4:	08010f88 	.word	0x08010f88
 800dee8:	30004000 	.word	0x30004000
 800deec:	2400147a 	.word	0x2400147a
 800def0:	2400147c 	.word	0x2400147c
 800def4:	2400147e 	.word	0x2400147e
 800def8:	24001480 	.word	0x24001480
 800defc:	24001484 	.word	0x24001484
 800df00:	24000290 	.word	0x24000290
 800df04:	24003484 	.word	0x24003484
 800df08:	08010f5c 	.word	0x08010f5c
 800df0c:	24001479 	.word	0x24001479

0800df10 <ScanForTags>:


void ScanForTags(void)
{
 800df10:	b580      	push	{r7, lr}
 800df12:	af00      	add	r7, sp, #0

	DataReceivedFlag == false;
 800df14:	4b0e      	ldr	r3, [pc, #56]	; (800df50 <ScanForTags+0x40>)
 800df16:	781b      	ldrb	r3, [r3, #0]
	uint16_t Size;

	memset(aRxBuffer,0, RxBuf_SIZE);
 800df18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800df1c:	2100      	movs	r1, #0
 800df1e:	480d      	ldr	r0, [pc, #52]	; (800df54 <ScanForTags+0x44>)
 800df20:	f000 ff9a 	bl	800ee58 <memset>

	if(HAL_UART_Transmit_DMA(&huart1, (uint8_t*)InventoryTagCommand,33)!= HAL_OK)
 800df24:	2221      	movs	r2, #33	; 0x21
 800df26:	490c      	ldr	r1, [pc, #48]	; (800df58 <ScanForTags+0x48>)
 800df28:	480c      	ldr	r0, [pc, #48]	; (800df5c <ScanForTags+0x4c>)
 800df2a:	f7fa feaf 	bl	8008c8c <HAL_UART_Transmit_DMA>
 800df2e:	4603      	mov	r3, r0
 800df30:	2b00      	cmp	r3, #0
 800df32:	d001      	beq.n	800df38 <ScanForTags+0x28>
	 {
		Error_Handler();
 800df34:	f7f3 f8ca 	bl	80010cc <Error_Handler>
	 }

	while (DataReceivedFlag == false) {};
 800df38:	bf00      	nop
 800df3a:	4b05      	ldr	r3, [pc, #20]	; (800df50 <ScanForTags+0x40>)
 800df3c:	781b      	ldrb	r3, [r3, #0]
 800df3e:	b2db      	uxtb	r3, r3
 800df40:	f083 0301 	eor.w	r3, r3, #1
 800df44:	b2db      	uxtb	r3, r3
 800df46:	2b00      	cmp	r3, #0
 800df48:	d1f7      	bne.n	800df3a <ScanForTags+0x2a>
//	Size = ReadRxDataSize();
//
//	ProcessReceivedData(Size);

//	 while (RxTagsDataCompleted == false) {};
}
 800df4a:	bf00      	nop
 800df4c:	bf00      	nop
 800df4e:	bd80      	pop	{r7, pc}
 800df50:	24001478 	.word	0x24001478
 800df54:	30004000 	.word	0x30004000
 800df58:	08011058 	.word	0x08011058
 800df5c:	24000324 	.word	0x24000324

0800df60 <malloc>:
 800df60:	4b02      	ldr	r3, [pc, #8]	; (800df6c <malloc+0xc>)
 800df62:	4601      	mov	r1, r0
 800df64:	6818      	ldr	r0, [r3, #0]
 800df66:	f000 b82b 	b.w	800dfc0 <_malloc_r>
 800df6a:	bf00      	nop
 800df6c:	2400006c 	.word	0x2400006c

0800df70 <free>:
 800df70:	4b02      	ldr	r3, [pc, #8]	; (800df7c <free+0xc>)
 800df72:	4601      	mov	r1, r0
 800df74:	6818      	ldr	r0, [r3, #0]
 800df76:	f001 be83 	b.w	800fc80 <_free_r>
 800df7a:	bf00      	nop
 800df7c:	2400006c 	.word	0x2400006c

0800df80 <sbrk_aligned>:
 800df80:	b570      	push	{r4, r5, r6, lr}
 800df82:	4e0e      	ldr	r6, [pc, #56]	; (800dfbc <sbrk_aligned+0x3c>)
 800df84:	460c      	mov	r4, r1
 800df86:	6831      	ldr	r1, [r6, #0]
 800df88:	4605      	mov	r5, r0
 800df8a:	b911      	cbnz	r1, 800df92 <sbrk_aligned+0x12>
 800df8c:	f001 f80c 	bl	800efa8 <_sbrk_r>
 800df90:	6030      	str	r0, [r6, #0]
 800df92:	4621      	mov	r1, r4
 800df94:	4628      	mov	r0, r5
 800df96:	f001 f807 	bl	800efa8 <_sbrk_r>
 800df9a:	1c43      	adds	r3, r0, #1
 800df9c:	d00a      	beq.n	800dfb4 <sbrk_aligned+0x34>
 800df9e:	1cc4      	adds	r4, r0, #3
 800dfa0:	f024 0403 	bic.w	r4, r4, #3
 800dfa4:	42a0      	cmp	r0, r4
 800dfa6:	d007      	beq.n	800dfb8 <sbrk_aligned+0x38>
 800dfa8:	1a21      	subs	r1, r4, r0
 800dfaa:	4628      	mov	r0, r5
 800dfac:	f000 fffc 	bl	800efa8 <_sbrk_r>
 800dfb0:	3001      	adds	r0, #1
 800dfb2:	d101      	bne.n	800dfb8 <sbrk_aligned+0x38>
 800dfb4:	f04f 34ff 	mov.w	r4, #4294967295
 800dfb8:	4620      	mov	r0, r4
 800dfba:	bd70      	pop	{r4, r5, r6, pc}
 800dfbc:	2400348c 	.word	0x2400348c

0800dfc0 <_malloc_r>:
 800dfc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dfc4:	1ccd      	adds	r5, r1, #3
 800dfc6:	f025 0503 	bic.w	r5, r5, #3
 800dfca:	3508      	adds	r5, #8
 800dfcc:	2d0c      	cmp	r5, #12
 800dfce:	bf38      	it	cc
 800dfd0:	250c      	movcc	r5, #12
 800dfd2:	2d00      	cmp	r5, #0
 800dfd4:	4607      	mov	r7, r0
 800dfd6:	db01      	blt.n	800dfdc <_malloc_r+0x1c>
 800dfd8:	42a9      	cmp	r1, r5
 800dfda:	d905      	bls.n	800dfe8 <_malloc_r+0x28>
 800dfdc:	230c      	movs	r3, #12
 800dfde:	603b      	str	r3, [r7, #0]
 800dfe0:	2600      	movs	r6, #0
 800dfe2:	4630      	mov	r0, r6
 800dfe4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dfe8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e0bc <_malloc_r+0xfc>
 800dfec:	f000 f868 	bl	800e0c0 <__malloc_lock>
 800dff0:	f8d8 3000 	ldr.w	r3, [r8]
 800dff4:	461c      	mov	r4, r3
 800dff6:	bb5c      	cbnz	r4, 800e050 <_malloc_r+0x90>
 800dff8:	4629      	mov	r1, r5
 800dffa:	4638      	mov	r0, r7
 800dffc:	f7ff ffc0 	bl	800df80 <sbrk_aligned>
 800e000:	1c43      	adds	r3, r0, #1
 800e002:	4604      	mov	r4, r0
 800e004:	d155      	bne.n	800e0b2 <_malloc_r+0xf2>
 800e006:	f8d8 4000 	ldr.w	r4, [r8]
 800e00a:	4626      	mov	r6, r4
 800e00c:	2e00      	cmp	r6, #0
 800e00e:	d145      	bne.n	800e09c <_malloc_r+0xdc>
 800e010:	2c00      	cmp	r4, #0
 800e012:	d048      	beq.n	800e0a6 <_malloc_r+0xe6>
 800e014:	6823      	ldr	r3, [r4, #0]
 800e016:	4631      	mov	r1, r6
 800e018:	4638      	mov	r0, r7
 800e01a:	eb04 0903 	add.w	r9, r4, r3
 800e01e:	f000 ffc3 	bl	800efa8 <_sbrk_r>
 800e022:	4581      	cmp	r9, r0
 800e024:	d13f      	bne.n	800e0a6 <_malloc_r+0xe6>
 800e026:	6821      	ldr	r1, [r4, #0]
 800e028:	1a6d      	subs	r5, r5, r1
 800e02a:	4629      	mov	r1, r5
 800e02c:	4638      	mov	r0, r7
 800e02e:	f7ff ffa7 	bl	800df80 <sbrk_aligned>
 800e032:	3001      	adds	r0, #1
 800e034:	d037      	beq.n	800e0a6 <_malloc_r+0xe6>
 800e036:	6823      	ldr	r3, [r4, #0]
 800e038:	442b      	add	r3, r5
 800e03a:	6023      	str	r3, [r4, #0]
 800e03c:	f8d8 3000 	ldr.w	r3, [r8]
 800e040:	2b00      	cmp	r3, #0
 800e042:	d038      	beq.n	800e0b6 <_malloc_r+0xf6>
 800e044:	685a      	ldr	r2, [r3, #4]
 800e046:	42a2      	cmp	r2, r4
 800e048:	d12b      	bne.n	800e0a2 <_malloc_r+0xe2>
 800e04a:	2200      	movs	r2, #0
 800e04c:	605a      	str	r2, [r3, #4]
 800e04e:	e00f      	b.n	800e070 <_malloc_r+0xb0>
 800e050:	6822      	ldr	r2, [r4, #0]
 800e052:	1b52      	subs	r2, r2, r5
 800e054:	d41f      	bmi.n	800e096 <_malloc_r+0xd6>
 800e056:	2a0b      	cmp	r2, #11
 800e058:	d917      	bls.n	800e08a <_malloc_r+0xca>
 800e05a:	1961      	adds	r1, r4, r5
 800e05c:	42a3      	cmp	r3, r4
 800e05e:	6025      	str	r5, [r4, #0]
 800e060:	bf18      	it	ne
 800e062:	6059      	strne	r1, [r3, #4]
 800e064:	6863      	ldr	r3, [r4, #4]
 800e066:	bf08      	it	eq
 800e068:	f8c8 1000 	streq.w	r1, [r8]
 800e06c:	5162      	str	r2, [r4, r5]
 800e06e:	604b      	str	r3, [r1, #4]
 800e070:	4638      	mov	r0, r7
 800e072:	f104 060b 	add.w	r6, r4, #11
 800e076:	f000 f829 	bl	800e0cc <__malloc_unlock>
 800e07a:	f026 0607 	bic.w	r6, r6, #7
 800e07e:	1d23      	adds	r3, r4, #4
 800e080:	1af2      	subs	r2, r6, r3
 800e082:	d0ae      	beq.n	800dfe2 <_malloc_r+0x22>
 800e084:	1b9b      	subs	r3, r3, r6
 800e086:	50a3      	str	r3, [r4, r2]
 800e088:	e7ab      	b.n	800dfe2 <_malloc_r+0x22>
 800e08a:	42a3      	cmp	r3, r4
 800e08c:	6862      	ldr	r2, [r4, #4]
 800e08e:	d1dd      	bne.n	800e04c <_malloc_r+0x8c>
 800e090:	f8c8 2000 	str.w	r2, [r8]
 800e094:	e7ec      	b.n	800e070 <_malloc_r+0xb0>
 800e096:	4623      	mov	r3, r4
 800e098:	6864      	ldr	r4, [r4, #4]
 800e09a:	e7ac      	b.n	800dff6 <_malloc_r+0x36>
 800e09c:	4634      	mov	r4, r6
 800e09e:	6876      	ldr	r6, [r6, #4]
 800e0a0:	e7b4      	b.n	800e00c <_malloc_r+0x4c>
 800e0a2:	4613      	mov	r3, r2
 800e0a4:	e7cc      	b.n	800e040 <_malloc_r+0x80>
 800e0a6:	230c      	movs	r3, #12
 800e0a8:	603b      	str	r3, [r7, #0]
 800e0aa:	4638      	mov	r0, r7
 800e0ac:	f000 f80e 	bl	800e0cc <__malloc_unlock>
 800e0b0:	e797      	b.n	800dfe2 <_malloc_r+0x22>
 800e0b2:	6025      	str	r5, [r4, #0]
 800e0b4:	e7dc      	b.n	800e070 <_malloc_r+0xb0>
 800e0b6:	605b      	str	r3, [r3, #4]
 800e0b8:	deff      	udf	#255	; 0xff
 800e0ba:	bf00      	nop
 800e0bc:	24003488 	.word	0x24003488

0800e0c0 <__malloc_lock>:
 800e0c0:	4801      	ldr	r0, [pc, #4]	; (800e0c8 <__malloc_lock+0x8>)
 800e0c2:	f000 bfb8 	b.w	800f036 <__retarget_lock_acquire_recursive>
 800e0c6:	bf00      	nop
 800e0c8:	240035d0 	.word	0x240035d0

0800e0cc <__malloc_unlock>:
 800e0cc:	4801      	ldr	r0, [pc, #4]	; (800e0d4 <__malloc_unlock+0x8>)
 800e0ce:	f000 bfb3 	b.w	800f038 <__retarget_lock_release_recursive>
 800e0d2:	bf00      	nop
 800e0d4:	240035d0 	.word	0x240035d0

0800e0d8 <__cvt>:
 800e0d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e0da:	ed2d 8b02 	vpush	{d8}
 800e0de:	eeb0 8b40 	vmov.f64	d8, d0
 800e0e2:	b085      	sub	sp, #20
 800e0e4:	4617      	mov	r7, r2
 800e0e6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800e0e8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800e0ea:	ee18 2a90 	vmov	r2, s17
 800e0ee:	f025 0520 	bic.w	r5, r5, #32
 800e0f2:	2a00      	cmp	r2, #0
 800e0f4:	bfb6      	itet	lt
 800e0f6:	222d      	movlt	r2, #45	; 0x2d
 800e0f8:	2200      	movge	r2, #0
 800e0fa:	eeb1 8b40 	vneglt.f64	d8, d0
 800e0fe:	2d46      	cmp	r5, #70	; 0x46
 800e100:	460c      	mov	r4, r1
 800e102:	701a      	strb	r2, [r3, #0]
 800e104:	d004      	beq.n	800e110 <__cvt+0x38>
 800e106:	2d45      	cmp	r5, #69	; 0x45
 800e108:	d100      	bne.n	800e10c <__cvt+0x34>
 800e10a:	3401      	adds	r4, #1
 800e10c:	2102      	movs	r1, #2
 800e10e:	e000      	b.n	800e112 <__cvt+0x3a>
 800e110:	2103      	movs	r1, #3
 800e112:	ab03      	add	r3, sp, #12
 800e114:	9301      	str	r3, [sp, #4]
 800e116:	ab02      	add	r3, sp, #8
 800e118:	9300      	str	r3, [sp, #0]
 800e11a:	4622      	mov	r2, r4
 800e11c:	4633      	mov	r3, r6
 800e11e:	eeb0 0b48 	vmov.f64	d0, d8
 800e122:	f001 f841 	bl	800f1a8 <_dtoa_r>
 800e126:	2d47      	cmp	r5, #71	; 0x47
 800e128:	d101      	bne.n	800e12e <__cvt+0x56>
 800e12a:	07fb      	lsls	r3, r7, #31
 800e12c:	d51a      	bpl.n	800e164 <__cvt+0x8c>
 800e12e:	2d46      	cmp	r5, #70	; 0x46
 800e130:	eb00 0204 	add.w	r2, r0, r4
 800e134:	d10c      	bne.n	800e150 <__cvt+0x78>
 800e136:	7803      	ldrb	r3, [r0, #0]
 800e138:	2b30      	cmp	r3, #48	; 0x30
 800e13a:	d107      	bne.n	800e14c <__cvt+0x74>
 800e13c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e144:	bf1c      	itt	ne
 800e146:	f1c4 0401 	rsbne	r4, r4, #1
 800e14a:	6034      	strne	r4, [r6, #0]
 800e14c:	6833      	ldr	r3, [r6, #0]
 800e14e:	441a      	add	r2, r3
 800e150:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e158:	bf08      	it	eq
 800e15a:	9203      	streq	r2, [sp, #12]
 800e15c:	2130      	movs	r1, #48	; 0x30
 800e15e:	9b03      	ldr	r3, [sp, #12]
 800e160:	4293      	cmp	r3, r2
 800e162:	d307      	bcc.n	800e174 <__cvt+0x9c>
 800e164:	9b03      	ldr	r3, [sp, #12]
 800e166:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e168:	1a1b      	subs	r3, r3, r0
 800e16a:	6013      	str	r3, [r2, #0]
 800e16c:	b005      	add	sp, #20
 800e16e:	ecbd 8b02 	vpop	{d8}
 800e172:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e174:	1c5c      	adds	r4, r3, #1
 800e176:	9403      	str	r4, [sp, #12]
 800e178:	7019      	strb	r1, [r3, #0]
 800e17a:	e7f0      	b.n	800e15e <__cvt+0x86>

0800e17c <__exponent>:
 800e17c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e17e:	4603      	mov	r3, r0
 800e180:	2900      	cmp	r1, #0
 800e182:	bfb8      	it	lt
 800e184:	4249      	neglt	r1, r1
 800e186:	f803 2b02 	strb.w	r2, [r3], #2
 800e18a:	bfb4      	ite	lt
 800e18c:	222d      	movlt	r2, #45	; 0x2d
 800e18e:	222b      	movge	r2, #43	; 0x2b
 800e190:	2909      	cmp	r1, #9
 800e192:	7042      	strb	r2, [r0, #1]
 800e194:	dd2a      	ble.n	800e1ec <__exponent+0x70>
 800e196:	f10d 0207 	add.w	r2, sp, #7
 800e19a:	4617      	mov	r7, r2
 800e19c:	260a      	movs	r6, #10
 800e19e:	4694      	mov	ip, r2
 800e1a0:	fb91 f5f6 	sdiv	r5, r1, r6
 800e1a4:	fb06 1415 	mls	r4, r6, r5, r1
 800e1a8:	3430      	adds	r4, #48	; 0x30
 800e1aa:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800e1ae:	460c      	mov	r4, r1
 800e1b0:	2c63      	cmp	r4, #99	; 0x63
 800e1b2:	f102 32ff 	add.w	r2, r2, #4294967295
 800e1b6:	4629      	mov	r1, r5
 800e1b8:	dcf1      	bgt.n	800e19e <__exponent+0x22>
 800e1ba:	3130      	adds	r1, #48	; 0x30
 800e1bc:	f1ac 0402 	sub.w	r4, ip, #2
 800e1c0:	f802 1c01 	strb.w	r1, [r2, #-1]
 800e1c4:	1c41      	adds	r1, r0, #1
 800e1c6:	4622      	mov	r2, r4
 800e1c8:	42ba      	cmp	r2, r7
 800e1ca:	d30a      	bcc.n	800e1e2 <__exponent+0x66>
 800e1cc:	f10d 0209 	add.w	r2, sp, #9
 800e1d0:	eba2 020c 	sub.w	r2, r2, ip
 800e1d4:	42bc      	cmp	r4, r7
 800e1d6:	bf88      	it	hi
 800e1d8:	2200      	movhi	r2, #0
 800e1da:	4413      	add	r3, r2
 800e1dc:	1a18      	subs	r0, r3, r0
 800e1de:	b003      	add	sp, #12
 800e1e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e1e2:	f812 5b01 	ldrb.w	r5, [r2], #1
 800e1e6:	f801 5f01 	strb.w	r5, [r1, #1]!
 800e1ea:	e7ed      	b.n	800e1c8 <__exponent+0x4c>
 800e1ec:	2330      	movs	r3, #48	; 0x30
 800e1ee:	3130      	adds	r1, #48	; 0x30
 800e1f0:	7083      	strb	r3, [r0, #2]
 800e1f2:	70c1      	strb	r1, [r0, #3]
 800e1f4:	1d03      	adds	r3, r0, #4
 800e1f6:	e7f1      	b.n	800e1dc <__exponent+0x60>

0800e1f8 <_printf_float>:
 800e1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1fc:	b08b      	sub	sp, #44	; 0x2c
 800e1fe:	460c      	mov	r4, r1
 800e200:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800e204:	4616      	mov	r6, r2
 800e206:	461f      	mov	r7, r3
 800e208:	4605      	mov	r5, r0
 800e20a:	f000 fe3f 	bl	800ee8c <_localeconv_r>
 800e20e:	f8d0 b000 	ldr.w	fp, [r0]
 800e212:	4658      	mov	r0, fp
 800e214:	f7f2 f8cc 	bl	80003b0 <strlen>
 800e218:	2300      	movs	r3, #0
 800e21a:	9308      	str	r3, [sp, #32]
 800e21c:	f8d8 3000 	ldr.w	r3, [r8]
 800e220:	f894 9018 	ldrb.w	r9, [r4, #24]
 800e224:	6822      	ldr	r2, [r4, #0]
 800e226:	3307      	adds	r3, #7
 800e228:	f023 0307 	bic.w	r3, r3, #7
 800e22c:	f103 0108 	add.w	r1, r3, #8
 800e230:	f8c8 1000 	str.w	r1, [r8]
 800e234:	ed93 0b00 	vldr	d0, [r3]
 800e238:	ed9f 6b97 	vldr	d6, [pc, #604]	; 800e498 <_printf_float+0x2a0>
 800e23c:	eeb0 7bc0 	vabs.f64	d7, d0
 800e240:	eeb4 7b46 	vcmp.f64	d7, d6
 800e244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e248:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 800e24c:	4682      	mov	sl, r0
 800e24e:	dd24      	ble.n	800e29a <_printf_float+0xa2>
 800e250:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e258:	d502      	bpl.n	800e260 <_printf_float+0x68>
 800e25a:	232d      	movs	r3, #45	; 0x2d
 800e25c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e260:	498f      	ldr	r1, [pc, #572]	; (800e4a0 <_printf_float+0x2a8>)
 800e262:	4b90      	ldr	r3, [pc, #576]	; (800e4a4 <_printf_float+0x2ac>)
 800e264:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800e268:	bf94      	ite	ls
 800e26a:	4688      	movls	r8, r1
 800e26c:	4698      	movhi	r8, r3
 800e26e:	2303      	movs	r3, #3
 800e270:	6123      	str	r3, [r4, #16]
 800e272:	f022 0204 	bic.w	r2, r2, #4
 800e276:	2300      	movs	r3, #0
 800e278:	6022      	str	r2, [r4, #0]
 800e27a:	9304      	str	r3, [sp, #16]
 800e27c:	9700      	str	r7, [sp, #0]
 800e27e:	4633      	mov	r3, r6
 800e280:	aa09      	add	r2, sp, #36	; 0x24
 800e282:	4621      	mov	r1, r4
 800e284:	4628      	mov	r0, r5
 800e286:	f000 f9d1 	bl	800e62c <_printf_common>
 800e28a:	3001      	adds	r0, #1
 800e28c:	f040 808a 	bne.w	800e3a4 <_printf_float+0x1ac>
 800e290:	f04f 30ff 	mov.w	r0, #4294967295
 800e294:	b00b      	add	sp, #44	; 0x2c
 800e296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e29a:	eeb4 0b40 	vcmp.f64	d0, d0
 800e29e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2a2:	d709      	bvc.n	800e2b8 <_printf_float+0xc0>
 800e2a4:	ee10 3a90 	vmov	r3, s1
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	bfbc      	itt	lt
 800e2ac:	232d      	movlt	r3, #45	; 0x2d
 800e2ae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e2b2:	497d      	ldr	r1, [pc, #500]	; (800e4a8 <_printf_float+0x2b0>)
 800e2b4:	4b7d      	ldr	r3, [pc, #500]	; (800e4ac <_printf_float+0x2b4>)
 800e2b6:	e7d5      	b.n	800e264 <_printf_float+0x6c>
 800e2b8:	6863      	ldr	r3, [r4, #4]
 800e2ba:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800e2be:	9104      	str	r1, [sp, #16]
 800e2c0:	1c59      	adds	r1, r3, #1
 800e2c2:	d13c      	bne.n	800e33e <_printf_float+0x146>
 800e2c4:	2306      	movs	r3, #6
 800e2c6:	6063      	str	r3, [r4, #4]
 800e2c8:	2300      	movs	r3, #0
 800e2ca:	9303      	str	r3, [sp, #12]
 800e2cc:	ab08      	add	r3, sp, #32
 800e2ce:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800e2d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e2d6:	ab07      	add	r3, sp, #28
 800e2d8:	6861      	ldr	r1, [r4, #4]
 800e2da:	9300      	str	r3, [sp, #0]
 800e2dc:	6022      	str	r2, [r4, #0]
 800e2de:	f10d 031b 	add.w	r3, sp, #27
 800e2e2:	4628      	mov	r0, r5
 800e2e4:	f7ff fef8 	bl	800e0d8 <__cvt>
 800e2e8:	9b04      	ldr	r3, [sp, #16]
 800e2ea:	9907      	ldr	r1, [sp, #28]
 800e2ec:	2b47      	cmp	r3, #71	; 0x47
 800e2ee:	4680      	mov	r8, r0
 800e2f0:	d108      	bne.n	800e304 <_printf_float+0x10c>
 800e2f2:	1cc8      	adds	r0, r1, #3
 800e2f4:	db02      	blt.n	800e2fc <_printf_float+0x104>
 800e2f6:	6863      	ldr	r3, [r4, #4]
 800e2f8:	4299      	cmp	r1, r3
 800e2fa:	dd41      	ble.n	800e380 <_printf_float+0x188>
 800e2fc:	f1a9 0902 	sub.w	r9, r9, #2
 800e300:	fa5f f989 	uxtb.w	r9, r9
 800e304:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800e308:	d820      	bhi.n	800e34c <_printf_float+0x154>
 800e30a:	3901      	subs	r1, #1
 800e30c:	464a      	mov	r2, r9
 800e30e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e312:	9107      	str	r1, [sp, #28]
 800e314:	f7ff ff32 	bl	800e17c <__exponent>
 800e318:	9a08      	ldr	r2, [sp, #32]
 800e31a:	9004      	str	r0, [sp, #16]
 800e31c:	1813      	adds	r3, r2, r0
 800e31e:	2a01      	cmp	r2, #1
 800e320:	6123      	str	r3, [r4, #16]
 800e322:	dc02      	bgt.n	800e32a <_printf_float+0x132>
 800e324:	6822      	ldr	r2, [r4, #0]
 800e326:	07d2      	lsls	r2, r2, #31
 800e328:	d501      	bpl.n	800e32e <_printf_float+0x136>
 800e32a:	3301      	adds	r3, #1
 800e32c:	6123      	str	r3, [r4, #16]
 800e32e:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800e332:	2b00      	cmp	r3, #0
 800e334:	d0a2      	beq.n	800e27c <_printf_float+0x84>
 800e336:	232d      	movs	r3, #45	; 0x2d
 800e338:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e33c:	e79e      	b.n	800e27c <_printf_float+0x84>
 800e33e:	9904      	ldr	r1, [sp, #16]
 800e340:	2947      	cmp	r1, #71	; 0x47
 800e342:	d1c1      	bne.n	800e2c8 <_printf_float+0xd0>
 800e344:	2b00      	cmp	r3, #0
 800e346:	d1bf      	bne.n	800e2c8 <_printf_float+0xd0>
 800e348:	2301      	movs	r3, #1
 800e34a:	e7bc      	b.n	800e2c6 <_printf_float+0xce>
 800e34c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800e350:	d118      	bne.n	800e384 <_printf_float+0x18c>
 800e352:	2900      	cmp	r1, #0
 800e354:	6863      	ldr	r3, [r4, #4]
 800e356:	dd0b      	ble.n	800e370 <_printf_float+0x178>
 800e358:	6121      	str	r1, [r4, #16]
 800e35a:	b913      	cbnz	r3, 800e362 <_printf_float+0x16a>
 800e35c:	6822      	ldr	r2, [r4, #0]
 800e35e:	07d0      	lsls	r0, r2, #31
 800e360:	d502      	bpl.n	800e368 <_printf_float+0x170>
 800e362:	3301      	adds	r3, #1
 800e364:	440b      	add	r3, r1
 800e366:	6123      	str	r3, [r4, #16]
 800e368:	2300      	movs	r3, #0
 800e36a:	65a1      	str	r1, [r4, #88]	; 0x58
 800e36c:	9304      	str	r3, [sp, #16]
 800e36e:	e7de      	b.n	800e32e <_printf_float+0x136>
 800e370:	b913      	cbnz	r3, 800e378 <_printf_float+0x180>
 800e372:	6822      	ldr	r2, [r4, #0]
 800e374:	07d2      	lsls	r2, r2, #31
 800e376:	d501      	bpl.n	800e37c <_printf_float+0x184>
 800e378:	3302      	adds	r3, #2
 800e37a:	e7f4      	b.n	800e366 <_printf_float+0x16e>
 800e37c:	2301      	movs	r3, #1
 800e37e:	e7f2      	b.n	800e366 <_printf_float+0x16e>
 800e380:	f04f 0967 	mov.w	r9, #103	; 0x67
 800e384:	9b08      	ldr	r3, [sp, #32]
 800e386:	4299      	cmp	r1, r3
 800e388:	db05      	blt.n	800e396 <_printf_float+0x19e>
 800e38a:	6823      	ldr	r3, [r4, #0]
 800e38c:	6121      	str	r1, [r4, #16]
 800e38e:	07d8      	lsls	r0, r3, #31
 800e390:	d5ea      	bpl.n	800e368 <_printf_float+0x170>
 800e392:	1c4b      	adds	r3, r1, #1
 800e394:	e7e7      	b.n	800e366 <_printf_float+0x16e>
 800e396:	2900      	cmp	r1, #0
 800e398:	bfd4      	ite	le
 800e39a:	f1c1 0202 	rsble	r2, r1, #2
 800e39e:	2201      	movgt	r2, #1
 800e3a0:	4413      	add	r3, r2
 800e3a2:	e7e0      	b.n	800e366 <_printf_float+0x16e>
 800e3a4:	6823      	ldr	r3, [r4, #0]
 800e3a6:	055a      	lsls	r2, r3, #21
 800e3a8:	d407      	bmi.n	800e3ba <_printf_float+0x1c2>
 800e3aa:	6923      	ldr	r3, [r4, #16]
 800e3ac:	4642      	mov	r2, r8
 800e3ae:	4631      	mov	r1, r6
 800e3b0:	4628      	mov	r0, r5
 800e3b2:	47b8      	blx	r7
 800e3b4:	3001      	adds	r0, #1
 800e3b6:	d12a      	bne.n	800e40e <_printf_float+0x216>
 800e3b8:	e76a      	b.n	800e290 <_printf_float+0x98>
 800e3ba:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800e3be:	f240 80e0 	bls.w	800e582 <_printf_float+0x38a>
 800e3c2:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800e3c6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e3ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3ce:	d133      	bne.n	800e438 <_printf_float+0x240>
 800e3d0:	4a37      	ldr	r2, [pc, #220]	; (800e4b0 <_printf_float+0x2b8>)
 800e3d2:	2301      	movs	r3, #1
 800e3d4:	4631      	mov	r1, r6
 800e3d6:	4628      	mov	r0, r5
 800e3d8:	47b8      	blx	r7
 800e3da:	3001      	adds	r0, #1
 800e3dc:	f43f af58 	beq.w	800e290 <_printf_float+0x98>
 800e3e0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800e3e4:	429a      	cmp	r2, r3
 800e3e6:	db02      	blt.n	800e3ee <_printf_float+0x1f6>
 800e3e8:	6823      	ldr	r3, [r4, #0]
 800e3ea:	07d8      	lsls	r0, r3, #31
 800e3ec:	d50f      	bpl.n	800e40e <_printf_float+0x216>
 800e3ee:	4653      	mov	r3, sl
 800e3f0:	465a      	mov	r2, fp
 800e3f2:	4631      	mov	r1, r6
 800e3f4:	4628      	mov	r0, r5
 800e3f6:	47b8      	blx	r7
 800e3f8:	3001      	adds	r0, #1
 800e3fa:	f43f af49 	beq.w	800e290 <_printf_float+0x98>
 800e3fe:	f04f 0800 	mov.w	r8, #0
 800e402:	f104 091a 	add.w	r9, r4, #26
 800e406:	9b08      	ldr	r3, [sp, #32]
 800e408:	3b01      	subs	r3, #1
 800e40a:	4543      	cmp	r3, r8
 800e40c:	dc09      	bgt.n	800e422 <_printf_float+0x22a>
 800e40e:	6823      	ldr	r3, [r4, #0]
 800e410:	079b      	lsls	r3, r3, #30
 800e412:	f100 8106 	bmi.w	800e622 <_printf_float+0x42a>
 800e416:	68e0      	ldr	r0, [r4, #12]
 800e418:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e41a:	4298      	cmp	r0, r3
 800e41c:	bfb8      	it	lt
 800e41e:	4618      	movlt	r0, r3
 800e420:	e738      	b.n	800e294 <_printf_float+0x9c>
 800e422:	2301      	movs	r3, #1
 800e424:	464a      	mov	r2, r9
 800e426:	4631      	mov	r1, r6
 800e428:	4628      	mov	r0, r5
 800e42a:	47b8      	blx	r7
 800e42c:	3001      	adds	r0, #1
 800e42e:	f43f af2f 	beq.w	800e290 <_printf_float+0x98>
 800e432:	f108 0801 	add.w	r8, r8, #1
 800e436:	e7e6      	b.n	800e406 <_printf_float+0x20e>
 800e438:	9b07      	ldr	r3, [sp, #28]
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	dc3a      	bgt.n	800e4b4 <_printf_float+0x2bc>
 800e43e:	4a1c      	ldr	r2, [pc, #112]	; (800e4b0 <_printf_float+0x2b8>)
 800e440:	2301      	movs	r3, #1
 800e442:	4631      	mov	r1, r6
 800e444:	4628      	mov	r0, r5
 800e446:	47b8      	blx	r7
 800e448:	3001      	adds	r0, #1
 800e44a:	f43f af21 	beq.w	800e290 <_printf_float+0x98>
 800e44e:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800e452:	4313      	orrs	r3, r2
 800e454:	d102      	bne.n	800e45c <_printf_float+0x264>
 800e456:	6823      	ldr	r3, [r4, #0]
 800e458:	07d9      	lsls	r1, r3, #31
 800e45a:	d5d8      	bpl.n	800e40e <_printf_float+0x216>
 800e45c:	4653      	mov	r3, sl
 800e45e:	465a      	mov	r2, fp
 800e460:	4631      	mov	r1, r6
 800e462:	4628      	mov	r0, r5
 800e464:	47b8      	blx	r7
 800e466:	3001      	adds	r0, #1
 800e468:	f43f af12 	beq.w	800e290 <_printf_float+0x98>
 800e46c:	f04f 0900 	mov.w	r9, #0
 800e470:	f104 0a1a 	add.w	sl, r4, #26
 800e474:	9b07      	ldr	r3, [sp, #28]
 800e476:	425b      	negs	r3, r3
 800e478:	454b      	cmp	r3, r9
 800e47a:	dc01      	bgt.n	800e480 <_printf_float+0x288>
 800e47c:	9b08      	ldr	r3, [sp, #32]
 800e47e:	e795      	b.n	800e3ac <_printf_float+0x1b4>
 800e480:	2301      	movs	r3, #1
 800e482:	4652      	mov	r2, sl
 800e484:	4631      	mov	r1, r6
 800e486:	4628      	mov	r0, r5
 800e488:	47b8      	blx	r7
 800e48a:	3001      	adds	r0, #1
 800e48c:	f43f af00 	beq.w	800e290 <_printf_float+0x98>
 800e490:	f109 0901 	add.w	r9, r9, #1
 800e494:	e7ee      	b.n	800e474 <_printf_float+0x27c>
 800e496:	bf00      	nop
 800e498:	ffffffff 	.word	0xffffffff
 800e49c:	7fefffff 	.word	0x7fefffff
 800e4a0:	0801117a 	.word	0x0801117a
 800e4a4:	0801117e 	.word	0x0801117e
 800e4a8:	08011182 	.word	0x08011182
 800e4ac:	08011186 	.word	0x08011186
 800e4b0:	0801118a 	.word	0x0801118a
 800e4b4:	9a08      	ldr	r2, [sp, #32]
 800e4b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e4b8:	429a      	cmp	r2, r3
 800e4ba:	bfa8      	it	ge
 800e4bc:	461a      	movge	r2, r3
 800e4be:	2a00      	cmp	r2, #0
 800e4c0:	4691      	mov	r9, r2
 800e4c2:	dc38      	bgt.n	800e536 <_printf_float+0x33e>
 800e4c4:	2300      	movs	r3, #0
 800e4c6:	9305      	str	r3, [sp, #20]
 800e4c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e4cc:	f104 021a 	add.w	r2, r4, #26
 800e4d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e4d2:	9905      	ldr	r1, [sp, #20]
 800e4d4:	9304      	str	r3, [sp, #16]
 800e4d6:	eba3 0309 	sub.w	r3, r3, r9
 800e4da:	428b      	cmp	r3, r1
 800e4dc:	dc33      	bgt.n	800e546 <_printf_float+0x34e>
 800e4de:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800e4e2:	429a      	cmp	r2, r3
 800e4e4:	db3c      	blt.n	800e560 <_printf_float+0x368>
 800e4e6:	6823      	ldr	r3, [r4, #0]
 800e4e8:	07da      	lsls	r2, r3, #31
 800e4ea:	d439      	bmi.n	800e560 <_printf_float+0x368>
 800e4ec:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800e4f0:	eba2 0903 	sub.w	r9, r2, r3
 800e4f4:	9b04      	ldr	r3, [sp, #16]
 800e4f6:	1ad2      	subs	r2, r2, r3
 800e4f8:	4591      	cmp	r9, r2
 800e4fa:	bfa8      	it	ge
 800e4fc:	4691      	movge	r9, r2
 800e4fe:	f1b9 0f00 	cmp.w	r9, #0
 800e502:	dc35      	bgt.n	800e570 <_printf_float+0x378>
 800e504:	f04f 0800 	mov.w	r8, #0
 800e508:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e50c:	f104 0a1a 	add.w	sl, r4, #26
 800e510:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800e514:	1a9b      	subs	r3, r3, r2
 800e516:	eba3 0309 	sub.w	r3, r3, r9
 800e51a:	4543      	cmp	r3, r8
 800e51c:	f77f af77 	ble.w	800e40e <_printf_float+0x216>
 800e520:	2301      	movs	r3, #1
 800e522:	4652      	mov	r2, sl
 800e524:	4631      	mov	r1, r6
 800e526:	4628      	mov	r0, r5
 800e528:	47b8      	blx	r7
 800e52a:	3001      	adds	r0, #1
 800e52c:	f43f aeb0 	beq.w	800e290 <_printf_float+0x98>
 800e530:	f108 0801 	add.w	r8, r8, #1
 800e534:	e7ec      	b.n	800e510 <_printf_float+0x318>
 800e536:	4613      	mov	r3, r2
 800e538:	4631      	mov	r1, r6
 800e53a:	4642      	mov	r2, r8
 800e53c:	4628      	mov	r0, r5
 800e53e:	47b8      	blx	r7
 800e540:	3001      	adds	r0, #1
 800e542:	d1bf      	bne.n	800e4c4 <_printf_float+0x2cc>
 800e544:	e6a4      	b.n	800e290 <_printf_float+0x98>
 800e546:	2301      	movs	r3, #1
 800e548:	4631      	mov	r1, r6
 800e54a:	4628      	mov	r0, r5
 800e54c:	9204      	str	r2, [sp, #16]
 800e54e:	47b8      	blx	r7
 800e550:	3001      	adds	r0, #1
 800e552:	f43f ae9d 	beq.w	800e290 <_printf_float+0x98>
 800e556:	9b05      	ldr	r3, [sp, #20]
 800e558:	9a04      	ldr	r2, [sp, #16]
 800e55a:	3301      	adds	r3, #1
 800e55c:	9305      	str	r3, [sp, #20]
 800e55e:	e7b7      	b.n	800e4d0 <_printf_float+0x2d8>
 800e560:	4653      	mov	r3, sl
 800e562:	465a      	mov	r2, fp
 800e564:	4631      	mov	r1, r6
 800e566:	4628      	mov	r0, r5
 800e568:	47b8      	blx	r7
 800e56a:	3001      	adds	r0, #1
 800e56c:	d1be      	bne.n	800e4ec <_printf_float+0x2f4>
 800e56e:	e68f      	b.n	800e290 <_printf_float+0x98>
 800e570:	9a04      	ldr	r2, [sp, #16]
 800e572:	464b      	mov	r3, r9
 800e574:	4442      	add	r2, r8
 800e576:	4631      	mov	r1, r6
 800e578:	4628      	mov	r0, r5
 800e57a:	47b8      	blx	r7
 800e57c:	3001      	adds	r0, #1
 800e57e:	d1c1      	bne.n	800e504 <_printf_float+0x30c>
 800e580:	e686      	b.n	800e290 <_printf_float+0x98>
 800e582:	9a08      	ldr	r2, [sp, #32]
 800e584:	2a01      	cmp	r2, #1
 800e586:	dc01      	bgt.n	800e58c <_printf_float+0x394>
 800e588:	07db      	lsls	r3, r3, #31
 800e58a:	d537      	bpl.n	800e5fc <_printf_float+0x404>
 800e58c:	2301      	movs	r3, #1
 800e58e:	4642      	mov	r2, r8
 800e590:	4631      	mov	r1, r6
 800e592:	4628      	mov	r0, r5
 800e594:	47b8      	blx	r7
 800e596:	3001      	adds	r0, #1
 800e598:	f43f ae7a 	beq.w	800e290 <_printf_float+0x98>
 800e59c:	4653      	mov	r3, sl
 800e59e:	465a      	mov	r2, fp
 800e5a0:	4631      	mov	r1, r6
 800e5a2:	4628      	mov	r0, r5
 800e5a4:	47b8      	blx	r7
 800e5a6:	3001      	adds	r0, #1
 800e5a8:	f43f ae72 	beq.w	800e290 <_printf_float+0x98>
 800e5ac:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800e5b0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e5b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5b8:	9b08      	ldr	r3, [sp, #32]
 800e5ba:	d01a      	beq.n	800e5f2 <_printf_float+0x3fa>
 800e5bc:	3b01      	subs	r3, #1
 800e5be:	f108 0201 	add.w	r2, r8, #1
 800e5c2:	4631      	mov	r1, r6
 800e5c4:	4628      	mov	r0, r5
 800e5c6:	47b8      	blx	r7
 800e5c8:	3001      	adds	r0, #1
 800e5ca:	d10e      	bne.n	800e5ea <_printf_float+0x3f2>
 800e5cc:	e660      	b.n	800e290 <_printf_float+0x98>
 800e5ce:	2301      	movs	r3, #1
 800e5d0:	464a      	mov	r2, r9
 800e5d2:	4631      	mov	r1, r6
 800e5d4:	4628      	mov	r0, r5
 800e5d6:	47b8      	blx	r7
 800e5d8:	3001      	adds	r0, #1
 800e5da:	f43f ae59 	beq.w	800e290 <_printf_float+0x98>
 800e5de:	f108 0801 	add.w	r8, r8, #1
 800e5e2:	9b08      	ldr	r3, [sp, #32]
 800e5e4:	3b01      	subs	r3, #1
 800e5e6:	4543      	cmp	r3, r8
 800e5e8:	dcf1      	bgt.n	800e5ce <_printf_float+0x3d6>
 800e5ea:	9b04      	ldr	r3, [sp, #16]
 800e5ec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e5f0:	e6dd      	b.n	800e3ae <_printf_float+0x1b6>
 800e5f2:	f04f 0800 	mov.w	r8, #0
 800e5f6:	f104 091a 	add.w	r9, r4, #26
 800e5fa:	e7f2      	b.n	800e5e2 <_printf_float+0x3ea>
 800e5fc:	2301      	movs	r3, #1
 800e5fe:	4642      	mov	r2, r8
 800e600:	e7df      	b.n	800e5c2 <_printf_float+0x3ca>
 800e602:	2301      	movs	r3, #1
 800e604:	464a      	mov	r2, r9
 800e606:	4631      	mov	r1, r6
 800e608:	4628      	mov	r0, r5
 800e60a:	47b8      	blx	r7
 800e60c:	3001      	adds	r0, #1
 800e60e:	f43f ae3f 	beq.w	800e290 <_printf_float+0x98>
 800e612:	f108 0801 	add.w	r8, r8, #1
 800e616:	68e3      	ldr	r3, [r4, #12]
 800e618:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e61a:	1a5b      	subs	r3, r3, r1
 800e61c:	4543      	cmp	r3, r8
 800e61e:	dcf0      	bgt.n	800e602 <_printf_float+0x40a>
 800e620:	e6f9      	b.n	800e416 <_printf_float+0x21e>
 800e622:	f04f 0800 	mov.w	r8, #0
 800e626:	f104 0919 	add.w	r9, r4, #25
 800e62a:	e7f4      	b.n	800e616 <_printf_float+0x41e>

0800e62c <_printf_common>:
 800e62c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e630:	4616      	mov	r6, r2
 800e632:	4699      	mov	r9, r3
 800e634:	688a      	ldr	r2, [r1, #8]
 800e636:	690b      	ldr	r3, [r1, #16]
 800e638:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e63c:	4293      	cmp	r3, r2
 800e63e:	bfb8      	it	lt
 800e640:	4613      	movlt	r3, r2
 800e642:	6033      	str	r3, [r6, #0]
 800e644:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e648:	4607      	mov	r7, r0
 800e64a:	460c      	mov	r4, r1
 800e64c:	b10a      	cbz	r2, 800e652 <_printf_common+0x26>
 800e64e:	3301      	adds	r3, #1
 800e650:	6033      	str	r3, [r6, #0]
 800e652:	6823      	ldr	r3, [r4, #0]
 800e654:	0699      	lsls	r1, r3, #26
 800e656:	bf42      	ittt	mi
 800e658:	6833      	ldrmi	r3, [r6, #0]
 800e65a:	3302      	addmi	r3, #2
 800e65c:	6033      	strmi	r3, [r6, #0]
 800e65e:	6825      	ldr	r5, [r4, #0]
 800e660:	f015 0506 	ands.w	r5, r5, #6
 800e664:	d106      	bne.n	800e674 <_printf_common+0x48>
 800e666:	f104 0a19 	add.w	sl, r4, #25
 800e66a:	68e3      	ldr	r3, [r4, #12]
 800e66c:	6832      	ldr	r2, [r6, #0]
 800e66e:	1a9b      	subs	r3, r3, r2
 800e670:	42ab      	cmp	r3, r5
 800e672:	dc26      	bgt.n	800e6c2 <_printf_common+0x96>
 800e674:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e678:	1e13      	subs	r3, r2, #0
 800e67a:	6822      	ldr	r2, [r4, #0]
 800e67c:	bf18      	it	ne
 800e67e:	2301      	movne	r3, #1
 800e680:	0692      	lsls	r2, r2, #26
 800e682:	d42b      	bmi.n	800e6dc <_printf_common+0xb0>
 800e684:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e688:	4649      	mov	r1, r9
 800e68a:	4638      	mov	r0, r7
 800e68c:	47c0      	blx	r8
 800e68e:	3001      	adds	r0, #1
 800e690:	d01e      	beq.n	800e6d0 <_printf_common+0xa4>
 800e692:	6823      	ldr	r3, [r4, #0]
 800e694:	6922      	ldr	r2, [r4, #16]
 800e696:	f003 0306 	and.w	r3, r3, #6
 800e69a:	2b04      	cmp	r3, #4
 800e69c:	bf02      	ittt	eq
 800e69e:	68e5      	ldreq	r5, [r4, #12]
 800e6a0:	6833      	ldreq	r3, [r6, #0]
 800e6a2:	1aed      	subeq	r5, r5, r3
 800e6a4:	68a3      	ldr	r3, [r4, #8]
 800e6a6:	bf0c      	ite	eq
 800e6a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e6ac:	2500      	movne	r5, #0
 800e6ae:	4293      	cmp	r3, r2
 800e6b0:	bfc4      	itt	gt
 800e6b2:	1a9b      	subgt	r3, r3, r2
 800e6b4:	18ed      	addgt	r5, r5, r3
 800e6b6:	2600      	movs	r6, #0
 800e6b8:	341a      	adds	r4, #26
 800e6ba:	42b5      	cmp	r5, r6
 800e6bc:	d11a      	bne.n	800e6f4 <_printf_common+0xc8>
 800e6be:	2000      	movs	r0, #0
 800e6c0:	e008      	b.n	800e6d4 <_printf_common+0xa8>
 800e6c2:	2301      	movs	r3, #1
 800e6c4:	4652      	mov	r2, sl
 800e6c6:	4649      	mov	r1, r9
 800e6c8:	4638      	mov	r0, r7
 800e6ca:	47c0      	blx	r8
 800e6cc:	3001      	adds	r0, #1
 800e6ce:	d103      	bne.n	800e6d8 <_printf_common+0xac>
 800e6d0:	f04f 30ff 	mov.w	r0, #4294967295
 800e6d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6d8:	3501      	adds	r5, #1
 800e6da:	e7c6      	b.n	800e66a <_printf_common+0x3e>
 800e6dc:	18e1      	adds	r1, r4, r3
 800e6de:	1c5a      	adds	r2, r3, #1
 800e6e0:	2030      	movs	r0, #48	; 0x30
 800e6e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e6e6:	4422      	add	r2, r4
 800e6e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e6ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e6f0:	3302      	adds	r3, #2
 800e6f2:	e7c7      	b.n	800e684 <_printf_common+0x58>
 800e6f4:	2301      	movs	r3, #1
 800e6f6:	4622      	mov	r2, r4
 800e6f8:	4649      	mov	r1, r9
 800e6fa:	4638      	mov	r0, r7
 800e6fc:	47c0      	blx	r8
 800e6fe:	3001      	adds	r0, #1
 800e700:	d0e6      	beq.n	800e6d0 <_printf_common+0xa4>
 800e702:	3601      	adds	r6, #1
 800e704:	e7d9      	b.n	800e6ba <_printf_common+0x8e>
	...

0800e708 <_printf_i>:
 800e708:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e70c:	7e0f      	ldrb	r7, [r1, #24]
 800e70e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e710:	2f78      	cmp	r7, #120	; 0x78
 800e712:	4691      	mov	r9, r2
 800e714:	4680      	mov	r8, r0
 800e716:	460c      	mov	r4, r1
 800e718:	469a      	mov	sl, r3
 800e71a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e71e:	d807      	bhi.n	800e730 <_printf_i+0x28>
 800e720:	2f62      	cmp	r7, #98	; 0x62
 800e722:	d80a      	bhi.n	800e73a <_printf_i+0x32>
 800e724:	2f00      	cmp	r7, #0
 800e726:	f000 80d4 	beq.w	800e8d2 <_printf_i+0x1ca>
 800e72a:	2f58      	cmp	r7, #88	; 0x58
 800e72c:	f000 80c0 	beq.w	800e8b0 <_printf_i+0x1a8>
 800e730:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e734:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e738:	e03a      	b.n	800e7b0 <_printf_i+0xa8>
 800e73a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e73e:	2b15      	cmp	r3, #21
 800e740:	d8f6      	bhi.n	800e730 <_printf_i+0x28>
 800e742:	a101      	add	r1, pc, #4	; (adr r1, 800e748 <_printf_i+0x40>)
 800e744:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e748:	0800e7a1 	.word	0x0800e7a1
 800e74c:	0800e7b5 	.word	0x0800e7b5
 800e750:	0800e731 	.word	0x0800e731
 800e754:	0800e731 	.word	0x0800e731
 800e758:	0800e731 	.word	0x0800e731
 800e75c:	0800e731 	.word	0x0800e731
 800e760:	0800e7b5 	.word	0x0800e7b5
 800e764:	0800e731 	.word	0x0800e731
 800e768:	0800e731 	.word	0x0800e731
 800e76c:	0800e731 	.word	0x0800e731
 800e770:	0800e731 	.word	0x0800e731
 800e774:	0800e8b9 	.word	0x0800e8b9
 800e778:	0800e7e1 	.word	0x0800e7e1
 800e77c:	0800e873 	.word	0x0800e873
 800e780:	0800e731 	.word	0x0800e731
 800e784:	0800e731 	.word	0x0800e731
 800e788:	0800e8db 	.word	0x0800e8db
 800e78c:	0800e731 	.word	0x0800e731
 800e790:	0800e7e1 	.word	0x0800e7e1
 800e794:	0800e731 	.word	0x0800e731
 800e798:	0800e731 	.word	0x0800e731
 800e79c:	0800e87b 	.word	0x0800e87b
 800e7a0:	682b      	ldr	r3, [r5, #0]
 800e7a2:	1d1a      	adds	r2, r3, #4
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	602a      	str	r2, [r5, #0]
 800e7a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e7ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e7b0:	2301      	movs	r3, #1
 800e7b2:	e09f      	b.n	800e8f4 <_printf_i+0x1ec>
 800e7b4:	6820      	ldr	r0, [r4, #0]
 800e7b6:	682b      	ldr	r3, [r5, #0]
 800e7b8:	0607      	lsls	r7, r0, #24
 800e7ba:	f103 0104 	add.w	r1, r3, #4
 800e7be:	6029      	str	r1, [r5, #0]
 800e7c0:	d501      	bpl.n	800e7c6 <_printf_i+0xbe>
 800e7c2:	681e      	ldr	r6, [r3, #0]
 800e7c4:	e003      	b.n	800e7ce <_printf_i+0xc6>
 800e7c6:	0646      	lsls	r6, r0, #25
 800e7c8:	d5fb      	bpl.n	800e7c2 <_printf_i+0xba>
 800e7ca:	f9b3 6000 	ldrsh.w	r6, [r3]
 800e7ce:	2e00      	cmp	r6, #0
 800e7d0:	da03      	bge.n	800e7da <_printf_i+0xd2>
 800e7d2:	232d      	movs	r3, #45	; 0x2d
 800e7d4:	4276      	negs	r6, r6
 800e7d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e7da:	485a      	ldr	r0, [pc, #360]	; (800e944 <_printf_i+0x23c>)
 800e7dc:	230a      	movs	r3, #10
 800e7de:	e012      	b.n	800e806 <_printf_i+0xfe>
 800e7e0:	682b      	ldr	r3, [r5, #0]
 800e7e2:	6820      	ldr	r0, [r4, #0]
 800e7e4:	1d19      	adds	r1, r3, #4
 800e7e6:	6029      	str	r1, [r5, #0]
 800e7e8:	0605      	lsls	r5, r0, #24
 800e7ea:	d501      	bpl.n	800e7f0 <_printf_i+0xe8>
 800e7ec:	681e      	ldr	r6, [r3, #0]
 800e7ee:	e002      	b.n	800e7f6 <_printf_i+0xee>
 800e7f0:	0641      	lsls	r1, r0, #25
 800e7f2:	d5fb      	bpl.n	800e7ec <_printf_i+0xe4>
 800e7f4:	881e      	ldrh	r6, [r3, #0]
 800e7f6:	4853      	ldr	r0, [pc, #332]	; (800e944 <_printf_i+0x23c>)
 800e7f8:	2f6f      	cmp	r7, #111	; 0x6f
 800e7fa:	bf0c      	ite	eq
 800e7fc:	2308      	moveq	r3, #8
 800e7fe:	230a      	movne	r3, #10
 800e800:	2100      	movs	r1, #0
 800e802:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e806:	6865      	ldr	r5, [r4, #4]
 800e808:	60a5      	str	r5, [r4, #8]
 800e80a:	2d00      	cmp	r5, #0
 800e80c:	bfa2      	ittt	ge
 800e80e:	6821      	ldrge	r1, [r4, #0]
 800e810:	f021 0104 	bicge.w	r1, r1, #4
 800e814:	6021      	strge	r1, [r4, #0]
 800e816:	b90e      	cbnz	r6, 800e81c <_printf_i+0x114>
 800e818:	2d00      	cmp	r5, #0
 800e81a:	d04b      	beq.n	800e8b4 <_printf_i+0x1ac>
 800e81c:	4615      	mov	r5, r2
 800e81e:	fbb6 f1f3 	udiv	r1, r6, r3
 800e822:	fb03 6711 	mls	r7, r3, r1, r6
 800e826:	5dc7      	ldrb	r7, [r0, r7]
 800e828:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e82c:	4637      	mov	r7, r6
 800e82e:	42bb      	cmp	r3, r7
 800e830:	460e      	mov	r6, r1
 800e832:	d9f4      	bls.n	800e81e <_printf_i+0x116>
 800e834:	2b08      	cmp	r3, #8
 800e836:	d10b      	bne.n	800e850 <_printf_i+0x148>
 800e838:	6823      	ldr	r3, [r4, #0]
 800e83a:	07de      	lsls	r6, r3, #31
 800e83c:	d508      	bpl.n	800e850 <_printf_i+0x148>
 800e83e:	6923      	ldr	r3, [r4, #16]
 800e840:	6861      	ldr	r1, [r4, #4]
 800e842:	4299      	cmp	r1, r3
 800e844:	bfde      	ittt	le
 800e846:	2330      	movle	r3, #48	; 0x30
 800e848:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e84c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e850:	1b52      	subs	r2, r2, r5
 800e852:	6122      	str	r2, [r4, #16]
 800e854:	f8cd a000 	str.w	sl, [sp]
 800e858:	464b      	mov	r3, r9
 800e85a:	aa03      	add	r2, sp, #12
 800e85c:	4621      	mov	r1, r4
 800e85e:	4640      	mov	r0, r8
 800e860:	f7ff fee4 	bl	800e62c <_printf_common>
 800e864:	3001      	adds	r0, #1
 800e866:	d14a      	bne.n	800e8fe <_printf_i+0x1f6>
 800e868:	f04f 30ff 	mov.w	r0, #4294967295
 800e86c:	b004      	add	sp, #16
 800e86e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e872:	6823      	ldr	r3, [r4, #0]
 800e874:	f043 0320 	orr.w	r3, r3, #32
 800e878:	6023      	str	r3, [r4, #0]
 800e87a:	4833      	ldr	r0, [pc, #204]	; (800e948 <_printf_i+0x240>)
 800e87c:	2778      	movs	r7, #120	; 0x78
 800e87e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e882:	6823      	ldr	r3, [r4, #0]
 800e884:	6829      	ldr	r1, [r5, #0]
 800e886:	061f      	lsls	r7, r3, #24
 800e888:	f851 6b04 	ldr.w	r6, [r1], #4
 800e88c:	d402      	bmi.n	800e894 <_printf_i+0x18c>
 800e88e:	065f      	lsls	r7, r3, #25
 800e890:	bf48      	it	mi
 800e892:	b2b6      	uxthmi	r6, r6
 800e894:	07df      	lsls	r7, r3, #31
 800e896:	bf48      	it	mi
 800e898:	f043 0320 	orrmi.w	r3, r3, #32
 800e89c:	6029      	str	r1, [r5, #0]
 800e89e:	bf48      	it	mi
 800e8a0:	6023      	strmi	r3, [r4, #0]
 800e8a2:	b91e      	cbnz	r6, 800e8ac <_printf_i+0x1a4>
 800e8a4:	6823      	ldr	r3, [r4, #0]
 800e8a6:	f023 0320 	bic.w	r3, r3, #32
 800e8aa:	6023      	str	r3, [r4, #0]
 800e8ac:	2310      	movs	r3, #16
 800e8ae:	e7a7      	b.n	800e800 <_printf_i+0xf8>
 800e8b0:	4824      	ldr	r0, [pc, #144]	; (800e944 <_printf_i+0x23c>)
 800e8b2:	e7e4      	b.n	800e87e <_printf_i+0x176>
 800e8b4:	4615      	mov	r5, r2
 800e8b6:	e7bd      	b.n	800e834 <_printf_i+0x12c>
 800e8b8:	682b      	ldr	r3, [r5, #0]
 800e8ba:	6826      	ldr	r6, [r4, #0]
 800e8bc:	6961      	ldr	r1, [r4, #20]
 800e8be:	1d18      	adds	r0, r3, #4
 800e8c0:	6028      	str	r0, [r5, #0]
 800e8c2:	0635      	lsls	r5, r6, #24
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	d501      	bpl.n	800e8cc <_printf_i+0x1c4>
 800e8c8:	6019      	str	r1, [r3, #0]
 800e8ca:	e002      	b.n	800e8d2 <_printf_i+0x1ca>
 800e8cc:	0670      	lsls	r0, r6, #25
 800e8ce:	d5fb      	bpl.n	800e8c8 <_printf_i+0x1c0>
 800e8d0:	8019      	strh	r1, [r3, #0]
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	6123      	str	r3, [r4, #16]
 800e8d6:	4615      	mov	r5, r2
 800e8d8:	e7bc      	b.n	800e854 <_printf_i+0x14c>
 800e8da:	682b      	ldr	r3, [r5, #0]
 800e8dc:	1d1a      	adds	r2, r3, #4
 800e8de:	602a      	str	r2, [r5, #0]
 800e8e0:	681d      	ldr	r5, [r3, #0]
 800e8e2:	6862      	ldr	r2, [r4, #4]
 800e8e4:	2100      	movs	r1, #0
 800e8e6:	4628      	mov	r0, r5
 800e8e8:	f7f1 fd12 	bl	8000310 <memchr>
 800e8ec:	b108      	cbz	r0, 800e8f2 <_printf_i+0x1ea>
 800e8ee:	1b40      	subs	r0, r0, r5
 800e8f0:	6060      	str	r0, [r4, #4]
 800e8f2:	6863      	ldr	r3, [r4, #4]
 800e8f4:	6123      	str	r3, [r4, #16]
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e8fc:	e7aa      	b.n	800e854 <_printf_i+0x14c>
 800e8fe:	6923      	ldr	r3, [r4, #16]
 800e900:	462a      	mov	r2, r5
 800e902:	4649      	mov	r1, r9
 800e904:	4640      	mov	r0, r8
 800e906:	47d0      	blx	sl
 800e908:	3001      	adds	r0, #1
 800e90a:	d0ad      	beq.n	800e868 <_printf_i+0x160>
 800e90c:	6823      	ldr	r3, [r4, #0]
 800e90e:	079b      	lsls	r3, r3, #30
 800e910:	d413      	bmi.n	800e93a <_printf_i+0x232>
 800e912:	68e0      	ldr	r0, [r4, #12]
 800e914:	9b03      	ldr	r3, [sp, #12]
 800e916:	4298      	cmp	r0, r3
 800e918:	bfb8      	it	lt
 800e91a:	4618      	movlt	r0, r3
 800e91c:	e7a6      	b.n	800e86c <_printf_i+0x164>
 800e91e:	2301      	movs	r3, #1
 800e920:	4632      	mov	r2, r6
 800e922:	4649      	mov	r1, r9
 800e924:	4640      	mov	r0, r8
 800e926:	47d0      	blx	sl
 800e928:	3001      	adds	r0, #1
 800e92a:	d09d      	beq.n	800e868 <_printf_i+0x160>
 800e92c:	3501      	adds	r5, #1
 800e92e:	68e3      	ldr	r3, [r4, #12]
 800e930:	9903      	ldr	r1, [sp, #12]
 800e932:	1a5b      	subs	r3, r3, r1
 800e934:	42ab      	cmp	r3, r5
 800e936:	dcf2      	bgt.n	800e91e <_printf_i+0x216>
 800e938:	e7eb      	b.n	800e912 <_printf_i+0x20a>
 800e93a:	2500      	movs	r5, #0
 800e93c:	f104 0619 	add.w	r6, r4, #25
 800e940:	e7f5      	b.n	800e92e <_printf_i+0x226>
 800e942:	bf00      	nop
 800e944:	0801118c 	.word	0x0801118c
 800e948:	0801119d 	.word	0x0801119d

0800e94c <std>:
 800e94c:	2300      	movs	r3, #0
 800e94e:	b510      	push	{r4, lr}
 800e950:	4604      	mov	r4, r0
 800e952:	e9c0 3300 	strd	r3, r3, [r0]
 800e956:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e95a:	6083      	str	r3, [r0, #8]
 800e95c:	8181      	strh	r1, [r0, #12]
 800e95e:	6643      	str	r3, [r0, #100]	; 0x64
 800e960:	81c2      	strh	r2, [r0, #14]
 800e962:	6183      	str	r3, [r0, #24]
 800e964:	4619      	mov	r1, r3
 800e966:	2208      	movs	r2, #8
 800e968:	305c      	adds	r0, #92	; 0x5c
 800e96a:	f000 fa75 	bl	800ee58 <memset>
 800e96e:	4b0d      	ldr	r3, [pc, #52]	; (800e9a4 <std+0x58>)
 800e970:	6263      	str	r3, [r4, #36]	; 0x24
 800e972:	4b0d      	ldr	r3, [pc, #52]	; (800e9a8 <std+0x5c>)
 800e974:	62a3      	str	r3, [r4, #40]	; 0x28
 800e976:	4b0d      	ldr	r3, [pc, #52]	; (800e9ac <std+0x60>)
 800e978:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e97a:	4b0d      	ldr	r3, [pc, #52]	; (800e9b0 <std+0x64>)
 800e97c:	6323      	str	r3, [r4, #48]	; 0x30
 800e97e:	4b0d      	ldr	r3, [pc, #52]	; (800e9b4 <std+0x68>)
 800e980:	6224      	str	r4, [r4, #32]
 800e982:	429c      	cmp	r4, r3
 800e984:	d006      	beq.n	800e994 <std+0x48>
 800e986:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800e98a:	4294      	cmp	r4, r2
 800e98c:	d002      	beq.n	800e994 <std+0x48>
 800e98e:	33d0      	adds	r3, #208	; 0xd0
 800e990:	429c      	cmp	r4, r3
 800e992:	d105      	bne.n	800e9a0 <std+0x54>
 800e994:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e99c:	f000 bb4a 	b.w	800f034 <__retarget_lock_init_recursive>
 800e9a0:	bd10      	pop	{r4, pc}
 800e9a2:	bf00      	nop
 800e9a4:	0800ec55 	.word	0x0800ec55
 800e9a8:	0800ec77 	.word	0x0800ec77
 800e9ac:	0800ecaf 	.word	0x0800ecaf
 800e9b0:	0800ecd3 	.word	0x0800ecd3
 800e9b4:	24003490 	.word	0x24003490

0800e9b8 <stdio_exit_handler>:
 800e9b8:	4a02      	ldr	r2, [pc, #8]	; (800e9c4 <stdio_exit_handler+0xc>)
 800e9ba:	4903      	ldr	r1, [pc, #12]	; (800e9c8 <stdio_exit_handler+0x10>)
 800e9bc:	4803      	ldr	r0, [pc, #12]	; (800e9cc <stdio_exit_handler+0x14>)
 800e9be:	f000 b869 	b.w	800ea94 <_fwalk_sglue>
 800e9c2:	bf00      	nop
 800e9c4:	24000014 	.word	0x24000014
 800e9c8:	08010a55 	.word	0x08010a55
 800e9cc:	24000020 	.word	0x24000020

0800e9d0 <cleanup_stdio>:
 800e9d0:	6841      	ldr	r1, [r0, #4]
 800e9d2:	4b0c      	ldr	r3, [pc, #48]	; (800ea04 <cleanup_stdio+0x34>)
 800e9d4:	4299      	cmp	r1, r3
 800e9d6:	b510      	push	{r4, lr}
 800e9d8:	4604      	mov	r4, r0
 800e9da:	d001      	beq.n	800e9e0 <cleanup_stdio+0x10>
 800e9dc:	f002 f83a 	bl	8010a54 <_fflush_r>
 800e9e0:	68a1      	ldr	r1, [r4, #8]
 800e9e2:	4b09      	ldr	r3, [pc, #36]	; (800ea08 <cleanup_stdio+0x38>)
 800e9e4:	4299      	cmp	r1, r3
 800e9e6:	d002      	beq.n	800e9ee <cleanup_stdio+0x1e>
 800e9e8:	4620      	mov	r0, r4
 800e9ea:	f002 f833 	bl	8010a54 <_fflush_r>
 800e9ee:	68e1      	ldr	r1, [r4, #12]
 800e9f0:	4b06      	ldr	r3, [pc, #24]	; (800ea0c <cleanup_stdio+0x3c>)
 800e9f2:	4299      	cmp	r1, r3
 800e9f4:	d004      	beq.n	800ea00 <cleanup_stdio+0x30>
 800e9f6:	4620      	mov	r0, r4
 800e9f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e9fc:	f002 b82a 	b.w	8010a54 <_fflush_r>
 800ea00:	bd10      	pop	{r4, pc}
 800ea02:	bf00      	nop
 800ea04:	24003490 	.word	0x24003490
 800ea08:	240034f8 	.word	0x240034f8
 800ea0c:	24003560 	.word	0x24003560

0800ea10 <global_stdio_init.part.0>:
 800ea10:	b510      	push	{r4, lr}
 800ea12:	4b0b      	ldr	r3, [pc, #44]	; (800ea40 <global_stdio_init.part.0+0x30>)
 800ea14:	4c0b      	ldr	r4, [pc, #44]	; (800ea44 <global_stdio_init.part.0+0x34>)
 800ea16:	4a0c      	ldr	r2, [pc, #48]	; (800ea48 <global_stdio_init.part.0+0x38>)
 800ea18:	601a      	str	r2, [r3, #0]
 800ea1a:	4620      	mov	r0, r4
 800ea1c:	2200      	movs	r2, #0
 800ea1e:	2104      	movs	r1, #4
 800ea20:	f7ff ff94 	bl	800e94c <std>
 800ea24:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800ea28:	2201      	movs	r2, #1
 800ea2a:	2109      	movs	r1, #9
 800ea2c:	f7ff ff8e 	bl	800e94c <std>
 800ea30:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800ea34:	2202      	movs	r2, #2
 800ea36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea3a:	2112      	movs	r1, #18
 800ea3c:	f7ff bf86 	b.w	800e94c <std>
 800ea40:	240035c8 	.word	0x240035c8
 800ea44:	24003490 	.word	0x24003490
 800ea48:	0800e9b9 	.word	0x0800e9b9

0800ea4c <__sfp_lock_acquire>:
 800ea4c:	4801      	ldr	r0, [pc, #4]	; (800ea54 <__sfp_lock_acquire+0x8>)
 800ea4e:	f000 baf2 	b.w	800f036 <__retarget_lock_acquire_recursive>
 800ea52:	bf00      	nop
 800ea54:	240035d1 	.word	0x240035d1

0800ea58 <__sfp_lock_release>:
 800ea58:	4801      	ldr	r0, [pc, #4]	; (800ea60 <__sfp_lock_release+0x8>)
 800ea5a:	f000 baed 	b.w	800f038 <__retarget_lock_release_recursive>
 800ea5e:	bf00      	nop
 800ea60:	240035d1 	.word	0x240035d1

0800ea64 <__sinit>:
 800ea64:	b510      	push	{r4, lr}
 800ea66:	4604      	mov	r4, r0
 800ea68:	f7ff fff0 	bl	800ea4c <__sfp_lock_acquire>
 800ea6c:	6a23      	ldr	r3, [r4, #32]
 800ea6e:	b11b      	cbz	r3, 800ea78 <__sinit+0x14>
 800ea70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea74:	f7ff bff0 	b.w	800ea58 <__sfp_lock_release>
 800ea78:	4b04      	ldr	r3, [pc, #16]	; (800ea8c <__sinit+0x28>)
 800ea7a:	6223      	str	r3, [r4, #32]
 800ea7c:	4b04      	ldr	r3, [pc, #16]	; (800ea90 <__sinit+0x2c>)
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d1f5      	bne.n	800ea70 <__sinit+0xc>
 800ea84:	f7ff ffc4 	bl	800ea10 <global_stdio_init.part.0>
 800ea88:	e7f2      	b.n	800ea70 <__sinit+0xc>
 800ea8a:	bf00      	nop
 800ea8c:	0800e9d1 	.word	0x0800e9d1
 800ea90:	240035c8 	.word	0x240035c8

0800ea94 <_fwalk_sglue>:
 800ea94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea98:	4607      	mov	r7, r0
 800ea9a:	4688      	mov	r8, r1
 800ea9c:	4614      	mov	r4, r2
 800ea9e:	2600      	movs	r6, #0
 800eaa0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800eaa4:	f1b9 0901 	subs.w	r9, r9, #1
 800eaa8:	d505      	bpl.n	800eab6 <_fwalk_sglue+0x22>
 800eaaa:	6824      	ldr	r4, [r4, #0]
 800eaac:	2c00      	cmp	r4, #0
 800eaae:	d1f7      	bne.n	800eaa0 <_fwalk_sglue+0xc>
 800eab0:	4630      	mov	r0, r6
 800eab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eab6:	89ab      	ldrh	r3, [r5, #12]
 800eab8:	2b01      	cmp	r3, #1
 800eaba:	d907      	bls.n	800eacc <_fwalk_sglue+0x38>
 800eabc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800eac0:	3301      	adds	r3, #1
 800eac2:	d003      	beq.n	800eacc <_fwalk_sglue+0x38>
 800eac4:	4629      	mov	r1, r5
 800eac6:	4638      	mov	r0, r7
 800eac8:	47c0      	blx	r8
 800eaca:	4306      	orrs	r6, r0
 800eacc:	3568      	adds	r5, #104	; 0x68
 800eace:	e7e9      	b.n	800eaa4 <_fwalk_sglue+0x10>

0800ead0 <iprintf>:
 800ead0:	b40f      	push	{r0, r1, r2, r3}
 800ead2:	b507      	push	{r0, r1, r2, lr}
 800ead4:	4906      	ldr	r1, [pc, #24]	; (800eaf0 <iprintf+0x20>)
 800ead6:	ab04      	add	r3, sp, #16
 800ead8:	6808      	ldr	r0, [r1, #0]
 800eada:	f853 2b04 	ldr.w	r2, [r3], #4
 800eade:	6881      	ldr	r1, [r0, #8]
 800eae0:	9301      	str	r3, [sp, #4]
 800eae2:	f001 fe17 	bl	8010714 <_vfiprintf_r>
 800eae6:	b003      	add	sp, #12
 800eae8:	f85d eb04 	ldr.w	lr, [sp], #4
 800eaec:	b004      	add	sp, #16
 800eaee:	4770      	bx	lr
 800eaf0:	2400006c 	.word	0x2400006c

0800eaf4 <_puts_r>:
 800eaf4:	6a03      	ldr	r3, [r0, #32]
 800eaf6:	b570      	push	{r4, r5, r6, lr}
 800eaf8:	6884      	ldr	r4, [r0, #8]
 800eafa:	4605      	mov	r5, r0
 800eafc:	460e      	mov	r6, r1
 800eafe:	b90b      	cbnz	r3, 800eb04 <_puts_r+0x10>
 800eb00:	f7ff ffb0 	bl	800ea64 <__sinit>
 800eb04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eb06:	07db      	lsls	r3, r3, #31
 800eb08:	d405      	bmi.n	800eb16 <_puts_r+0x22>
 800eb0a:	89a3      	ldrh	r3, [r4, #12]
 800eb0c:	0598      	lsls	r0, r3, #22
 800eb0e:	d402      	bmi.n	800eb16 <_puts_r+0x22>
 800eb10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eb12:	f000 fa90 	bl	800f036 <__retarget_lock_acquire_recursive>
 800eb16:	89a3      	ldrh	r3, [r4, #12]
 800eb18:	0719      	lsls	r1, r3, #28
 800eb1a:	d513      	bpl.n	800eb44 <_puts_r+0x50>
 800eb1c:	6923      	ldr	r3, [r4, #16]
 800eb1e:	b18b      	cbz	r3, 800eb44 <_puts_r+0x50>
 800eb20:	3e01      	subs	r6, #1
 800eb22:	68a3      	ldr	r3, [r4, #8]
 800eb24:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800eb28:	3b01      	subs	r3, #1
 800eb2a:	60a3      	str	r3, [r4, #8]
 800eb2c:	b9e9      	cbnz	r1, 800eb6a <_puts_r+0x76>
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	da2e      	bge.n	800eb90 <_puts_r+0x9c>
 800eb32:	4622      	mov	r2, r4
 800eb34:	210a      	movs	r1, #10
 800eb36:	4628      	mov	r0, r5
 800eb38:	f000 f8cf 	bl	800ecda <__swbuf_r>
 800eb3c:	3001      	adds	r0, #1
 800eb3e:	d007      	beq.n	800eb50 <_puts_r+0x5c>
 800eb40:	250a      	movs	r5, #10
 800eb42:	e007      	b.n	800eb54 <_puts_r+0x60>
 800eb44:	4621      	mov	r1, r4
 800eb46:	4628      	mov	r0, r5
 800eb48:	f000 f904 	bl	800ed54 <__swsetup_r>
 800eb4c:	2800      	cmp	r0, #0
 800eb4e:	d0e7      	beq.n	800eb20 <_puts_r+0x2c>
 800eb50:	f04f 35ff 	mov.w	r5, #4294967295
 800eb54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eb56:	07da      	lsls	r2, r3, #31
 800eb58:	d405      	bmi.n	800eb66 <_puts_r+0x72>
 800eb5a:	89a3      	ldrh	r3, [r4, #12]
 800eb5c:	059b      	lsls	r3, r3, #22
 800eb5e:	d402      	bmi.n	800eb66 <_puts_r+0x72>
 800eb60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eb62:	f000 fa69 	bl	800f038 <__retarget_lock_release_recursive>
 800eb66:	4628      	mov	r0, r5
 800eb68:	bd70      	pop	{r4, r5, r6, pc}
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	da04      	bge.n	800eb78 <_puts_r+0x84>
 800eb6e:	69a2      	ldr	r2, [r4, #24]
 800eb70:	429a      	cmp	r2, r3
 800eb72:	dc06      	bgt.n	800eb82 <_puts_r+0x8e>
 800eb74:	290a      	cmp	r1, #10
 800eb76:	d004      	beq.n	800eb82 <_puts_r+0x8e>
 800eb78:	6823      	ldr	r3, [r4, #0]
 800eb7a:	1c5a      	adds	r2, r3, #1
 800eb7c:	6022      	str	r2, [r4, #0]
 800eb7e:	7019      	strb	r1, [r3, #0]
 800eb80:	e7cf      	b.n	800eb22 <_puts_r+0x2e>
 800eb82:	4622      	mov	r2, r4
 800eb84:	4628      	mov	r0, r5
 800eb86:	f000 f8a8 	bl	800ecda <__swbuf_r>
 800eb8a:	3001      	adds	r0, #1
 800eb8c:	d1c9      	bne.n	800eb22 <_puts_r+0x2e>
 800eb8e:	e7df      	b.n	800eb50 <_puts_r+0x5c>
 800eb90:	6823      	ldr	r3, [r4, #0]
 800eb92:	250a      	movs	r5, #10
 800eb94:	1c5a      	adds	r2, r3, #1
 800eb96:	6022      	str	r2, [r4, #0]
 800eb98:	701d      	strb	r5, [r3, #0]
 800eb9a:	e7db      	b.n	800eb54 <_puts_r+0x60>

0800eb9c <puts>:
 800eb9c:	4b02      	ldr	r3, [pc, #8]	; (800eba8 <puts+0xc>)
 800eb9e:	4601      	mov	r1, r0
 800eba0:	6818      	ldr	r0, [r3, #0]
 800eba2:	f7ff bfa7 	b.w	800eaf4 <_puts_r>
 800eba6:	bf00      	nop
 800eba8:	2400006c 	.word	0x2400006c

0800ebac <sniprintf>:
 800ebac:	b40c      	push	{r2, r3}
 800ebae:	b530      	push	{r4, r5, lr}
 800ebb0:	4b17      	ldr	r3, [pc, #92]	; (800ec10 <sniprintf+0x64>)
 800ebb2:	1e0c      	subs	r4, r1, #0
 800ebb4:	681d      	ldr	r5, [r3, #0]
 800ebb6:	b09d      	sub	sp, #116	; 0x74
 800ebb8:	da08      	bge.n	800ebcc <sniprintf+0x20>
 800ebba:	238b      	movs	r3, #139	; 0x8b
 800ebbc:	602b      	str	r3, [r5, #0]
 800ebbe:	f04f 30ff 	mov.w	r0, #4294967295
 800ebc2:	b01d      	add	sp, #116	; 0x74
 800ebc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ebc8:	b002      	add	sp, #8
 800ebca:	4770      	bx	lr
 800ebcc:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ebd0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ebd4:	bf14      	ite	ne
 800ebd6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ebda:	4623      	moveq	r3, r4
 800ebdc:	9304      	str	r3, [sp, #16]
 800ebde:	9307      	str	r3, [sp, #28]
 800ebe0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ebe4:	9002      	str	r0, [sp, #8]
 800ebe6:	9006      	str	r0, [sp, #24]
 800ebe8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ebec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ebee:	ab21      	add	r3, sp, #132	; 0x84
 800ebf0:	a902      	add	r1, sp, #8
 800ebf2:	4628      	mov	r0, r5
 800ebf4:	9301      	str	r3, [sp, #4]
 800ebf6:	f001 fc65 	bl	80104c4 <_svfiprintf_r>
 800ebfa:	1c43      	adds	r3, r0, #1
 800ebfc:	bfbc      	itt	lt
 800ebfe:	238b      	movlt	r3, #139	; 0x8b
 800ec00:	602b      	strlt	r3, [r5, #0]
 800ec02:	2c00      	cmp	r4, #0
 800ec04:	d0dd      	beq.n	800ebc2 <sniprintf+0x16>
 800ec06:	9b02      	ldr	r3, [sp, #8]
 800ec08:	2200      	movs	r2, #0
 800ec0a:	701a      	strb	r2, [r3, #0]
 800ec0c:	e7d9      	b.n	800ebc2 <sniprintf+0x16>
 800ec0e:	bf00      	nop
 800ec10:	2400006c 	.word	0x2400006c

0800ec14 <siprintf>:
 800ec14:	b40e      	push	{r1, r2, r3}
 800ec16:	b500      	push	{lr}
 800ec18:	b09c      	sub	sp, #112	; 0x70
 800ec1a:	ab1d      	add	r3, sp, #116	; 0x74
 800ec1c:	9002      	str	r0, [sp, #8]
 800ec1e:	9006      	str	r0, [sp, #24]
 800ec20:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ec24:	4809      	ldr	r0, [pc, #36]	; (800ec4c <siprintf+0x38>)
 800ec26:	9107      	str	r1, [sp, #28]
 800ec28:	9104      	str	r1, [sp, #16]
 800ec2a:	4909      	ldr	r1, [pc, #36]	; (800ec50 <siprintf+0x3c>)
 800ec2c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec30:	9105      	str	r1, [sp, #20]
 800ec32:	6800      	ldr	r0, [r0, #0]
 800ec34:	9301      	str	r3, [sp, #4]
 800ec36:	a902      	add	r1, sp, #8
 800ec38:	f001 fc44 	bl	80104c4 <_svfiprintf_r>
 800ec3c:	9b02      	ldr	r3, [sp, #8]
 800ec3e:	2200      	movs	r2, #0
 800ec40:	701a      	strb	r2, [r3, #0]
 800ec42:	b01c      	add	sp, #112	; 0x70
 800ec44:	f85d eb04 	ldr.w	lr, [sp], #4
 800ec48:	b003      	add	sp, #12
 800ec4a:	4770      	bx	lr
 800ec4c:	2400006c 	.word	0x2400006c
 800ec50:	ffff0208 	.word	0xffff0208

0800ec54 <__sread>:
 800ec54:	b510      	push	{r4, lr}
 800ec56:	460c      	mov	r4, r1
 800ec58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec5c:	f000 f992 	bl	800ef84 <_read_r>
 800ec60:	2800      	cmp	r0, #0
 800ec62:	bfab      	itete	ge
 800ec64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ec66:	89a3      	ldrhlt	r3, [r4, #12]
 800ec68:	181b      	addge	r3, r3, r0
 800ec6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ec6e:	bfac      	ite	ge
 800ec70:	6563      	strge	r3, [r4, #84]	; 0x54
 800ec72:	81a3      	strhlt	r3, [r4, #12]
 800ec74:	bd10      	pop	{r4, pc}

0800ec76 <__swrite>:
 800ec76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec7a:	461f      	mov	r7, r3
 800ec7c:	898b      	ldrh	r3, [r1, #12]
 800ec7e:	05db      	lsls	r3, r3, #23
 800ec80:	4605      	mov	r5, r0
 800ec82:	460c      	mov	r4, r1
 800ec84:	4616      	mov	r6, r2
 800ec86:	d505      	bpl.n	800ec94 <__swrite+0x1e>
 800ec88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec8c:	2302      	movs	r3, #2
 800ec8e:	2200      	movs	r2, #0
 800ec90:	f000 f966 	bl	800ef60 <_lseek_r>
 800ec94:	89a3      	ldrh	r3, [r4, #12]
 800ec96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ec9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ec9e:	81a3      	strh	r3, [r4, #12]
 800eca0:	4632      	mov	r2, r6
 800eca2:	463b      	mov	r3, r7
 800eca4:	4628      	mov	r0, r5
 800eca6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ecaa:	f000 b98d 	b.w	800efc8 <_write_r>

0800ecae <__sseek>:
 800ecae:	b510      	push	{r4, lr}
 800ecb0:	460c      	mov	r4, r1
 800ecb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ecb6:	f000 f953 	bl	800ef60 <_lseek_r>
 800ecba:	1c43      	adds	r3, r0, #1
 800ecbc:	89a3      	ldrh	r3, [r4, #12]
 800ecbe:	bf15      	itete	ne
 800ecc0:	6560      	strne	r0, [r4, #84]	; 0x54
 800ecc2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ecc6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ecca:	81a3      	strheq	r3, [r4, #12]
 800eccc:	bf18      	it	ne
 800ecce:	81a3      	strhne	r3, [r4, #12]
 800ecd0:	bd10      	pop	{r4, pc}

0800ecd2 <__sclose>:
 800ecd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ecd6:	f000 b8dd 	b.w	800ee94 <_close_r>

0800ecda <__swbuf_r>:
 800ecda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecdc:	460e      	mov	r6, r1
 800ecde:	4614      	mov	r4, r2
 800ece0:	4605      	mov	r5, r0
 800ece2:	b118      	cbz	r0, 800ecec <__swbuf_r+0x12>
 800ece4:	6a03      	ldr	r3, [r0, #32]
 800ece6:	b90b      	cbnz	r3, 800ecec <__swbuf_r+0x12>
 800ece8:	f7ff febc 	bl	800ea64 <__sinit>
 800ecec:	69a3      	ldr	r3, [r4, #24]
 800ecee:	60a3      	str	r3, [r4, #8]
 800ecf0:	89a3      	ldrh	r3, [r4, #12]
 800ecf2:	071a      	lsls	r2, r3, #28
 800ecf4:	d525      	bpl.n	800ed42 <__swbuf_r+0x68>
 800ecf6:	6923      	ldr	r3, [r4, #16]
 800ecf8:	b31b      	cbz	r3, 800ed42 <__swbuf_r+0x68>
 800ecfa:	6823      	ldr	r3, [r4, #0]
 800ecfc:	6922      	ldr	r2, [r4, #16]
 800ecfe:	1a98      	subs	r0, r3, r2
 800ed00:	6963      	ldr	r3, [r4, #20]
 800ed02:	b2f6      	uxtb	r6, r6
 800ed04:	4283      	cmp	r3, r0
 800ed06:	4637      	mov	r7, r6
 800ed08:	dc04      	bgt.n	800ed14 <__swbuf_r+0x3a>
 800ed0a:	4621      	mov	r1, r4
 800ed0c:	4628      	mov	r0, r5
 800ed0e:	f001 fea1 	bl	8010a54 <_fflush_r>
 800ed12:	b9e0      	cbnz	r0, 800ed4e <__swbuf_r+0x74>
 800ed14:	68a3      	ldr	r3, [r4, #8]
 800ed16:	3b01      	subs	r3, #1
 800ed18:	60a3      	str	r3, [r4, #8]
 800ed1a:	6823      	ldr	r3, [r4, #0]
 800ed1c:	1c5a      	adds	r2, r3, #1
 800ed1e:	6022      	str	r2, [r4, #0]
 800ed20:	701e      	strb	r6, [r3, #0]
 800ed22:	6962      	ldr	r2, [r4, #20]
 800ed24:	1c43      	adds	r3, r0, #1
 800ed26:	429a      	cmp	r2, r3
 800ed28:	d004      	beq.n	800ed34 <__swbuf_r+0x5a>
 800ed2a:	89a3      	ldrh	r3, [r4, #12]
 800ed2c:	07db      	lsls	r3, r3, #31
 800ed2e:	d506      	bpl.n	800ed3e <__swbuf_r+0x64>
 800ed30:	2e0a      	cmp	r6, #10
 800ed32:	d104      	bne.n	800ed3e <__swbuf_r+0x64>
 800ed34:	4621      	mov	r1, r4
 800ed36:	4628      	mov	r0, r5
 800ed38:	f001 fe8c 	bl	8010a54 <_fflush_r>
 800ed3c:	b938      	cbnz	r0, 800ed4e <__swbuf_r+0x74>
 800ed3e:	4638      	mov	r0, r7
 800ed40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed42:	4621      	mov	r1, r4
 800ed44:	4628      	mov	r0, r5
 800ed46:	f000 f805 	bl	800ed54 <__swsetup_r>
 800ed4a:	2800      	cmp	r0, #0
 800ed4c:	d0d5      	beq.n	800ecfa <__swbuf_r+0x20>
 800ed4e:	f04f 37ff 	mov.w	r7, #4294967295
 800ed52:	e7f4      	b.n	800ed3e <__swbuf_r+0x64>

0800ed54 <__swsetup_r>:
 800ed54:	b538      	push	{r3, r4, r5, lr}
 800ed56:	4b2a      	ldr	r3, [pc, #168]	; (800ee00 <__swsetup_r+0xac>)
 800ed58:	4605      	mov	r5, r0
 800ed5a:	6818      	ldr	r0, [r3, #0]
 800ed5c:	460c      	mov	r4, r1
 800ed5e:	b118      	cbz	r0, 800ed68 <__swsetup_r+0x14>
 800ed60:	6a03      	ldr	r3, [r0, #32]
 800ed62:	b90b      	cbnz	r3, 800ed68 <__swsetup_r+0x14>
 800ed64:	f7ff fe7e 	bl	800ea64 <__sinit>
 800ed68:	89a3      	ldrh	r3, [r4, #12]
 800ed6a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ed6e:	0718      	lsls	r0, r3, #28
 800ed70:	d422      	bmi.n	800edb8 <__swsetup_r+0x64>
 800ed72:	06d9      	lsls	r1, r3, #27
 800ed74:	d407      	bmi.n	800ed86 <__swsetup_r+0x32>
 800ed76:	2309      	movs	r3, #9
 800ed78:	602b      	str	r3, [r5, #0]
 800ed7a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ed7e:	81a3      	strh	r3, [r4, #12]
 800ed80:	f04f 30ff 	mov.w	r0, #4294967295
 800ed84:	e034      	b.n	800edf0 <__swsetup_r+0x9c>
 800ed86:	0758      	lsls	r0, r3, #29
 800ed88:	d512      	bpl.n	800edb0 <__swsetup_r+0x5c>
 800ed8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ed8c:	b141      	cbz	r1, 800eda0 <__swsetup_r+0x4c>
 800ed8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ed92:	4299      	cmp	r1, r3
 800ed94:	d002      	beq.n	800ed9c <__swsetup_r+0x48>
 800ed96:	4628      	mov	r0, r5
 800ed98:	f000 ff72 	bl	800fc80 <_free_r>
 800ed9c:	2300      	movs	r3, #0
 800ed9e:	6363      	str	r3, [r4, #52]	; 0x34
 800eda0:	89a3      	ldrh	r3, [r4, #12]
 800eda2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800eda6:	81a3      	strh	r3, [r4, #12]
 800eda8:	2300      	movs	r3, #0
 800edaa:	6063      	str	r3, [r4, #4]
 800edac:	6923      	ldr	r3, [r4, #16]
 800edae:	6023      	str	r3, [r4, #0]
 800edb0:	89a3      	ldrh	r3, [r4, #12]
 800edb2:	f043 0308 	orr.w	r3, r3, #8
 800edb6:	81a3      	strh	r3, [r4, #12]
 800edb8:	6923      	ldr	r3, [r4, #16]
 800edba:	b94b      	cbnz	r3, 800edd0 <__swsetup_r+0x7c>
 800edbc:	89a3      	ldrh	r3, [r4, #12]
 800edbe:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800edc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800edc6:	d003      	beq.n	800edd0 <__swsetup_r+0x7c>
 800edc8:	4621      	mov	r1, r4
 800edca:	4628      	mov	r0, r5
 800edcc:	f001 fea2 	bl	8010b14 <__smakebuf_r>
 800edd0:	89a0      	ldrh	r0, [r4, #12]
 800edd2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800edd6:	f010 0301 	ands.w	r3, r0, #1
 800edda:	d00a      	beq.n	800edf2 <__swsetup_r+0x9e>
 800eddc:	2300      	movs	r3, #0
 800edde:	60a3      	str	r3, [r4, #8]
 800ede0:	6963      	ldr	r3, [r4, #20]
 800ede2:	425b      	negs	r3, r3
 800ede4:	61a3      	str	r3, [r4, #24]
 800ede6:	6923      	ldr	r3, [r4, #16]
 800ede8:	b943      	cbnz	r3, 800edfc <__swsetup_r+0xa8>
 800edea:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800edee:	d1c4      	bne.n	800ed7a <__swsetup_r+0x26>
 800edf0:	bd38      	pop	{r3, r4, r5, pc}
 800edf2:	0781      	lsls	r1, r0, #30
 800edf4:	bf58      	it	pl
 800edf6:	6963      	ldrpl	r3, [r4, #20]
 800edf8:	60a3      	str	r3, [r4, #8]
 800edfa:	e7f4      	b.n	800ede6 <__swsetup_r+0x92>
 800edfc:	2000      	movs	r0, #0
 800edfe:	e7f7      	b.n	800edf0 <__swsetup_r+0x9c>
 800ee00:	2400006c 	.word	0x2400006c

0800ee04 <memcmp>:
 800ee04:	b510      	push	{r4, lr}
 800ee06:	3901      	subs	r1, #1
 800ee08:	4402      	add	r2, r0
 800ee0a:	4290      	cmp	r0, r2
 800ee0c:	d101      	bne.n	800ee12 <memcmp+0xe>
 800ee0e:	2000      	movs	r0, #0
 800ee10:	e005      	b.n	800ee1e <memcmp+0x1a>
 800ee12:	7803      	ldrb	r3, [r0, #0]
 800ee14:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ee18:	42a3      	cmp	r3, r4
 800ee1a:	d001      	beq.n	800ee20 <memcmp+0x1c>
 800ee1c:	1b18      	subs	r0, r3, r4
 800ee1e:	bd10      	pop	{r4, pc}
 800ee20:	3001      	adds	r0, #1
 800ee22:	e7f2      	b.n	800ee0a <memcmp+0x6>

0800ee24 <memmove>:
 800ee24:	4288      	cmp	r0, r1
 800ee26:	b510      	push	{r4, lr}
 800ee28:	eb01 0402 	add.w	r4, r1, r2
 800ee2c:	d902      	bls.n	800ee34 <memmove+0x10>
 800ee2e:	4284      	cmp	r4, r0
 800ee30:	4623      	mov	r3, r4
 800ee32:	d807      	bhi.n	800ee44 <memmove+0x20>
 800ee34:	1e43      	subs	r3, r0, #1
 800ee36:	42a1      	cmp	r1, r4
 800ee38:	d008      	beq.n	800ee4c <memmove+0x28>
 800ee3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ee3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ee42:	e7f8      	b.n	800ee36 <memmove+0x12>
 800ee44:	4402      	add	r2, r0
 800ee46:	4601      	mov	r1, r0
 800ee48:	428a      	cmp	r2, r1
 800ee4a:	d100      	bne.n	800ee4e <memmove+0x2a>
 800ee4c:	bd10      	pop	{r4, pc}
 800ee4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ee52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ee56:	e7f7      	b.n	800ee48 <memmove+0x24>

0800ee58 <memset>:
 800ee58:	4402      	add	r2, r0
 800ee5a:	4603      	mov	r3, r0
 800ee5c:	4293      	cmp	r3, r2
 800ee5e:	d100      	bne.n	800ee62 <memset+0xa>
 800ee60:	4770      	bx	lr
 800ee62:	f803 1b01 	strb.w	r1, [r3], #1
 800ee66:	e7f9      	b.n	800ee5c <memset+0x4>

0800ee68 <strncmp>:
 800ee68:	b510      	push	{r4, lr}
 800ee6a:	b16a      	cbz	r2, 800ee88 <strncmp+0x20>
 800ee6c:	3901      	subs	r1, #1
 800ee6e:	1884      	adds	r4, r0, r2
 800ee70:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ee74:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ee78:	429a      	cmp	r2, r3
 800ee7a:	d103      	bne.n	800ee84 <strncmp+0x1c>
 800ee7c:	42a0      	cmp	r0, r4
 800ee7e:	d001      	beq.n	800ee84 <strncmp+0x1c>
 800ee80:	2a00      	cmp	r2, #0
 800ee82:	d1f5      	bne.n	800ee70 <strncmp+0x8>
 800ee84:	1ad0      	subs	r0, r2, r3
 800ee86:	bd10      	pop	{r4, pc}
 800ee88:	4610      	mov	r0, r2
 800ee8a:	e7fc      	b.n	800ee86 <strncmp+0x1e>

0800ee8c <_localeconv_r>:
 800ee8c:	4800      	ldr	r0, [pc, #0]	; (800ee90 <_localeconv_r+0x4>)
 800ee8e:	4770      	bx	lr
 800ee90:	24000160 	.word	0x24000160

0800ee94 <_close_r>:
 800ee94:	b538      	push	{r3, r4, r5, lr}
 800ee96:	4d06      	ldr	r5, [pc, #24]	; (800eeb0 <_close_r+0x1c>)
 800ee98:	2300      	movs	r3, #0
 800ee9a:	4604      	mov	r4, r0
 800ee9c:	4608      	mov	r0, r1
 800ee9e:	602b      	str	r3, [r5, #0]
 800eea0:	f7f2 fe19 	bl	8001ad6 <_close>
 800eea4:	1c43      	adds	r3, r0, #1
 800eea6:	d102      	bne.n	800eeae <_close_r+0x1a>
 800eea8:	682b      	ldr	r3, [r5, #0]
 800eeaa:	b103      	cbz	r3, 800eeae <_close_r+0x1a>
 800eeac:	6023      	str	r3, [r4, #0]
 800eeae:	bd38      	pop	{r3, r4, r5, pc}
 800eeb0:	240035cc 	.word	0x240035cc

0800eeb4 <_reclaim_reent>:
 800eeb4:	4b29      	ldr	r3, [pc, #164]	; (800ef5c <_reclaim_reent+0xa8>)
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	4283      	cmp	r3, r0
 800eeba:	b570      	push	{r4, r5, r6, lr}
 800eebc:	4604      	mov	r4, r0
 800eebe:	d04b      	beq.n	800ef58 <_reclaim_reent+0xa4>
 800eec0:	69c3      	ldr	r3, [r0, #28]
 800eec2:	b143      	cbz	r3, 800eed6 <_reclaim_reent+0x22>
 800eec4:	68db      	ldr	r3, [r3, #12]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d144      	bne.n	800ef54 <_reclaim_reent+0xa0>
 800eeca:	69e3      	ldr	r3, [r4, #28]
 800eecc:	6819      	ldr	r1, [r3, #0]
 800eece:	b111      	cbz	r1, 800eed6 <_reclaim_reent+0x22>
 800eed0:	4620      	mov	r0, r4
 800eed2:	f000 fed5 	bl	800fc80 <_free_r>
 800eed6:	6961      	ldr	r1, [r4, #20]
 800eed8:	b111      	cbz	r1, 800eee0 <_reclaim_reent+0x2c>
 800eeda:	4620      	mov	r0, r4
 800eedc:	f000 fed0 	bl	800fc80 <_free_r>
 800eee0:	69e1      	ldr	r1, [r4, #28]
 800eee2:	b111      	cbz	r1, 800eeea <_reclaim_reent+0x36>
 800eee4:	4620      	mov	r0, r4
 800eee6:	f000 fecb 	bl	800fc80 <_free_r>
 800eeea:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800eeec:	b111      	cbz	r1, 800eef4 <_reclaim_reent+0x40>
 800eeee:	4620      	mov	r0, r4
 800eef0:	f000 fec6 	bl	800fc80 <_free_r>
 800eef4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eef6:	b111      	cbz	r1, 800eefe <_reclaim_reent+0x4a>
 800eef8:	4620      	mov	r0, r4
 800eefa:	f000 fec1 	bl	800fc80 <_free_r>
 800eefe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ef00:	b111      	cbz	r1, 800ef08 <_reclaim_reent+0x54>
 800ef02:	4620      	mov	r0, r4
 800ef04:	f000 febc 	bl	800fc80 <_free_r>
 800ef08:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ef0a:	b111      	cbz	r1, 800ef12 <_reclaim_reent+0x5e>
 800ef0c:	4620      	mov	r0, r4
 800ef0e:	f000 feb7 	bl	800fc80 <_free_r>
 800ef12:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800ef14:	b111      	cbz	r1, 800ef1c <_reclaim_reent+0x68>
 800ef16:	4620      	mov	r0, r4
 800ef18:	f000 feb2 	bl	800fc80 <_free_r>
 800ef1c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800ef1e:	b111      	cbz	r1, 800ef26 <_reclaim_reent+0x72>
 800ef20:	4620      	mov	r0, r4
 800ef22:	f000 fead 	bl	800fc80 <_free_r>
 800ef26:	6a23      	ldr	r3, [r4, #32]
 800ef28:	b1b3      	cbz	r3, 800ef58 <_reclaim_reent+0xa4>
 800ef2a:	4620      	mov	r0, r4
 800ef2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ef30:	4718      	bx	r3
 800ef32:	5949      	ldr	r1, [r1, r5]
 800ef34:	b941      	cbnz	r1, 800ef48 <_reclaim_reent+0x94>
 800ef36:	3504      	adds	r5, #4
 800ef38:	69e3      	ldr	r3, [r4, #28]
 800ef3a:	2d80      	cmp	r5, #128	; 0x80
 800ef3c:	68d9      	ldr	r1, [r3, #12]
 800ef3e:	d1f8      	bne.n	800ef32 <_reclaim_reent+0x7e>
 800ef40:	4620      	mov	r0, r4
 800ef42:	f000 fe9d 	bl	800fc80 <_free_r>
 800ef46:	e7c0      	b.n	800eeca <_reclaim_reent+0x16>
 800ef48:	680e      	ldr	r6, [r1, #0]
 800ef4a:	4620      	mov	r0, r4
 800ef4c:	f000 fe98 	bl	800fc80 <_free_r>
 800ef50:	4631      	mov	r1, r6
 800ef52:	e7ef      	b.n	800ef34 <_reclaim_reent+0x80>
 800ef54:	2500      	movs	r5, #0
 800ef56:	e7ef      	b.n	800ef38 <_reclaim_reent+0x84>
 800ef58:	bd70      	pop	{r4, r5, r6, pc}
 800ef5a:	bf00      	nop
 800ef5c:	2400006c 	.word	0x2400006c

0800ef60 <_lseek_r>:
 800ef60:	b538      	push	{r3, r4, r5, lr}
 800ef62:	4d07      	ldr	r5, [pc, #28]	; (800ef80 <_lseek_r+0x20>)
 800ef64:	4604      	mov	r4, r0
 800ef66:	4608      	mov	r0, r1
 800ef68:	4611      	mov	r1, r2
 800ef6a:	2200      	movs	r2, #0
 800ef6c:	602a      	str	r2, [r5, #0]
 800ef6e:	461a      	mov	r2, r3
 800ef70:	f7f2 fdd8 	bl	8001b24 <_lseek>
 800ef74:	1c43      	adds	r3, r0, #1
 800ef76:	d102      	bne.n	800ef7e <_lseek_r+0x1e>
 800ef78:	682b      	ldr	r3, [r5, #0]
 800ef7a:	b103      	cbz	r3, 800ef7e <_lseek_r+0x1e>
 800ef7c:	6023      	str	r3, [r4, #0]
 800ef7e:	bd38      	pop	{r3, r4, r5, pc}
 800ef80:	240035cc 	.word	0x240035cc

0800ef84 <_read_r>:
 800ef84:	b538      	push	{r3, r4, r5, lr}
 800ef86:	4d07      	ldr	r5, [pc, #28]	; (800efa4 <_read_r+0x20>)
 800ef88:	4604      	mov	r4, r0
 800ef8a:	4608      	mov	r0, r1
 800ef8c:	4611      	mov	r1, r2
 800ef8e:	2200      	movs	r2, #0
 800ef90:	602a      	str	r2, [r5, #0]
 800ef92:	461a      	mov	r2, r3
 800ef94:	f7f2 fd66 	bl	8001a64 <_read>
 800ef98:	1c43      	adds	r3, r0, #1
 800ef9a:	d102      	bne.n	800efa2 <_read_r+0x1e>
 800ef9c:	682b      	ldr	r3, [r5, #0]
 800ef9e:	b103      	cbz	r3, 800efa2 <_read_r+0x1e>
 800efa0:	6023      	str	r3, [r4, #0]
 800efa2:	bd38      	pop	{r3, r4, r5, pc}
 800efa4:	240035cc 	.word	0x240035cc

0800efa8 <_sbrk_r>:
 800efa8:	b538      	push	{r3, r4, r5, lr}
 800efaa:	4d06      	ldr	r5, [pc, #24]	; (800efc4 <_sbrk_r+0x1c>)
 800efac:	2300      	movs	r3, #0
 800efae:	4604      	mov	r4, r0
 800efb0:	4608      	mov	r0, r1
 800efb2:	602b      	str	r3, [r5, #0]
 800efb4:	f7f2 fdc4 	bl	8001b40 <_sbrk>
 800efb8:	1c43      	adds	r3, r0, #1
 800efba:	d102      	bne.n	800efc2 <_sbrk_r+0x1a>
 800efbc:	682b      	ldr	r3, [r5, #0]
 800efbe:	b103      	cbz	r3, 800efc2 <_sbrk_r+0x1a>
 800efc0:	6023      	str	r3, [r4, #0]
 800efc2:	bd38      	pop	{r3, r4, r5, pc}
 800efc4:	240035cc 	.word	0x240035cc

0800efc8 <_write_r>:
 800efc8:	b538      	push	{r3, r4, r5, lr}
 800efca:	4d07      	ldr	r5, [pc, #28]	; (800efe8 <_write_r+0x20>)
 800efcc:	4604      	mov	r4, r0
 800efce:	4608      	mov	r0, r1
 800efd0:	4611      	mov	r1, r2
 800efd2:	2200      	movs	r2, #0
 800efd4:	602a      	str	r2, [r5, #0]
 800efd6:	461a      	mov	r2, r3
 800efd8:	f7f2 fd61 	bl	8001a9e <_write>
 800efdc:	1c43      	adds	r3, r0, #1
 800efde:	d102      	bne.n	800efe6 <_write_r+0x1e>
 800efe0:	682b      	ldr	r3, [r5, #0]
 800efe2:	b103      	cbz	r3, 800efe6 <_write_r+0x1e>
 800efe4:	6023      	str	r3, [r4, #0]
 800efe6:	bd38      	pop	{r3, r4, r5, pc}
 800efe8:	240035cc 	.word	0x240035cc

0800efec <__libc_init_array>:
 800efec:	b570      	push	{r4, r5, r6, lr}
 800efee:	4d0d      	ldr	r5, [pc, #52]	; (800f024 <__libc_init_array+0x38>)
 800eff0:	4c0d      	ldr	r4, [pc, #52]	; (800f028 <__libc_init_array+0x3c>)
 800eff2:	1b64      	subs	r4, r4, r5
 800eff4:	10a4      	asrs	r4, r4, #2
 800eff6:	2600      	movs	r6, #0
 800eff8:	42a6      	cmp	r6, r4
 800effa:	d109      	bne.n	800f010 <__libc_init_array+0x24>
 800effc:	4d0b      	ldr	r5, [pc, #44]	; (800f02c <__libc_init_array+0x40>)
 800effe:	4c0c      	ldr	r4, [pc, #48]	; (800f030 <__libc_init_array+0x44>)
 800f000:	f001 fe9e 	bl	8010d40 <_init>
 800f004:	1b64      	subs	r4, r4, r5
 800f006:	10a4      	asrs	r4, r4, #2
 800f008:	2600      	movs	r6, #0
 800f00a:	42a6      	cmp	r6, r4
 800f00c:	d105      	bne.n	800f01a <__libc_init_array+0x2e>
 800f00e:	bd70      	pop	{r4, r5, r6, pc}
 800f010:	f855 3b04 	ldr.w	r3, [r5], #4
 800f014:	4798      	blx	r3
 800f016:	3601      	adds	r6, #1
 800f018:	e7ee      	b.n	800eff8 <__libc_init_array+0xc>
 800f01a:	f855 3b04 	ldr.w	r3, [r5], #4
 800f01e:	4798      	blx	r3
 800f020:	3601      	adds	r6, #1
 800f022:	e7f2      	b.n	800f00a <__libc_init_array+0x1e>
 800f024:	080113f0 	.word	0x080113f0
 800f028:	080113f0 	.word	0x080113f0
 800f02c:	080113f0 	.word	0x080113f0
 800f030:	080113f4 	.word	0x080113f4

0800f034 <__retarget_lock_init_recursive>:
 800f034:	4770      	bx	lr

0800f036 <__retarget_lock_acquire_recursive>:
 800f036:	4770      	bx	lr

0800f038 <__retarget_lock_release_recursive>:
 800f038:	4770      	bx	lr

0800f03a <memcpy>:
 800f03a:	440a      	add	r2, r1
 800f03c:	4291      	cmp	r1, r2
 800f03e:	f100 33ff 	add.w	r3, r0, #4294967295
 800f042:	d100      	bne.n	800f046 <memcpy+0xc>
 800f044:	4770      	bx	lr
 800f046:	b510      	push	{r4, lr}
 800f048:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f04c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f050:	4291      	cmp	r1, r2
 800f052:	d1f9      	bne.n	800f048 <memcpy+0xe>
 800f054:	bd10      	pop	{r4, pc}
	...

0800f058 <__assert_func>:
 800f058:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f05a:	4614      	mov	r4, r2
 800f05c:	461a      	mov	r2, r3
 800f05e:	4b09      	ldr	r3, [pc, #36]	; (800f084 <__assert_func+0x2c>)
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	4605      	mov	r5, r0
 800f064:	68d8      	ldr	r0, [r3, #12]
 800f066:	b14c      	cbz	r4, 800f07c <__assert_func+0x24>
 800f068:	4b07      	ldr	r3, [pc, #28]	; (800f088 <__assert_func+0x30>)
 800f06a:	9100      	str	r1, [sp, #0]
 800f06c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f070:	4906      	ldr	r1, [pc, #24]	; (800f08c <__assert_func+0x34>)
 800f072:	462b      	mov	r3, r5
 800f074:	f001 fd16 	bl	8010aa4 <fiprintf>
 800f078:	f001 fdaa 	bl	8010bd0 <abort>
 800f07c:	4b04      	ldr	r3, [pc, #16]	; (800f090 <__assert_func+0x38>)
 800f07e:	461c      	mov	r4, r3
 800f080:	e7f3      	b.n	800f06a <__assert_func+0x12>
 800f082:	bf00      	nop
 800f084:	2400006c 	.word	0x2400006c
 800f088:	080111ae 	.word	0x080111ae
 800f08c:	080111bb 	.word	0x080111bb
 800f090:	080111e9 	.word	0x080111e9

0800f094 <quorem>:
 800f094:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f098:	6903      	ldr	r3, [r0, #16]
 800f09a:	690c      	ldr	r4, [r1, #16]
 800f09c:	42a3      	cmp	r3, r4
 800f09e:	4607      	mov	r7, r0
 800f0a0:	db7e      	blt.n	800f1a0 <quorem+0x10c>
 800f0a2:	3c01      	subs	r4, #1
 800f0a4:	f101 0814 	add.w	r8, r1, #20
 800f0a8:	f100 0514 	add.w	r5, r0, #20
 800f0ac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f0b0:	9301      	str	r3, [sp, #4]
 800f0b2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f0b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f0ba:	3301      	adds	r3, #1
 800f0bc:	429a      	cmp	r2, r3
 800f0be:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f0c2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f0c6:	fbb2 f6f3 	udiv	r6, r2, r3
 800f0ca:	d331      	bcc.n	800f130 <quorem+0x9c>
 800f0cc:	f04f 0e00 	mov.w	lr, #0
 800f0d0:	4640      	mov	r0, r8
 800f0d2:	46ac      	mov	ip, r5
 800f0d4:	46f2      	mov	sl, lr
 800f0d6:	f850 2b04 	ldr.w	r2, [r0], #4
 800f0da:	b293      	uxth	r3, r2
 800f0dc:	fb06 e303 	mla	r3, r6, r3, lr
 800f0e0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f0e4:	0c1a      	lsrs	r2, r3, #16
 800f0e6:	b29b      	uxth	r3, r3
 800f0e8:	ebaa 0303 	sub.w	r3, sl, r3
 800f0ec:	f8dc a000 	ldr.w	sl, [ip]
 800f0f0:	fa13 f38a 	uxtah	r3, r3, sl
 800f0f4:	fb06 220e 	mla	r2, r6, lr, r2
 800f0f8:	9300      	str	r3, [sp, #0]
 800f0fa:	9b00      	ldr	r3, [sp, #0]
 800f0fc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f100:	b292      	uxth	r2, r2
 800f102:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f106:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f10a:	f8bd 3000 	ldrh.w	r3, [sp]
 800f10e:	4581      	cmp	r9, r0
 800f110:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f114:	f84c 3b04 	str.w	r3, [ip], #4
 800f118:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f11c:	d2db      	bcs.n	800f0d6 <quorem+0x42>
 800f11e:	f855 300b 	ldr.w	r3, [r5, fp]
 800f122:	b92b      	cbnz	r3, 800f130 <quorem+0x9c>
 800f124:	9b01      	ldr	r3, [sp, #4]
 800f126:	3b04      	subs	r3, #4
 800f128:	429d      	cmp	r5, r3
 800f12a:	461a      	mov	r2, r3
 800f12c:	d32c      	bcc.n	800f188 <quorem+0xf4>
 800f12e:	613c      	str	r4, [r7, #16]
 800f130:	4638      	mov	r0, r7
 800f132:	f001 f86d 	bl	8010210 <__mcmp>
 800f136:	2800      	cmp	r0, #0
 800f138:	db22      	blt.n	800f180 <quorem+0xec>
 800f13a:	3601      	adds	r6, #1
 800f13c:	4629      	mov	r1, r5
 800f13e:	2000      	movs	r0, #0
 800f140:	f858 2b04 	ldr.w	r2, [r8], #4
 800f144:	f8d1 c000 	ldr.w	ip, [r1]
 800f148:	b293      	uxth	r3, r2
 800f14a:	1ac3      	subs	r3, r0, r3
 800f14c:	0c12      	lsrs	r2, r2, #16
 800f14e:	fa13 f38c 	uxtah	r3, r3, ip
 800f152:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800f156:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f15a:	b29b      	uxth	r3, r3
 800f15c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f160:	45c1      	cmp	r9, r8
 800f162:	f841 3b04 	str.w	r3, [r1], #4
 800f166:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f16a:	d2e9      	bcs.n	800f140 <quorem+0xac>
 800f16c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f170:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f174:	b922      	cbnz	r2, 800f180 <quorem+0xec>
 800f176:	3b04      	subs	r3, #4
 800f178:	429d      	cmp	r5, r3
 800f17a:	461a      	mov	r2, r3
 800f17c:	d30a      	bcc.n	800f194 <quorem+0x100>
 800f17e:	613c      	str	r4, [r7, #16]
 800f180:	4630      	mov	r0, r6
 800f182:	b003      	add	sp, #12
 800f184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f188:	6812      	ldr	r2, [r2, #0]
 800f18a:	3b04      	subs	r3, #4
 800f18c:	2a00      	cmp	r2, #0
 800f18e:	d1ce      	bne.n	800f12e <quorem+0x9a>
 800f190:	3c01      	subs	r4, #1
 800f192:	e7c9      	b.n	800f128 <quorem+0x94>
 800f194:	6812      	ldr	r2, [r2, #0]
 800f196:	3b04      	subs	r3, #4
 800f198:	2a00      	cmp	r2, #0
 800f19a:	d1f0      	bne.n	800f17e <quorem+0xea>
 800f19c:	3c01      	subs	r4, #1
 800f19e:	e7eb      	b.n	800f178 <quorem+0xe4>
 800f1a0:	2000      	movs	r0, #0
 800f1a2:	e7ee      	b.n	800f182 <quorem+0xee>
 800f1a4:	0000      	movs	r0, r0
	...

0800f1a8 <_dtoa_r>:
 800f1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1ac:	ed2d 8b02 	vpush	{d8}
 800f1b0:	69c5      	ldr	r5, [r0, #28]
 800f1b2:	b091      	sub	sp, #68	; 0x44
 800f1b4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f1b8:	ec59 8b10 	vmov	r8, r9, d0
 800f1bc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800f1be:	9106      	str	r1, [sp, #24]
 800f1c0:	4606      	mov	r6, r0
 800f1c2:	9208      	str	r2, [sp, #32]
 800f1c4:	930c      	str	r3, [sp, #48]	; 0x30
 800f1c6:	b975      	cbnz	r5, 800f1e6 <_dtoa_r+0x3e>
 800f1c8:	2010      	movs	r0, #16
 800f1ca:	f7fe fec9 	bl	800df60 <malloc>
 800f1ce:	4602      	mov	r2, r0
 800f1d0:	61f0      	str	r0, [r6, #28]
 800f1d2:	b920      	cbnz	r0, 800f1de <_dtoa_r+0x36>
 800f1d4:	4ba6      	ldr	r3, [pc, #664]	; (800f470 <_dtoa_r+0x2c8>)
 800f1d6:	21ef      	movs	r1, #239	; 0xef
 800f1d8:	48a6      	ldr	r0, [pc, #664]	; (800f474 <_dtoa_r+0x2cc>)
 800f1da:	f7ff ff3d 	bl	800f058 <__assert_func>
 800f1de:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f1e2:	6005      	str	r5, [r0, #0]
 800f1e4:	60c5      	str	r5, [r0, #12]
 800f1e6:	69f3      	ldr	r3, [r6, #28]
 800f1e8:	6819      	ldr	r1, [r3, #0]
 800f1ea:	b151      	cbz	r1, 800f202 <_dtoa_r+0x5a>
 800f1ec:	685a      	ldr	r2, [r3, #4]
 800f1ee:	604a      	str	r2, [r1, #4]
 800f1f0:	2301      	movs	r3, #1
 800f1f2:	4093      	lsls	r3, r2
 800f1f4:	608b      	str	r3, [r1, #8]
 800f1f6:	4630      	mov	r0, r6
 800f1f8:	f000 fdce 	bl	800fd98 <_Bfree>
 800f1fc:	69f3      	ldr	r3, [r6, #28]
 800f1fe:	2200      	movs	r2, #0
 800f200:	601a      	str	r2, [r3, #0]
 800f202:	f1b9 0300 	subs.w	r3, r9, #0
 800f206:	bfbb      	ittet	lt
 800f208:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f20c:	9303      	strlt	r3, [sp, #12]
 800f20e:	2300      	movge	r3, #0
 800f210:	2201      	movlt	r2, #1
 800f212:	bfac      	ite	ge
 800f214:	6023      	strge	r3, [r4, #0]
 800f216:	6022      	strlt	r2, [r4, #0]
 800f218:	4b97      	ldr	r3, [pc, #604]	; (800f478 <_dtoa_r+0x2d0>)
 800f21a:	9c03      	ldr	r4, [sp, #12]
 800f21c:	43a3      	bics	r3, r4
 800f21e:	d11c      	bne.n	800f25a <_dtoa_r+0xb2>
 800f220:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f222:	f242 730f 	movw	r3, #9999	; 0x270f
 800f226:	6013      	str	r3, [r2, #0]
 800f228:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800f22c:	ea53 0308 	orrs.w	r3, r3, r8
 800f230:	f000 84fb 	beq.w	800fc2a <_dtoa_r+0xa82>
 800f234:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f236:	b963      	cbnz	r3, 800f252 <_dtoa_r+0xaa>
 800f238:	4b90      	ldr	r3, [pc, #576]	; (800f47c <_dtoa_r+0x2d4>)
 800f23a:	e020      	b.n	800f27e <_dtoa_r+0xd6>
 800f23c:	4b90      	ldr	r3, [pc, #576]	; (800f480 <_dtoa_r+0x2d8>)
 800f23e:	9301      	str	r3, [sp, #4]
 800f240:	3308      	adds	r3, #8
 800f242:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800f244:	6013      	str	r3, [r2, #0]
 800f246:	9801      	ldr	r0, [sp, #4]
 800f248:	b011      	add	sp, #68	; 0x44
 800f24a:	ecbd 8b02 	vpop	{d8}
 800f24e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f252:	4b8a      	ldr	r3, [pc, #552]	; (800f47c <_dtoa_r+0x2d4>)
 800f254:	9301      	str	r3, [sp, #4]
 800f256:	3303      	adds	r3, #3
 800f258:	e7f3      	b.n	800f242 <_dtoa_r+0x9a>
 800f25a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800f25e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f266:	d10c      	bne.n	800f282 <_dtoa_r+0xda>
 800f268:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f26a:	2301      	movs	r3, #1
 800f26c:	6013      	str	r3, [r2, #0]
 800f26e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f270:	2b00      	cmp	r3, #0
 800f272:	f000 84d7 	beq.w	800fc24 <_dtoa_r+0xa7c>
 800f276:	4b83      	ldr	r3, [pc, #524]	; (800f484 <_dtoa_r+0x2dc>)
 800f278:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800f27a:	6013      	str	r3, [r2, #0]
 800f27c:	3b01      	subs	r3, #1
 800f27e:	9301      	str	r3, [sp, #4]
 800f280:	e7e1      	b.n	800f246 <_dtoa_r+0x9e>
 800f282:	aa0e      	add	r2, sp, #56	; 0x38
 800f284:	a90f      	add	r1, sp, #60	; 0x3c
 800f286:	4630      	mov	r0, r6
 800f288:	eeb0 0b48 	vmov.f64	d0, d8
 800f28c:	f001 f866 	bl	801035c <__d2b>
 800f290:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800f294:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f296:	4605      	mov	r5, r0
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d046      	beq.n	800f32a <_dtoa_r+0x182>
 800f29c:	eeb0 7b48 	vmov.f64	d7, d8
 800f2a0:	ee18 1a90 	vmov	r1, s17
 800f2a4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800f2a8:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800f2ac:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800f2b0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800f2b4:	2000      	movs	r0, #0
 800f2b6:	ee07 1a90 	vmov	s15, r1
 800f2ba:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 800f2be:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800f458 <_dtoa_r+0x2b0>
 800f2c2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f2c6:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800f460 <_dtoa_r+0x2b8>
 800f2ca:	eea7 6b05 	vfma.f64	d6, d7, d5
 800f2ce:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800f468 <_dtoa_r+0x2c0>
 800f2d2:	ee07 3a90 	vmov	s15, r3
 800f2d6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800f2da:	eeb0 7b46 	vmov.f64	d7, d6
 800f2de:	eea4 7b05 	vfma.f64	d7, d4, d5
 800f2e2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800f2e6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800f2ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2ee:	ee16 ba90 	vmov	fp, s13
 800f2f2:	9009      	str	r0, [sp, #36]	; 0x24
 800f2f4:	d508      	bpl.n	800f308 <_dtoa_r+0x160>
 800f2f6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800f2fa:	eeb4 6b47 	vcmp.f64	d6, d7
 800f2fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f302:	bf18      	it	ne
 800f304:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800f308:	f1bb 0f16 	cmp.w	fp, #22
 800f30c:	d82b      	bhi.n	800f366 <_dtoa_r+0x1be>
 800f30e:	495e      	ldr	r1, [pc, #376]	; (800f488 <_dtoa_r+0x2e0>)
 800f310:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800f314:	ed91 7b00 	vldr	d7, [r1]
 800f318:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800f31c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f320:	d501      	bpl.n	800f326 <_dtoa_r+0x17e>
 800f322:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f326:	2100      	movs	r1, #0
 800f328:	e01e      	b.n	800f368 <_dtoa_r+0x1c0>
 800f32a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f32c:	4413      	add	r3, r2
 800f32e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 800f332:	2920      	cmp	r1, #32
 800f334:	bfc1      	itttt	gt
 800f336:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800f33a:	408c      	lslgt	r4, r1
 800f33c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 800f340:	fa28 f101 	lsrgt.w	r1, r8, r1
 800f344:	bfd6      	itet	le
 800f346:	f1c1 0120 	rsble	r1, r1, #32
 800f34a:	4321      	orrgt	r1, r4
 800f34c:	fa08 f101 	lslle.w	r1, r8, r1
 800f350:	ee07 1a90 	vmov	s15, r1
 800f354:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800f358:	3b01      	subs	r3, #1
 800f35a:	ee17 1a90 	vmov	r1, s15
 800f35e:	2001      	movs	r0, #1
 800f360:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800f364:	e7a7      	b.n	800f2b6 <_dtoa_r+0x10e>
 800f366:	2101      	movs	r1, #1
 800f368:	1ad2      	subs	r2, r2, r3
 800f36a:	1e53      	subs	r3, r2, #1
 800f36c:	9305      	str	r3, [sp, #20]
 800f36e:	bf45      	ittet	mi
 800f370:	f1c2 0301 	rsbmi	r3, r2, #1
 800f374:	9304      	strmi	r3, [sp, #16]
 800f376:	2300      	movpl	r3, #0
 800f378:	2300      	movmi	r3, #0
 800f37a:	bf4c      	ite	mi
 800f37c:	9305      	strmi	r3, [sp, #20]
 800f37e:	9304      	strpl	r3, [sp, #16]
 800f380:	f1bb 0f00 	cmp.w	fp, #0
 800f384:	910b      	str	r1, [sp, #44]	; 0x2c
 800f386:	db18      	blt.n	800f3ba <_dtoa_r+0x212>
 800f388:	9b05      	ldr	r3, [sp, #20]
 800f38a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800f38e:	445b      	add	r3, fp
 800f390:	9305      	str	r3, [sp, #20]
 800f392:	2300      	movs	r3, #0
 800f394:	9a06      	ldr	r2, [sp, #24]
 800f396:	2a09      	cmp	r2, #9
 800f398:	d848      	bhi.n	800f42c <_dtoa_r+0x284>
 800f39a:	2a05      	cmp	r2, #5
 800f39c:	bfc4      	itt	gt
 800f39e:	3a04      	subgt	r2, #4
 800f3a0:	9206      	strgt	r2, [sp, #24]
 800f3a2:	9a06      	ldr	r2, [sp, #24]
 800f3a4:	f1a2 0202 	sub.w	r2, r2, #2
 800f3a8:	bfcc      	ite	gt
 800f3aa:	2400      	movgt	r4, #0
 800f3ac:	2401      	movle	r4, #1
 800f3ae:	2a03      	cmp	r2, #3
 800f3b0:	d847      	bhi.n	800f442 <_dtoa_r+0x29a>
 800f3b2:	e8df f002 	tbb	[pc, r2]
 800f3b6:	2d0b      	.short	0x2d0b
 800f3b8:	392b      	.short	0x392b
 800f3ba:	9b04      	ldr	r3, [sp, #16]
 800f3bc:	2200      	movs	r2, #0
 800f3be:	eba3 030b 	sub.w	r3, r3, fp
 800f3c2:	9304      	str	r3, [sp, #16]
 800f3c4:	920a      	str	r2, [sp, #40]	; 0x28
 800f3c6:	f1cb 0300 	rsb	r3, fp, #0
 800f3ca:	e7e3      	b.n	800f394 <_dtoa_r+0x1ec>
 800f3cc:	2200      	movs	r2, #0
 800f3ce:	9207      	str	r2, [sp, #28]
 800f3d0:	9a08      	ldr	r2, [sp, #32]
 800f3d2:	2a00      	cmp	r2, #0
 800f3d4:	dc38      	bgt.n	800f448 <_dtoa_r+0x2a0>
 800f3d6:	f04f 0a01 	mov.w	sl, #1
 800f3da:	46d1      	mov	r9, sl
 800f3dc:	4652      	mov	r2, sl
 800f3de:	f8cd a020 	str.w	sl, [sp, #32]
 800f3e2:	69f7      	ldr	r7, [r6, #28]
 800f3e4:	2100      	movs	r1, #0
 800f3e6:	2004      	movs	r0, #4
 800f3e8:	f100 0c14 	add.w	ip, r0, #20
 800f3ec:	4594      	cmp	ip, r2
 800f3ee:	d930      	bls.n	800f452 <_dtoa_r+0x2aa>
 800f3f0:	6079      	str	r1, [r7, #4]
 800f3f2:	4630      	mov	r0, r6
 800f3f4:	930d      	str	r3, [sp, #52]	; 0x34
 800f3f6:	f000 fc8f 	bl	800fd18 <_Balloc>
 800f3fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f3fc:	9001      	str	r0, [sp, #4]
 800f3fe:	4602      	mov	r2, r0
 800f400:	2800      	cmp	r0, #0
 800f402:	d145      	bne.n	800f490 <_dtoa_r+0x2e8>
 800f404:	4b21      	ldr	r3, [pc, #132]	; (800f48c <_dtoa_r+0x2e4>)
 800f406:	f240 11af 	movw	r1, #431	; 0x1af
 800f40a:	e6e5      	b.n	800f1d8 <_dtoa_r+0x30>
 800f40c:	2201      	movs	r2, #1
 800f40e:	e7de      	b.n	800f3ce <_dtoa_r+0x226>
 800f410:	2200      	movs	r2, #0
 800f412:	9207      	str	r2, [sp, #28]
 800f414:	9a08      	ldr	r2, [sp, #32]
 800f416:	eb0b 0a02 	add.w	sl, fp, r2
 800f41a:	f10a 0901 	add.w	r9, sl, #1
 800f41e:	464a      	mov	r2, r9
 800f420:	2a01      	cmp	r2, #1
 800f422:	bfb8      	it	lt
 800f424:	2201      	movlt	r2, #1
 800f426:	e7dc      	b.n	800f3e2 <_dtoa_r+0x23a>
 800f428:	2201      	movs	r2, #1
 800f42a:	e7f2      	b.n	800f412 <_dtoa_r+0x26a>
 800f42c:	2401      	movs	r4, #1
 800f42e:	2200      	movs	r2, #0
 800f430:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800f434:	f04f 3aff 	mov.w	sl, #4294967295
 800f438:	2100      	movs	r1, #0
 800f43a:	46d1      	mov	r9, sl
 800f43c:	2212      	movs	r2, #18
 800f43e:	9108      	str	r1, [sp, #32]
 800f440:	e7cf      	b.n	800f3e2 <_dtoa_r+0x23a>
 800f442:	2201      	movs	r2, #1
 800f444:	9207      	str	r2, [sp, #28]
 800f446:	e7f5      	b.n	800f434 <_dtoa_r+0x28c>
 800f448:	f8dd a020 	ldr.w	sl, [sp, #32]
 800f44c:	46d1      	mov	r9, sl
 800f44e:	4652      	mov	r2, sl
 800f450:	e7c7      	b.n	800f3e2 <_dtoa_r+0x23a>
 800f452:	3101      	adds	r1, #1
 800f454:	0040      	lsls	r0, r0, #1
 800f456:	e7c7      	b.n	800f3e8 <_dtoa_r+0x240>
 800f458:	636f4361 	.word	0x636f4361
 800f45c:	3fd287a7 	.word	0x3fd287a7
 800f460:	8b60c8b3 	.word	0x8b60c8b3
 800f464:	3fc68a28 	.word	0x3fc68a28
 800f468:	509f79fb 	.word	0x509f79fb
 800f46c:	3fd34413 	.word	0x3fd34413
 800f470:	080111f7 	.word	0x080111f7
 800f474:	0801120e 	.word	0x0801120e
 800f478:	7ff00000 	.word	0x7ff00000
 800f47c:	080111f3 	.word	0x080111f3
 800f480:	080111ea 	.word	0x080111ea
 800f484:	0801118b 	.word	0x0801118b
 800f488:	080112f8 	.word	0x080112f8
 800f48c:	08011266 	.word	0x08011266
 800f490:	69f2      	ldr	r2, [r6, #28]
 800f492:	9901      	ldr	r1, [sp, #4]
 800f494:	6011      	str	r1, [r2, #0]
 800f496:	f1b9 0f0e 	cmp.w	r9, #14
 800f49a:	d86c      	bhi.n	800f576 <_dtoa_r+0x3ce>
 800f49c:	2c00      	cmp	r4, #0
 800f49e:	d06a      	beq.n	800f576 <_dtoa_r+0x3ce>
 800f4a0:	f1bb 0f00 	cmp.w	fp, #0
 800f4a4:	f340 80a0 	ble.w	800f5e8 <_dtoa_r+0x440>
 800f4a8:	4ac1      	ldr	r2, [pc, #772]	; (800f7b0 <_dtoa_r+0x608>)
 800f4aa:	f00b 010f 	and.w	r1, fp, #15
 800f4ae:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800f4b2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800f4b6:	ed92 7b00 	vldr	d7, [r2]
 800f4ba:	ea4f 122b 	mov.w	r2, fp, asr #4
 800f4be:	f000 8087 	beq.w	800f5d0 <_dtoa_r+0x428>
 800f4c2:	49bc      	ldr	r1, [pc, #752]	; (800f7b4 <_dtoa_r+0x60c>)
 800f4c4:	ed91 6b08 	vldr	d6, [r1, #32]
 800f4c8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800f4cc:	ed8d 6b02 	vstr	d6, [sp, #8]
 800f4d0:	f002 020f 	and.w	r2, r2, #15
 800f4d4:	2103      	movs	r1, #3
 800f4d6:	48b7      	ldr	r0, [pc, #732]	; (800f7b4 <_dtoa_r+0x60c>)
 800f4d8:	2a00      	cmp	r2, #0
 800f4da:	d17b      	bne.n	800f5d4 <_dtoa_r+0x42c>
 800f4dc:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f4e0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f4e4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f4e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f4ea:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f4ee:	2a00      	cmp	r2, #0
 800f4f0:	f000 80a0 	beq.w	800f634 <_dtoa_r+0x48c>
 800f4f4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800f4f8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f4fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f500:	f140 8098 	bpl.w	800f634 <_dtoa_r+0x48c>
 800f504:	f1b9 0f00 	cmp.w	r9, #0
 800f508:	f000 8094 	beq.w	800f634 <_dtoa_r+0x48c>
 800f50c:	f1ba 0f00 	cmp.w	sl, #0
 800f510:	dd2f      	ble.n	800f572 <_dtoa_r+0x3ca>
 800f512:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800f516:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f51a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f51e:	f10b 32ff 	add.w	r2, fp, #4294967295
 800f522:	3101      	adds	r1, #1
 800f524:	4654      	mov	r4, sl
 800f526:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f52a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800f52e:	ee07 1a90 	vmov	s15, r1
 800f532:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f536:	eea7 5b06 	vfma.f64	d5, d7, d6
 800f53a:	ee15 7a90 	vmov	r7, s11
 800f53e:	ec51 0b15 	vmov	r0, r1, d5
 800f542:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 800f546:	2c00      	cmp	r4, #0
 800f548:	d177      	bne.n	800f63a <_dtoa_r+0x492>
 800f54a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800f54e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800f552:	ec41 0b17 	vmov	d7, r0, r1
 800f556:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f55a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f55e:	f300 826a 	bgt.w	800fa36 <_dtoa_r+0x88e>
 800f562:	eeb1 7b47 	vneg.f64	d7, d7
 800f566:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f56a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f56e:	f100 8260 	bmi.w	800fa32 <_dtoa_r+0x88a>
 800f572:	ed8d 8b02 	vstr	d8, [sp, #8]
 800f576:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f578:	2a00      	cmp	r2, #0
 800f57a:	f2c0 811d 	blt.w	800f7b8 <_dtoa_r+0x610>
 800f57e:	f1bb 0f0e 	cmp.w	fp, #14
 800f582:	f300 8119 	bgt.w	800f7b8 <_dtoa_r+0x610>
 800f586:	4b8a      	ldr	r3, [pc, #552]	; (800f7b0 <_dtoa_r+0x608>)
 800f588:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f58c:	ed93 6b00 	vldr	d6, [r3]
 800f590:	9b08      	ldr	r3, [sp, #32]
 800f592:	2b00      	cmp	r3, #0
 800f594:	f280 80b7 	bge.w	800f706 <_dtoa_r+0x55e>
 800f598:	f1b9 0f00 	cmp.w	r9, #0
 800f59c:	f300 80b3 	bgt.w	800f706 <_dtoa_r+0x55e>
 800f5a0:	f040 8246 	bne.w	800fa30 <_dtoa_r+0x888>
 800f5a4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800f5a8:	ee26 6b07 	vmul.f64	d6, d6, d7
 800f5ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f5b0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f5b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5b8:	464c      	mov	r4, r9
 800f5ba:	464f      	mov	r7, r9
 800f5bc:	f280 821c 	bge.w	800f9f8 <_dtoa_r+0x850>
 800f5c0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f5c4:	2331      	movs	r3, #49	; 0x31
 800f5c6:	f808 3b01 	strb.w	r3, [r8], #1
 800f5ca:	f10b 0b01 	add.w	fp, fp, #1
 800f5ce:	e218      	b.n	800fa02 <_dtoa_r+0x85a>
 800f5d0:	2102      	movs	r1, #2
 800f5d2:	e780      	b.n	800f4d6 <_dtoa_r+0x32e>
 800f5d4:	07d4      	lsls	r4, r2, #31
 800f5d6:	d504      	bpl.n	800f5e2 <_dtoa_r+0x43a>
 800f5d8:	ed90 6b00 	vldr	d6, [r0]
 800f5dc:	3101      	adds	r1, #1
 800f5de:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f5e2:	1052      	asrs	r2, r2, #1
 800f5e4:	3008      	adds	r0, #8
 800f5e6:	e777      	b.n	800f4d8 <_dtoa_r+0x330>
 800f5e8:	d022      	beq.n	800f630 <_dtoa_r+0x488>
 800f5ea:	f1cb 0200 	rsb	r2, fp, #0
 800f5ee:	4970      	ldr	r1, [pc, #448]	; (800f7b0 <_dtoa_r+0x608>)
 800f5f0:	f002 000f 	and.w	r0, r2, #15
 800f5f4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800f5f8:	ed91 7b00 	vldr	d7, [r1]
 800f5fc:	ee28 7b07 	vmul.f64	d7, d8, d7
 800f600:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f604:	486b      	ldr	r0, [pc, #428]	; (800f7b4 <_dtoa_r+0x60c>)
 800f606:	1112      	asrs	r2, r2, #4
 800f608:	2400      	movs	r4, #0
 800f60a:	2102      	movs	r1, #2
 800f60c:	b92a      	cbnz	r2, 800f61a <_dtoa_r+0x472>
 800f60e:	2c00      	cmp	r4, #0
 800f610:	f43f af6a 	beq.w	800f4e8 <_dtoa_r+0x340>
 800f614:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f618:	e766      	b.n	800f4e8 <_dtoa_r+0x340>
 800f61a:	07d7      	lsls	r7, r2, #31
 800f61c:	d505      	bpl.n	800f62a <_dtoa_r+0x482>
 800f61e:	ed90 6b00 	vldr	d6, [r0]
 800f622:	3101      	adds	r1, #1
 800f624:	2401      	movs	r4, #1
 800f626:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f62a:	1052      	asrs	r2, r2, #1
 800f62c:	3008      	adds	r0, #8
 800f62e:	e7ed      	b.n	800f60c <_dtoa_r+0x464>
 800f630:	2102      	movs	r1, #2
 800f632:	e759      	b.n	800f4e8 <_dtoa_r+0x340>
 800f634:	465a      	mov	r2, fp
 800f636:	464c      	mov	r4, r9
 800f638:	e775      	b.n	800f526 <_dtoa_r+0x37e>
 800f63a:	ec41 0b17 	vmov	d7, r0, r1
 800f63e:	495c      	ldr	r1, [pc, #368]	; (800f7b0 <_dtoa_r+0x608>)
 800f640:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800f644:	ed11 4b02 	vldr	d4, [r1, #-8]
 800f648:	9901      	ldr	r1, [sp, #4]
 800f64a:	440c      	add	r4, r1
 800f64c:	9907      	ldr	r1, [sp, #28]
 800f64e:	b351      	cbz	r1, 800f6a6 <_dtoa_r+0x4fe>
 800f650:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800f654:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800f658:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f65c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800f660:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800f664:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f668:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f66c:	ee14 1a90 	vmov	r1, s9
 800f670:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f674:	3130      	adds	r1, #48	; 0x30
 800f676:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f67a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f67e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f682:	f808 1b01 	strb.w	r1, [r8], #1
 800f686:	d439      	bmi.n	800f6fc <_dtoa_r+0x554>
 800f688:	ee32 5b46 	vsub.f64	d5, d2, d6
 800f68c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800f690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f694:	d472      	bmi.n	800f77c <_dtoa_r+0x5d4>
 800f696:	45a0      	cmp	r8, r4
 800f698:	f43f af6b 	beq.w	800f572 <_dtoa_r+0x3ca>
 800f69c:	ee27 7b03 	vmul.f64	d7, d7, d3
 800f6a0:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f6a4:	e7e0      	b.n	800f668 <_dtoa_r+0x4c0>
 800f6a6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f6aa:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f6ae:	4620      	mov	r0, r4
 800f6b0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800f6b4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f6b8:	ee14 1a90 	vmov	r1, s9
 800f6bc:	3130      	adds	r1, #48	; 0x30
 800f6be:	f808 1b01 	strb.w	r1, [r8], #1
 800f6c2:	45a0      	cmp	r8, r4
 800f6c4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f6c8:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f6cc:	d118      	bne.n	800f700 <_dtoa_r+0x558>
 800f6ce:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800f6d2:	ee37 4b05 	vadd.f64	d4, d7, d5
 800f6d6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800f6da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6de:	dc4d      	bgt.n	800f77c <_dtoa_r+0x5d4>
 800f6e0:	ee35 5b47 	vsub.f64	d5, d5, d7
 800f6e4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800f6e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6ec:	f57f af41 	bpl.w	800f572 <_dtoa_r+0x3ca>
 800f6f0:	4680      	mov	r8, r0
 800f6f2:	3801      	subs	r0, #1
 800f6f4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800f6f8:	2b30      	cmp	r3, #48	; 0x30
 800f6fa:	d0f9      	beq.n	800f6f0 <_dtoa_r+0x548>
 800f6fc:	4693      	mov	fp, r2
 800f6fe:	e02a      	b.n	800f756 <_dtoa_r+0x5ae>
 800f700:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f704:	e7d6      	b.n	800f6b4 <_dtoa_r+0x50c>
 800f706:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f70a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800f70e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f712:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800f716:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800f71a:	ee15 3a10 	vmov	r3, s10
 800f71e:	3330      	adds	r3, #48	; 0x30
 800f720:	f808 3b01 	strb.w	r3, [r8], #1
 800f724:	9b01      	ldr	r3, [sp, #4]
 800f726:	eba8 0303 	sub.w	r3, r8, r3
 800f72a:	4599      	cmp	r9, r3
 800f72c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800f730:	eea3 7b46 	vfms.f64	d7, d3, d6
 800f734:	d133      	bne.n	800f79e <_dtoa_r+0x5f6>
 800f736:	ee37 7b07 	vadd.f64	d7, d7, d7
 800f73a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f73e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f742:	dc1a      	bgt.n	800f77a <_dtoa_r+0x5d2>
 800f744:	eeb4 7b46 	vcmp.f64	d7, d6
 800f748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f74c:	d103      	bne.n	800f756 <_dtoa_r+0x5ae>
 800f74e:	ee15 3a10 	vmov	r3, s10
 800f752:	07d9      	lsls	r1, r3, #31
 800f754:	d411      	bmi.n	800f77a <_dtoa_r+0x5d2>
 800f756:	4629      	mov	r1, r5
 800f758:	4630      	mov	r0, r6
 800f75a:	f000 fb1d 	bl	800fd98 <_Bfree>
 800f75e:	2300      	movs	r3, #0
 800f760:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f762:	f888 3000 	strb.w	r3, [r8]
 800f766:	f10b 0301 	add.w	r3, fp, #1
 800f76a:	6013      	str	r3, [r2, #0]
 800f76c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f76e:	2b00      	cmp	r3, #0
 800f770:	f43f ad69 	beq.w	800f246 <_dtoa_r+0x9e>
 800f774:	f8c3 8000 	str.w	r8, [r3]
 800f778:	e565      	b.n	800f246 <_dtoa_r+0x9e>
 800f77a:	465a      	mov	r2, fp
 800f77c:	4643      	mov	r3, r8
 800f77e:	4698      	mov	r8, r3
 800f780:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800f784:	2939      	cmp	r1, #57	; 0x39
 800f786:	d106      	bne.n	800f796 <_dtoa_r+0x5ee>
 800f788:	9901      	ldr	r1, [sp, #4]
 800f78a:	4299      	cmp	r1, r3
 800f78c:	d1f7      	bne.n	800f77e <_dtoa_r+0x5d6>
 800f78e:	9801      	ldr	r0, [sp, #4]
 800f790:	2130      	movs	r1, #48	; 0x30
 800f792:	3201      	adds	r2, #1
 800f794:	7001      	strb	r1, [r0, #0]
 800f796:	7819      	ldrb	r1, [r3, #0]
 800f798:	3101      	adds	r1, #1
 800f79a:	7019      	strb	r1, [r3, #0]
 800f79c:	e7ae      	b.n	800f6fc <_dtoa_r+0x554>
 800f79e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f7a2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f7a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7aa:	d1b2      	bne.n	800f712 <_dtoa_r+0x56a>
 800f7ac:	e7d3      	b.n	800f756 <_dtoa_r+0x5ae>
 800f7ae:	bf00      	nop
 800f7b0:	080112f8 	.word	0x080112f8
 800f7b4:	080112d0 	.word	0x080112d0
 800f7b8:	9907      	ldr	r1, [sp, #28]
 800f7ba:	2900      	cmp	r1, #0
 800f7bc:	f000 80d0 	beq.w	800f960 <_dtoa_r+0x7b8>
 800f7c0:	9906      	ldr	r1, [sp, #24]
 800f7c2:	2901      	cmp	r1, #1
 800f7c4:	f300 80b4 	bgt.w	800f930 <_dtoa_r+0x788>
 800f7c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f7ca:	2900      	cmp	r1, #0
 800f7cc:	f000 80ac 	beq.w	800f928 <_dtoa_r+0x780>
 800f7d0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f7d4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800f7d8:	461c      	mov	r4, r3
 800f7da:	9309      	str	r3, [sp, #36]	; 0x24
 800f7dc:	9b04      	ldr	r3, [sp, #16]
 800f7de:	4413      	add	r3, r2
 800f7e0:	9304      	str	r3, [sp, #16]
 800f7e2:	9b05      	ldr	r3, [sp, #20]
 800f7e4:	2101      	movs	r1, #1
 800f7e6:	4413      	add	r3, r2
 800f7e8:	4630      	mov	r0, r6
 800f7ea:	9305      	str	r3, [sp, #20]
 800f7ec:	f000 fb8a 	bl	800ff04 <__i2b>
 800f7f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f7f2:	4607      	mov	r7, r0
 800f7f4:	f1b8 0f00 	cmp.w	r8, #0
 800f7f8:	d00d      	beq.n	800f816 <_dtoa_r+0x66e>
 800f7fa:	9a05      	ldr	r2, [sp, #20]
 800f7fc:	2a00      	cmp	r2, #0
 800f7fe:	dd0a      	ble.n	800f816 <_dtoa_r+0x66e>
 800f800:	4542      	cmp	r2, r8
 800f802:	9904      	ldr	r1, [sp, #16]
 800f804:	bfa8      	it	ge
 800f806:	4642      	movge	r2, r8
 800f808:	1a89      	subs	r1, r1, r2
 800f80a:	9104      	str	r1, [sp, #16]
 800f80c:	9905      	ldr	r1, [sp, #20]
 800f80e:	eba8 0802 	sub.w	r8, r8, r2
 800f812:	1a8a      	subs	r2, r1, r2
 800f814:	9205      	str	r2, [sp, #20]
 800f816:	b303      	cbz	r3, 800f85a <_dtoa_r+0x6b2>
 800f818:	9a07      	ldr	r2, [sp, #28]
 800f81a:	2a00      	cmp	r2, #0
 800f81c:	f000 80a5 	beq.w	800f96a <_dtoa_r+0x7c2>
 800f820:	2c00      	cmp	r4, #0
 800f822:	dd13      	ble.n	800f84c <_dtoa_r+0x6a4>
 800f824:	4639      	mov	r1, r7
 800f826:	4622      	mov	r2, r4
 800f828:	4630      	mov	r0, r6
 800f82a:	930d      	str	r3, [sp, #52]	; 0x34
 800f82c:	f000 fc2a 	bl	8010084 <__pow5mult>
 800f830:	462a      	mov	r2, r5
 800f832:	4601      	mov	r1, r0
 800f834:	4607      	mov	r7, r0
 800f836:	4630      	mov	r0, r6
 800f838:	f000 fb7a 	bl	800ff30 <__multiply>
 800f83c:	4629      	mov	r1, r5
 800f83e:	9009      	str	r0, [sp, #36]	; 0x24
 800f840:	4630      	mov	r0, r6
 800f842:	f000 faa9 	bl	800fd98 <_Bfree>
 800f846:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f848:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f84a:	4615      	mov	r5, r2
 800f84c:	1b1a      	subs	r2, r3, r4
 800f84e:	d004      	beq.n	800f85a <_dtoa_r+0x6b2>
 800f850:	4629      	mov	r1, r5
 800f852:	4630      	mov	r0, r6
 800f854:	f000 fc16 	bl	8010084 <__pow5mult>
 800f858:	4605      	mov	r5, r0
 800f85a:	2101      	movs	r1, #1
 800f85c:	4630      	mov	r0, r6
 800f85e:	f000 fb51 	bl	800ff04 <__i2b>
 800f862:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f864:	2b00      	cmp	r3, #0
 800f866:	4604      	mov	r4, r0
 800f868:	f340 8081 	ble.w	800f96e <_dtoa_r+0x7c6>
 800f86c:	461a      	mov	r2, r3
 800f86e:	4601      	mov	r1, r0
 800f870:	4630      	mov	r0, r6
 800f872:	f000 fc07 	bl	8010084 <__pow5mult>
 800f876:	9b06      	ldr	r3, [sp, #24]
 800f878:	2b01      	cmp	r3, #1
 800f87a:	4604      	mov	r4, r0
 800f87c:	dd7a      	ble.n	800f974 <_dtoa_r+0x7cc>
 800f87e:	2300      	movs	r3, #0
 800f880:	9309      	str	r3, [sp, #36]	; 0x24
 800f882:	6922      	ldr	r2, [r4, #16]
 800f884:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800f888:	6910      	ldr	r0, [r2, #16]
 800f88a:	f000 faed 	bl	800fe68 <__hi0bits>
 800f88e:	f1c0 0020 	rsb	r0, r0, #32
 800f892:	9b05      	ldr	r3, [sp, #20]
 800f894:	4418      	add	r0, r3
 800f896:	f010 001f 	ands.w	r0, r0, #31
 800f89a:	f000 8093 	beq.w	800f9c4 <_dtoa_r+0x81c>
 800f89e:	f1c0 0220 	rsb	r2, r0, #32
 800f8a2:	2a04      	cmp	r2, #4
 800f8a4:	f340 8085 	ble.w	800f9b2 <_dtoa_r+0x80a>
 800f8a8:	9b04      	ldr	r3, [sp, #16]
 800f8aa:	f1c0 001c 	rsb	r0, r0, #28
 800f8ae:	4403      	add	r3, r0
 800f8b0:	9304      	str	r3, [sp, #16]
 800f8b2:	9b05      	ldr	r3, [sp, #20]
 800f8b4:	4480      	add	r8, r0
 800f8b6:	4403      	add	r3, r0
 800f8b8:	9305      	str	r3, [sp, #20]
 800f8ba:	9b04      	ldr	r3, [sp, #16]
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	dd05      	ble.n	800f8cc <_dtoa_r+0x724>
 800f8c0:	4629      	mov	r1, r5
 800f8c2:	461a      	mov	r2, r3
 800f8c4:	4630      	mov	r0, r6
 800f8c6:	f000 fc37 	bl	8010138 <__lshift>
 800f8ca:	4605      	mov	r5, r0
 800f8cc:	9b05      	ldr	r3, [sp, #20]
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	dd05      	ble.n	800f8de <_dtoa_r+0x736>
 800f8d2:	4621      	mov	r1, r4
 800f8d4:	461a      	mov	r2, r3
 800f8d6:	4630      	mov	r0, r6
 800f8d8:	f000 fc2e 	bl	8010138 <__lshift>
 800f8dc:	4604      	mov	r4, r0
 800f8de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d071      	beq.n	800f9c8 <_dtoa_r+0x820>
 800f8e4:	4621      	mov	r1, r4
 800f8e6:	4628      	mov	r0, r5
 800f8e8:	f000 fc92 	bl	8010210 <__mcmp>
 800f8ec:	2800      	cmp	r0, #0
 800f8ee:	da6b      	bge.n	800f9c8 <_dtoa_r+0x820>
 800f8f0:	2300      	movs	r3, #0
 800f8f2:	4629      	mov	r1, r5
 800f8f4:	220a      	movs	r2, #10
 800f8f6:	4630      	mov	r0, r6
 800f8f8:	f000 fa70 	bl	800fddc <__multadd>
 800f8fc:	9b07      	ldr	r3, [sp, #28]
 800f8fe:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f902:	4605      	mov	r5, r0
 800f904:	2b00      	cmp	r3, #0
 800f906:	f000 8197 	beq.w	800fc38 <_dtoa_r+0xa90>
 800f90a:	4639      	mov	r1, r7
 800f90c:	2300      	movs	r3, #0
 800f90e:	220a      	movs	r2, #10
 800f910:	4630      	mov	r0, r6
 800f912:	f000 fa63 	bl	800fddc <__multadd>
 800f916:	f1ba 0f00 	cmp.w	sl, #0
 800f91a:	4607      	mov	r7, r0
 800f91c:	f300 8093 	bgt.w	800fa46 <_dtoa_r+0x89e>
 800f920:	9b06      	ldr	r3, [sp, #24]
 800f922:	2b02      	cmp	r3, #2
 800f924:	dc57      	bgt.n	800f9d6 <_dtoa_r+0x82e>
 800f926:	e08e      	b.n	800fa46 <_dtoa_r+0x89e>
 800f928:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f92a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800f92e:	e751      	b.n	800f7d4 <_dtoa_r+0x62c>
 800f930:	f109 34ff 	add.w	r4, r9, #4294967295
 800f934:	42a3      	cmp	r3, r4
 800f936:	bfbf      	itttt	lt
 800f938:	1ae2      	sublt	r2, r4, r3
 800f93a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800f93c:	189b      	addlt	r3, r3, r2
 800f93e:	930a      	strlt	r3, [sp, #40]	; 0x28
 800f940:	bfae      	itee	ge
 800f942:	1b1c      	subge	r4, r3, r4
 800f944:	4623      	movlt	r3, r4
 800f946:	2400      	movlt	r4, #0
 800f948:	f1b9 0f00 	cmp.w	r9, #0
 800f94c:	bfb5      	itete	lt
 800f94e:	9a04      	ldrlt	r2, [sp, #16]
 800f950:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800f954:	eba2 0809 	sublt.w	r8, r2, r9
 800f958:	464a      	movge	r2, r9
 800f95a:	bfb8      	it	lt
 800f95c:	2200      	movlt	r2, #0
 800f95e:	e73c      	b.n	800f7da <_dtoa_r+0x632>
 800f960:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800f964:	9f07      	ldr	r7, [sp, #28]
 800f966:	461c      	mov	r4, r3
 800f968:	e744      	b.n	800f7f4 <_dtoa_r+0x64c>
 800f96a:	461a      	mov	r2, r3
 800f96c:	e770      	b.n	800f850 <_dtoa_r+0x6a8>
 800f96e:	9b06      	ldr	r3, [sp, #24]
 800f970:	2b01      	cmp	r3, #1
 800f972:	dc18      	bgt.n	800f9a6 <_dtoa_r+0x7fe>
 800f974:	9b02      	ldr	r3, [sp, #8]
 800f976:	b9b3      	cbnz	r3, 800f9a6 <_dtoa_r+0x7fe>
 800f978:	9b03      	ldr	r3, [sp, #12]
 800f97a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800f97e:	b9a2      	cbnz	r2, 800f9aa <_dtoa_r+0x802>
 800f980:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800f984:	0d12      	lsrs	r2, r2, #20
 800f986:	0512      	lsls	r2, r2, #20
 800f988:	b18a      	cbz	r2, 800f9ae <_dtoa_r+0x806>
 800f98a:	9b04      	ldr	r3, [sp, #16]
 800f98c:	3301      	adds	r3, #1
 800f98e:	9304      	str	r3, [sp, #16]
 800f990:	9b05      	ldr	r3, [sp, #20]
 800f992:	3301      	adds	r3, #1
 800f994:	9305      	str	r3, [sp, #20]
 800f996:	2301      	movs	r3, #1
 800f998:	9309      	str	r3, [sp, #36]	; 0x24
 800f99a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	f47f af70 	bne.w	800f882 <_dtoa_r+0x6da>
 800f9a2:	2001      	movs	r0, #1
 800f9a4:	e775      	b.n	800f892 <_dtoa_r+0x6ea>
 800f9a6:	2300      	movs	r3, #0
 800f9a8:	e7f6      	b.n	800f998 <_dtoa_r+0x7f0>
 800f9aa:	9b02      	ldr	r3, [sp, #8]
 800f9ac:	e7f4      	b.n	800f998 <_dtoa_r+0x7f0>
 800f9ae:	9209      	str	r2, [sp, #36]	; 0x24
 800f9b0:	e7f3      	b.n	800f99a <_dtoa_r+0x7f2>
 800f9b2:	d082      	beq.n	800f8ba <_dtoa_r+0x712>
 800f9b4:	9b04      	ldr	r3, [sp, #16]
 800f9b6:	321c      	adds	r2, #28
 800f9b8:	4413      	add	r3, r2
 800f9ba:	9304      	str	r3, [sp, #16]
 800f9bc:	9b05      	ldr	r3, [sp, #20]
 800f9be:	4490      	add	r8, r2
 800f9c0:	4413      	add	r3, r2
 800f9c2:	e779      	b.n	800f8b8 <_dtoa_r+0x710>
 800f9c4:	4602      	mov	r2, r0
 800f9c6:	e7f5      	b.n	800f9b4 <_dtoa_r+0x80c>
 800f9c8:	f1b9 0f00 	cmp.w	r9, #0
 800f9cc:	dc36      	bgt.n	800fa3c <_dtoa_r+0x894>
 800f9ce:	9b06      	ldr	r3, [sp, #24]
 800f9d0:	2b02      	cmp	r3, #2
 800f9d2:	dd33      	ble.n	800fa3c <_dtoa_r+0x894>
 800f9d4:	46ca      	mov	sl, r9
 800f9d6:	f1ba 0f00 	cmp.w	sl, #0
 800f9da:	d10d      	bne.n	800f9f8 <_dtoa_r+0x850>
 800f9dc:	4621      	mov	r1, r4
 800f9de:	4653      	mov	r3, sl
 800f9e0:	2205      	movs	r2, #5
 800f9e2:	4630      	mov	r0, r6
 800f9e4:	f000 f9fa 	bl	800fddc <__multadd>
 800f9e8:	4601      	mov	r1, r0
 800f9ea:	4604      	mov	r4, r0
 800f9ec:	4628      	mov	r0, r5
 800f9ee:	f000 fc0f 	bl	8010210 <__mcmp>
 800f9f2:	2800      	cmp	r0, #0
 800f9f4:	f73f ade4 	bgt.w	800f5c0 <_dtoa_r+0x418>
 800f9f8:	9b08      	ldr	r3, [sp, #32]
 800f9fa:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f9fe:	ea6f 0b03 	mvn.w	fp, r3
 800fa02:	f04f 0900 	mov.w	r9, #0
 800fa06:	4621      	mov	r1, r4
 800fa08:	4630      	mov	r0, r6
 800fa0a:	f000 f9c5 	bl	800fd98 <_Bfree>
 800fa0e:	2f00      	cmp	r7, #0
 800fa10:	f43f aea1 	beq.w	800f756 <_dtoa_r+0x5ae>
 800fa14:	f1b9 0f00 	cmp.w	r9, #0
 800fa18:	d005      	beq.n	800fa26 <_dtoa_r+0x87e>
 800fa1a:	45b9      	cmp	r9, r7
 800fa1c:	d003      	beq.n	800fa26 <_dtoa_r+0x87e>
 800fa1e:	4649      	mov	r1, r9
 800fa20:	4630      	mov	r0, r6
 800fa22:	f000 f9b9 	bl	800fd98 <_Bfree>
 800fa26:	4639      	mov	r1, r7
 800fa28:	4630      	mov	r0, r6
 800fa2a:	f000 f9b5 	bl	800fd98 <_Bfree>
 800fa2e:	e692      	b.n	800f756 <_dtoa_r+0x5ae>
 800fa30:	2400      	movs	r4, #0
 800fa32:	4627      	mov	r7, r4
 800fa34:	e7e0      	b.n	800f9f8 <_dtoa_r+0x850>
 800fa36:	4693      	mov	fp, r2
 800fa38:	4627      	mov	r7, r4
 800fa3a:	e5c1      	b.n	800f5c0 <_dtoa_r+0x418>
 800fa3c:	9b07      	ldr	r3, [sp, #28]
 800fa3e:	46ca      	mov	sl, r9
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	f000 8100 	beq.w	800fc46 <_dtoa_r+0xa9e>
 800fa46:	f1b8 0f00 	cmp.w	r8, #0
 800fa4a:	dd05      	ble.n	800fa58 <_dtoa_r+0x8b0>
 800fa4c:	4639      	mov	r1, r7
 800fa4e:	4642      	mov	r2, r8
 800fa50:	4630      	mov	r0, r6
 800fa52:	f000 fb71 	bl	8010138 <__lshift>
 800fa56:	4607      	mov	r7, r0
 800fa58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d05d      	beq.n	800fb1a <_dtoa_r+0x972>
 800fa5e:	6879      	ldr	r1, [r7, #4]
 800fa60:	4630      	mov	r0, r6
 800fa62:	f000 f959 	bl	800fd18 <_Balloc>
 800fa66:	4680      	mov	r8, r0
 800fa68:	b928      	cbnz	r0, 800fa76 <_dtoa_r+0x8ce>
 800fa6a:	4b82      	ldr	r3, [pc, #520]	; (800fc74 <_dtoa_r+0xacc>)
 800fa6c:	4602      	mov	r2, r0
 800fa6e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800fa72:	f7ff bbb1 	b.w	800f1d8 <_dtoa_r+0x30>
 800fa76:	693a      	ldr	r2, [r7, #16]
 800fa78:	3202      	adds	r2, #2
 800fa7a:	0092      	lsls	r2, r2, #2
 800fa7c:	f107 010c 	add.w	r1, r7, #12
 800fa80:	300c      	adds	r0, #12
 800fa82:	f7ff fada 	bl	800f03a <memcpy>
 800fa86:	2201      	movs	r2, #1
 800fa88:	4641      	mov	r1, r8
 800fa8a:	4630      	mov	r0, r6
 800fa8c:	f000 fb54 	bl	8010138 <__lshift>
 800fa90:	9b01      	ldr	r3, [sp, #4]
 800fa92:	3301      	adds	r3, #1
 800fa94:	9304      	str	r3, [sp, #16]
 800fa96:	9b01      	ldr	r3, [sp, #4]
 800fa98:	4453      	add	r3, sl
 800fa9a:	9308      	str	r3, [sp, #32]
 800fa9c:	9b02      	ldr	r3, [sp, #8]
 800fa9e:	f003 0301 	and.w	r3, r3, #1
 800faa2:	46b9      	mov	r9, r7
 800faa4:	9307      	str	r3, [sp, #28]
 800faa6:	4607      	mov	r7, r0
 800faa8:	9b04      	ldr	r3, [sp, #16]
 800faaa:	4621      	mov	r1, r4
 800faac:	3b01      	subs	r3, #1
 800faae:	4628      	mov	r0, r5
 800fab0:	9302      	str	r3, [sp, #8]
 800fab2:	f7ff faef 	bl	800f094 <quorem>
 800fab6:	4603      	mov	r3, r0
 800fab8:	3330      	adds	r3, #48	; 0x30
 800faba:	9005      	str	r0, [sp, #20]
 800fabc:	4649      	mov	r1, r9
 800fabe:	4628      	mov	r0, r5
 800fac0:	9309      	str	r3, [sp, #36]	; 0x24
 800fac2:	f000 fba5 	bl	8010210 <__mcmp>
 800fac6:	463a      	mov	r2, r7
 800fac8:	4682      	mov	sl, r0
 800faca:	4621      	mov	r1, r4
 800facc:	4630      	mov	r0, r6
 800face:	f000 fbbb 	bl	8010248 <__mdiff>
 800fad2:	68c2      	ldr	r2, [r0, #12]
 800fad4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fad6:	4680      	mov	r8, r0
 800fad8:	bb0a      	cbnz	r2, 800fb1e <_dtoa_r+0x976>
 800fada:	4601      	mov	r1, r0
 800fadc:	4628      	mov	r0, r5
 800fade:	f000 fb97 	bl	8010210 <__mcmp>
 800fae2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fae4:	4602      	mov	r2, r0
 800fae6:	4641      	mov	r1, r8
 800fae8:	4630      	mov	r0, r6
 800faea:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800faee:	f000 f953 	bl	800fd98 <_Bfree>
 800faf2:	9b06      	ldr	r3, [sp, #24]
 800faf4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800faf6:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800fafa:	ea43 0102 	orr.w	r1, r3, r2
 800fafe:	9b07      	ldr	r3, [sp, #28]
 800fb00:	4319      	orrs	r1, r3
 800fb02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb04:	d10d      	bne.n	800fb22 <_dtoa_r+0x97a>
 800fb06:	2b39      	cmp	r3, #57	; 0x39
 800fb08:	d029      	beq.n	800fb5e <_dtoa_r+0x9b6>
 800fb0a:	f1ba 0f00 	cmp.w	sl, #0
 800fb0e:	dd01      	ble.n	800fb14 <_dtoa_r+0x96c>
 800fb10:	9b05      	ldr	r3, [sp, #20]
 800fb12:	3331      	adds	r3, #49	; 0x31
 800fb14:	9a02      	ldr	r2, [sp, #8]
 800fb16:	7013      	strb	r3, [r2, #0]
 800fb18:	e775      	b.n	800fa06 <_dtoa_r+0x85e>
 800fb1a:	4638      	mov	r0, r7
 800fb1c:	e7b8      	b.n	800fa90 <_dtoa_r+0x8e8>
 800fb1e:	2201      	movs	r2, #1
 800fb20:	e7e1      	b.n	800fae6 <_dtoa_r+0x93e>
 800fb22:	f1ba 0f00 	cmp.w	sl, #0
 800fb26:	db06      	blt.n	800fb36 <_dtoa_r+0x98e>
 800fb28:	9906      	ldr	r1, [sp, #24]
 800fb2a:	ea41 0a0a 	orr.w	sl, r1, sl
 800fb2e:	9907      	ldr	r1, [sp, #28]
 800fb30:	ea5a 0a01 	orrs.w	sl, sl, r1
 800fb34:	d120      	bne.n	800fb78 <_dtoa_r+0x9d0>
 800fb36:	2a00      	cmp	r2, #0
 800fb38:	ddec      	ble.n	800fb14 <_dtoa_r+0x96c>
 800fb3a:	4629      	mov	r1, r5
 800fb3c:	2201      	movs	r2, #1
 800fb3e:	4630      	mov	r0, r6
 800fb40:	9304      	str	r3, [sp, #16]
 800fb42:	f000 faf9 	bl	8010138 <__lshift>
 800fb46:	4621      	mov	r1, r4
 800fb48:	4605      	mov	r5, r0
 800fb4a:	f000 fb61 	bl	8010210 <__mcmp>
 800fb4e:	2800      	cmp	r0, #0
 800fb50:	9b04      	ldr	r3, [sp, #16]
 800fb52:	dc02      	bgt.n	800fb5a <_dtoa_r+0x9b2>
 800fb54:	d1de      	bne.n	800fb14 <_dtoa_r+0x96c>
 800fb56:	07da      	lsls	r2, r3, #31
 800fb58:	d5dc      	bpl.n	800fb14 <_dtoa_r+0x96c>
 800fb5a:	2b39      	cmp	r3, #57	; 0x39
 800fb5c:	d1d8      	bne.n	800fb10 <_dtoa_r+0x968>
 800fb5e:	9a02      	ldr	r2, [sp, #8]
 800fb60:	2339      	movs	r3, #57	; 0x39
 800fb62:	7013      	strb	r3, [r2, #0]
 800fb64:	4643      	mov	r3, r8
 800fb66:	4698      	mov	r8, r3
 800fb68:	3b01      	subs	r3, #1
 800fb6a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800fb6e:	2a39      	cmp	r2, #57	; 0x39
 800fb70:	d051      	beq.n	800fc16 <_dtoa_r+0xa6e>
 800fb72:	3201      	adds	r2, #1
 800fb74:	701a      	strb	r2, [r3, #0]
 800fb76:	e746      	b.n	800fa06 <_dtoa_r+0x85e>
 800fb78:	2a00      	cmp	r2, #0
 800fb7a:	dd03      	ble.n	800fb84 <_dtoa_r+0x9dc>
 800fb7c:	2b39      	cmp	r3, #57	; 0x39
 800fb7e:	d0ee      	beq.n	800fb5e <_dtoa_r+0x9b6>
 800fb80:	3301      	adds	r3, #1
 800fb82:	e7c7      	b.n	800fb14 <_dtoa_r+0x96c>
 800fb84:	9a04      	ldr	r2, [sp, #16]
 800fb86:	9908      	ldr	r1, [sp, #32]
 800fb88:	f802 3c01 	strb.w	r3, [r2, #-1]
 800fb8c:	428a      	cmp	r2, r1
 800fb8e:	d02b      	beq.n	800fbe8 <_dtoa_r+0xa40>
 800fb90:	4629      	mov	r1, r5
 800fb92:	2300      	movs	r3, #0
 800fb94:	220a      	movs	r2, #10
 800fb96:	4630      	mov	r0, r6
 800fb98:	f000 f920 	bl	800fddc <__multadd>
 800fb9c:	45b9      	cmp	r9, r7
 800fb9e:	4605      	mov	r5, r0
 800fba0:	f04f 0300 	mov.w	r3, #0
 800fba4:	f04f 020a 	mov.w	r2, #10
 800fba8:	4649      	mov	r1, r9
 800fbaa:	4630      	mov	r0, r6
 800fbac:	d107      	bne.n	800fbbe <_dtoa_r+0xa16>
 800fbae:	f000 f915 	bl	800fddc <__multadd>
 800fbb2:	4681      	mov	r9, r0
 800fbb4:	4607      	mov	r7, r0
 800fbb6:	9b04      	ldr	r3, [sp, #16]
 800fbb8:	3301      	adds	r3, #1
 800fbba:	9304      	str	r3, [sp, #16]
 800fbbc:	e774      	b.n	800faa8 <_dtoa_r+0x900>
 800fbbe:	f000 f90d 	bl	800fddc <__multadd>
 800fbc2:	4639      	mov	r1, r7
 800fbc4:	4681      	mov	r9, r0
 800fbc6:	2300      	movs	r3, #0
 800fbc8:	220a      	movs	r2, #10
 800fbca:	4630      	mov	r0, r6
 800fbcc:	f000 f906 	bl	800fddc <__multadd>
 800fbd0:	4607      	mov	r7, r0
 800fbd2:	e7f0      	b.n	800fbb6 <_dtoa_r+0xa0e>
 800fbd4:	f1ba 0f00 	cmp.w	sl, #0
 800fbd8:	9a01      	ldr	r2, [sp, #4]
 800fbda:	bfcc      	ite	gt
 800fbdc:	46d0      	movgt	r8, sl
 800fbde:	f04f 0801 	movle.w	r8, #1
 800fbe2:	4490      	add	r8, r2
 800fbe4:	f04f 0900 	mov.w	r9, #0
 800fbe8:	4629      	mov	r1, r5
 800fbea:	2201      	movs	r2, #1
 800fbec:	4630      	mov	r0, r6
 800fbee:	9302      	str	r3, [sp, #8]
 800fbf0:	f000 faa2 	bl	8010138 <__lshift>
 800fbf4:	4621      	mov	r1, r4
 800fbf6:	4605      	mov	r5, r0
 800fbf8:	f000 fb0a 	bl	8010210 <__mcmp>
 800fbfc:	2800      	cmp	r0, #0
 800fbfe:	dcb1      	bgt.n	800fb64 <_dtoa_r+0x9bc>
 800fc00:	d102      	bne.n	800fc08 <_dtoa_r+0xa60>
 800fc02:	9b02      	ldr	r3, [sp, #8]
 800fc04:	07db      	lsls	r3, r3, #31
 800fc06:	d4ad      	bmi.n	800fb64 <_dtoa_r+0x9bc>
 800fc08:	4643      	mov	r3, r8
 800fc0a:	4698      	mov	r8, r3
 800fc0c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fc10:	2a30      	cmp	r2, #48	; 0x30
 800fc12:	d0fa      	beq.n	800fc0a <_dtoa_r+0xa62>
 800fc14:	e6f7      	b.n	800fa06 <_dtoa_r+0x85e>
 800fc16:	9a01      	ldr	r2, [sp, #4]
 800fc18:	429a      	cmp	r2, r3
 800fc1a:	d1a4      	bne.n	800fb66 <_dtoa_r+0x9be>
 800fc1c:	f10b 0b01 	add.w	fp, fp, #1
 800fc20:	2331      	movs	r3, #49	; 0x31
 800fc22:	e778      	b.n	800fb16 <_dtoa_r+0x96e>
 800fc24:	4b14      	ldr	r3, [pc, #80]	; (800fc78 <_dtoa_r+0xad0>)
 800fc26:	f7ff bb2a 	b.w	800f27e <_dtoa_r+0xd6>
 800fc2a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	f47f ab05 	bne.w	800f23c <_dtoa_r+0x94>
 800fc32:	4b12      	ldr	r3, [pc, #72]	; (800fc7c <_dtoa_r+0xad4>)
 800fc34:	f7ff bb23 	b.w	800f27e <_dtoa_r+0xd6>
 800fc38:	f1ba 0f00 	cmp.w	sl, #0
 800fc3c:	dc03      	bgt.n	800fc46 <_dtoa_r+0xa9e>
 800fc3e:	9b06      	ldr	r3, [sp, #24]
 800fc40:	2b02      	cmp	r3, #2
 800fc42:	f73f aec8 	bgt.w	800f9d6 <_dtoa_r+0x82e>
 800fc46:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800fc4a:	4621      	mov	r1, r4
 800fc4c:	4628      	mov	r0, r5
 800fc4e:	f7ff fa21 	bl	800f094 <quorem>
 800fc52:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800fc56:	f808 3b01 	strb.w	r3, [r8], #1
 800fc5a:	9a01      	ldr	r2, [sp, #4]
 800fc5c:	eba8 0202 	sub.w	r2, r8, r2
 800fc60:	4592      	cmp	sl, r2
 800fc62:	ddb7      	ble.n	800fbd4 <_dtoa_r+0xa2c>
 800fc64:	4629      	mov	r1, r5
 800fc66:	2300      	movs	r3, #0
 800fc68:	220a      	movs	r2, #10
 800fc6a:	4630      	mov	r0, r6
 800fc6c:	f000 f8b6 	bl	800fddc <__multadd>
 800fc70:	4605      	mov	r5, r0
 800fc72:	e7ea      	b.n	800fc4a <_dtoa_r+0xaa2>
 800fc74:	08011266 	.word	0x08011266
 800fc78:	0801118a 	.word	0x0801118a
 800fc7c:	080111ea 	.word	0x080111ea

0800fc80 <_free_r>:
 800fc80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fc82:	2900      	cmp	r1, #0
 800fc84:	d044      	beq.n	800fd10 <_free_r+0x90>
 800fc86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fc8a:	9001      	str	r0, [sp, #4]
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	f1a1 0404 	sub.w	r4, r1, #4
 800fc92:	bfb8      	it	lt
 800fc94:	18e4      	addlt	r4, r4, r3
 800fc96:	f7fe fa13 	bl	800e0c0 <__malloc_lock>
 800fc9a:	4a1e      	ldr	r2, [pc, #120]	; (800fd14 <_free_r+0x94>)
 800fc9c:	9801      	ldr	r0, [sp, #4]
 800fc9e:	6813      	ldr	r3, [r2, #0]
 800fca0:	b933      	cbnz	r3, 800fcb0 <_free_r+0x30>
 800fca2:	6063      	str	r3, [r4, #4]
 800fca4:	6014      	str	r4, [r2, #0]
 800fca6:	b003      	add	sp, #12
 800fca8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fcac:	f7fe ba0e 	b.w	800e0cc <__malloc_unlock>
 800fcb0:	42a3      	cmp	r3, r4
 800fcb2:	d908      	bls.n	800fcc6 <_free_r+0x46>
 800fcb4:	6825      	ldr	r5, [r4, #0]
 800fcb6:	1961      	adds	r1, r4, r5
 800fcb8:	428b      	cmp	r3, r1
 800fcba:	bf01      	itttt	eq
 800fcbc:	6819      	ldreq	r1, [r3, #0]
 800fcbe:	685b      	ldreq	r3, [r3, #4]
 800fcc0:	1949      	addeq	r1, r1, r5
 800fcc2:	6021      	streq	r1, [r4, #0]
 800fcc4:	e7ed      	b.n	800fca2 <_free_r+0x22>
 800fcc6:	461a      	mov	r2, r3
 800fcc8:	685b      	ldr	r3, [r3, #4]
 800fcca:	b10b      	cbz	r3, 800fcd0 <_free_r+0x50>
 800fccc:	42a3      	cmp	r3, r4
 800fcce:	d9fa      	bls.n	800fcc6 <_free_r+0x46>
 800fcd0:	6811      	ldr	r1, [r2, #0]
 800fcd2:	1855      	adds	r5, r2, r1
 800fcd4:	42a5      	cmp	r5, r4
 800fcd6:	d10b      	bne.n	800fcf0 <_free_r+0x70>
 800fcd8:	6824      	ldr	r4, [r4, #0]
 800fcda:	4421      	add	r1, r4
 800fcdc:	1854      	adds	r4, r2, r1
 800fcde:	42a3      	cmp	r3, r4
 800fce0:	6011      	str	r1, [r2, #0]
 800fce2:	d1e0      	bne.n	800fca6 <_free_r+0x26>
 800fce4:	681c      	ldr	r4, [r3, #0]
 800fce6:	685b      	ldr	r3, [r3, #4]
 800fce8:	6053      	str	r3, [r2, #4]
 800fcea:	440c      	add	r4, r1
 800fcec:	6014      	str	r4, [r2, #0]
 800fcee:	e7da      	b.n	800fca6 <_free_r+0x26>
 800fcf0:	d902      	bls.n	800fcf8 <_free_r+0x78>
 800fcf2:	230c      	movs	r3, #12
 800fcf4:	6003      	str	r3, [r0, #0]
 800fcf6:	e7d6      	b.n	800fca6 <_free_r+0x26>
 800fcf8:	6825      	ldr	r5, [r4, #0]
 800fcfa:	1961      	adds	r1, r4, r5
 800fcfc:	428b      	cmp	r3, r1
 800fcfe:	bf04      	itt	eq
 800fd00:	6819      	ldreq	r1, [r3, #0]
 800fd02:	685b      	ldreq	r3, [r3, #4]
 800fd04:	6063      	str	r3, [r4, #4]
 800fd06:	bf04      	itt	eq
 800fd08:	1949      	addeq	r1, r1, r5
 800fd0a:	6021      	streq	r1, [r4, #0]
 800fd0c:	6054      	str	r4, [r2, #4]
 800fd0e:	e7ca      	b.n	800fca6 <_free_r+0x26>
 800fd10:	b003      	add	sp, #12
 800fd12:	bd30      	pop	{r4, r5, pc}
 800fd14:	24003488 	.word	0x24003488

0800fd18 <_Balloc>:
 800fd18:	b570      	push	{r4, r5, r6, lr}
 800fd1a:	69c6      	ldr	r6, [r0, #28]
 800fd1c:	4604      	mov	r4, r0
 800fd1e:	460d      	mov	r5, r1
 800fd20:	b976      	cbnz	r6, 800fd40 <_Balloc+0x28>
 800fd22:	2010      	movs	r0, #16
 800fd24:	f7fe f91c 	bl	800df60 <malloc>
 800fd28:	4602      	mov	r2, r0
 800fd2a:	61e0      	str	r0, [r4, #28]
 800fd2c:	b920      	cbnz	r0, 800fd38 <_Balloc+0x20>
 800fd2e:	4b18      	ldr	r3, [pc, #96]	; (800fd90 <_Balloc+0x78>)
 800fd30:	4818      	ldr	r0, [pc, #96]	; (800fd94 <_Balloc+0x7c>)
 800fd32:	216b      	movs	r1, #107	; 0x6b
 800fd34:	f7ff f990 	bl	800f058 <__assert_func>
 800fd38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fd3c:	6006      	str	r6, [r0, #0]
 800fd3e:	60c6      	str	r6, [r0, #12]
 800fd40:	69e6      	ldr	r6, [r4, #28]
 800fd42:	68f3      	ldr	r3, [r6, #12]
 800fd44:	b183      	cbz	r3, 800fd68 <_Balloc+0x50>
 800fd46:	69e3      	ldr	r3, [r4, #28]
 800fd48:	68db      	ldr	r3, [r3, #12]
 800fd4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fd4e:	b9b8      	cbnz	r0, 800fd80 <_Balloc+0x68>
 800fd50:	2101      	movs	r1, #1
 800fd52:	fa01 f605 	lsl.w	r6, r1, r5
 800fd56:	1d72      	adds	r2, r6, #5
 800fd58:	0092      	lsls	r2, r2, #2
 800fd5a:	4620      	mov	r0, r4
 800fd5c:	f000 ff3f 	bl	8010bde <_calloc_r>
 800fd60:	b160      	cbz	r0, 800fd7c <_Balloc+0x64>
 800fd62:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fd66:	e00e      	b.n	800fd86 <_Balloc+0x6e>
 800fd68:	2221      	movs	r2, #33	; 0x21
 800fd6a:	2104      	movs	r1, #4
 800fd6c:	4620      	mov	r0, r4
 800fd6e:	f000 ff36 	bl	8010bde <_calloc_r>
 800fd72:	69e3      	ldr	r3, [r4, #28]
 800fd74:	60f0      	str	r0, [r6, #12]
 800fd76:	68db      	ldr	r3, [r3, #12]
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d1e4      	bne.n	800fd46 <_Balloc+0x2e>
 800fd7c:	2000      	movs	r0, #0
 800fd7e:	bd70      	pop	{r4, r5, r6, pc}
 800fd80:	6802      	ldr	r2, [r0, #0]
 800fd82:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fd86:	2300      	movs	r3, #0
 800fd88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fd8c:	e7f7      	b.n	800fd7e <_Balloc+0x66>
 800fd8e:	bf00      	nop
 800fd90:	080111f7 	.word	0x080111f7
 800fd94:	08011277 	.word	0x08011277

0800fd98 <_Bfree>:
 800fd98:	b570      	push	{r4, r5, r6, lr}
 800fd9a:	69c6      	ldr	r6, [r0, #28]
 800fd9c:	4605      	mov	r5, r0
 800fd9e:	460c      	mov	r4, r1
 800fda0:	b976      	cbnz	r6, 800fdc0 <_Bfree+0x28>
 800fda2:	2010      	movs	r0, #16
 800fda4:	f7fe f8dc 	bl	800df60 <malloc>
 800fda8:	4602      	mov	r2, r0
 800fdaa:	61e8      	str	r0, [r5, #28]
 800fdac:	b920      	cbnz	r0, 800fdb8 <_Bfree+0x20>
 800fdae:	4b09      	ldr	r3, [pc, #36]	; (800fdd4 <_Bfree+0x3c>)
 800fdb0:	4809      	ldr	r0, [pc, #36]	; (800fdd8 <_Bfree+0x40>)
 800fdb2:	218f      	movs	r1, #143	; 0x8f
 800fdb4:	f7ff f950 	bl	800f058 <__assert_func>
 800fdb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fdbc:	6006      	str	r6, [r0, #0]
 800fdbe:	60c6      	str	r6, [r0, #12]
 800fdc0:	b13c      	cbz	r4, 800fdd2 <_Bfree+0x3a>
 800fdc2:	69eb      	ldr	r3, [r5, #28]
 800fdc4:	6862      	ldr	r2, [r4, #4]
 800fdc6:	68db      	ldr	r3, [r3, #12]
 800fdc8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fdcc:	6021      	str	r1, [r4, #0]
 800fdce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fdd2:	bd70      	pop	{r4, r5, r6, pc}
 800fdd4:	080111f7 	.word	0x080111f7
 800fdd8:	08011277 	.word	0x08011277

0800fddc <__multadd>:
 800fddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fde0:	690d      	ldr	r5, [r1, #16]
 800fde2:	4607      	mov	r7, r0
 800fde4:	460c      	mov	r4, r1
 800fde6:	461e      	mov	r6, r3
 800fde8:	f101 0c14 	add.w	ip, r1, #20
 800fdec:	2000      	movs	r0, #0
 800fdee:	f8dc 3000 	ldr.w	r3, [ip]
 800fdf2:	b299      	uxth	r1, r3
 800fdf4:	fb02 6101 	mla	r1, r2, r1, r6
 800fdf8:	0c1e      	lsrs	r6, r3, #16
 800fdfa:	0c0b      	lsrs	r3, r1, #16
 800fdfc:	fb02 3306 	mla	r3, r2, r6, r3
 800fe00:	b289      	uxth	r1, r1
 800fe02:	3001      	adds	r0, #1
 800fe04:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fe08:	4285      	cmp	r5, r0
 800fe0a:	f84c 1b04 	str.w	r1, [ip], #4
 800fe0e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fe12:	dcec      	bgt.n	800fdee <__multadd+0x12>
 800fe14:	b30e      	cbz	r6, 800fe5a <__multadd+0x7e>
 800fe16:	68a3      	ldr	r3, [r4, #8]
 800fe18:	42ab      	cmp	r3, r5
 800fe1a:	dc19      	bgt.n	800fe50 <__multadd+0x74>
 800fe1c:	6861      	ldr	r1, [r4, #4]
 800fe1e:	4638      	mov	r0, r7
 800fe20:	3101      	adds	r1, #1
 800fe22:	f7ff ff79 	bl	800fd18 <_Balloc>
 800fe26:	4680      	mov	r8, r0
 800fe28:	b928      	cbnz	r0, 800fe36 <__multadd+0x5a>
 800fe2a:	4602      	mov	r2, r0
 800fe2c:	4b0c      	ldr	r3, [pc, #48]	; (800fe60 <__multadd+0x84>)
 800fe2e:	480d      	ldr	r0, [pc, #52]	; (800fe64 <__multadd+0x88>)
 800fe30:	21ba      	movs	r1, #186	; 0xba
 800fe32:	f7ff f911 	bl	800f058 <__assert_func>
 800fe36:	6922      	ldr	r2, [r4, #16]
 800fe38:	3202      	adds	r2, #2
 800fe3a:	f104 010c 	add.w	r1, r4, #12
 800fe3e:	0092      	lsls	r2, r2, #2
 800fe40:	300c      	adds	r0, #12
 800fe42:	f7ff f8fa 	bl	800f03a <memcpy>
 800fe46:	4621      	mov	r1, r4
 800fe48:	4638      	mov	r0, r7
 800fe4a:	f7ff ffa5 	bl	800fd98 <_Bfree>
 800fe4e:	4644      	mov	r4, r8
 800fe50:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fe54:	3501      	adds	r5, #1
 800fe56:	615e      	str	r6, [r3, #20]
 800fe58:	6125      	str	r5, [r4, #16]
 800fe5a:	4620      	mov	r0, r4
 800fe5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe60:	08011266 	.word	0x08011266
 800fe64:	08011277 	.word	0x08011277

0800fe68 <__hi0bits>:
 800fe68:	0c03      	lsrs	r3, r0, #16
 800fe6a:	041b      	lsls	r3, r3, #16
 800fe6c:	b9d3      	cbnz	r3, 800fea4 <__hi0bits+0x3c>
 800fe6e:	0400      	lsls	r0, r0, #16
 800fe70:	2310      	movs	r3, #16
 800fe72:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800fe76:	bf04      	itt	eq
 800fe78:	0200      	lsleq	r0, r0, #8
 800fe7a:	3308      	addeq	r3, #8
 800fe7c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800fe80:	bf04      	itt	eq
 800fe82:	0100      	lsleq	r0, r0, #4
 800fe84:	3304      	addeq	r3, #4
 800fe86:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800fe8a:	bf04      	itt	eq
 800fe8c:	0080      	lsleq	r0, r0, #2
 800fe8e:	3302      	addeq	r3, #2
 800fe90:	2800      	cmp	r0, #0
 800fe92:	db05      	blt.n	800fea0 <__hi0bits+0x38>
 800fe94:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800fe98:	f103 0301 	add.w	r3, r3, #1
 800fe9c:	bf08      	it	eq
 800fe9e:	2320      	moveq	r3, #32
 800fea0:	4618      	mov	r0, r3
 800fea2:	4770      	bx	lr
 800fea4:	2300      	movs	r3, #0
 800fea6:	e7e4      	b.n	800fe72 <__hi0bits+0xa>

0800fea8 <__lo0bits>:
 800fea8:	6803      	ldr	r3, [r0, #0]
 800feaa:	f013 0207 	ands.w	r2, r3, #7
 800feae:	d00c      	beq.n	800feca <__lo0bits+0x22>
 800feb0:	07d9      	lsls	r1, r3, #31
 800feb2:	d422      	bmi.n	800fefa <__lo0bits+0x52>
 800feb4:	079a      	lsls	r2, r3, #30
 800feb6:	bf49      	itett	mi
 800feb8:	085b      	lsrmi	r3, r3, #1
 800feba:	089b      	lsrpl	r3, r3, #2
 800febc:	6003      	strmi	r3, [r0, #0]
 800febe:	2201      	movmi	r2, #1
 800fec0:	bf5c      	itt	pl
 800fec2:	6003      	strpl	r3, [r0, #0]
 800fec4:	2202      	movpl	r2, #2
 800fec6:	4610      	mov	r0, r2
 800fec8:	4770      	bx	lr
 800feca:	b299      	uxth	r1, r3
 800fecc:	b909      	cbnz	r1, 800fed2 <__lo0bits+0x2a>
 800fece:	0c1b      	lsrs	r3, r3, #16
 800fed0:	2210      	movs	r2, #16
 800fed2:	b2d9      	uxtb	r1, r3
 800fed4:	b909      	cbnz	r1, 800feda <__lo0bits+0x32>
 800fed6:	3208      	adds	r2, #8
 800fed8:	0a1b      	lsrs	r3, r3, #8
 800feda:	0719      	lsls	r1, r3, #28
 800fedc:	bf04      	itt	eq
 800fede:	091b      	lsreq	r3, r3, #4
 800fee0:	3204      	addeq	r2, #4
 800fee2:	0799      	lsls	r1, r3, #30
 800fee4:	bf04      	itt	eq
 800fee6:	089b      	lsreq	r3, r3, #2
 800fee8:	3202      	addeq	r2, #2
 800feea:	07d9      	lsls	r1, r3, #31
 800feec:	d403      	bmi.n	800fef6 <__lo0bits+0x4e>
 800feee:	085b      	lsrs	r3, r3, #1
 800fef0:	f102 0201 	add.w	r2, r2, #1
 800fef4:	d003      	beq.n	800fefe <__lo0bits+0x56>
 800fef6:	6003      	str	r3, [r0, #0]
 800fef8:	e7e5      	b.n	800fec6 <__lo0bits+0x1e>
 800fefa:	2200      	movs	r2, #0
 800fefc:	e7e3      	b.n	800fec6 <__lo0bits+0x1e>
 800fefe:	2220      	movs	r2, #32
 800ff00:	e7e1      	b.n	800fec6 <__lo0bits+0x1e>
	...

0800ff04 <__i2b>:
 800ff04:	b510      	push	{r4, lr}
 800ff06:	460c      	mov	r4, r1
 800ff08:	2101      	movs	r1, #1
 800ff0a:	f7ff ff05 	bl	800fd18 <_Balloc>
 800ff0e:	4602      	mov	r2, r0
 800ff10:	b928      	cbnz	r0, 800ff1e <__i2b+0x1a>
 800ff12:	4b05      	ldr	r3, [pc, #20]	; (800ff28 <__i2b+0x24>)
 800ff14:	4805      	ldr	r0, [pc, #20]	; (800ff2c <__i2b+0x28>)
 800ff16:	f240 1145 	movw	r1, #325	; 0x145
 800ff1a:	f7ff f89d 	bl	800f058 <__assert_func>
 800ff1e:	2301      	movs	r3, #1
 800ff20:	6144      	str	r4, [r0, #20]
 800ff22:	6103      	str	r3, [r0, #16]
 800ff24:	bd10      	pop	{r4, pc}
 800ff26:	bf00      	nop
 800ff28:	08011266 	.word	0x08011266
 800ff2c:	08011277 	.word	0x08011277

0800ff30 <__multiply>:
 800ff30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff34:	4691      	mov	r9, r2
 800ff36:	690a      	ldr	r2, [r1, #16]
 800ff38:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ff3c:	429a      	cmp	r2, r3
 800ff3e:	bfb8      	it	lt
 800ff40:	460b      	movlt	r3, r1
 800ff42:	460c      	mov	r4, r1
 800ff44:	bfbc      	itt	lt
 800ff46:	464c      	movlt	r4, r9
 800ff48:	4699      	movlt	r9, r3
 800ff4a:	6927      	ldr	r7, [r4, #16]
 800ff4c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ff50:	68a3      	ldr	r3, [r4, #8]
 800ff52:	6861      	ldr	r1, [r4, #4]
 800ff54:	eb07 060a 	add.w	r6, r7, sl
 800ff58:	42b3      	cmp	r3, r6
 800ff5a:	b085      	sub	sp, #20
 800ff5c:	bfb8      	it	lt
 800ff5e:	3101      	addlt	r1, #1
 800ff60:	f7ff feda 	bl	800fd18 <_Balloc>
 800ff64:	b930      	cbnz	r0, 800ff74 <__multiply+0x44>
 800ff66:	4602      	mov	r2, r0
 800ff68:	4b44      	ldr	r3, [pc, #272]	; (801007c <__multiply+0x14c>)
 800ff6a:	4845      	ldr	r0, [pc, #276]	; (8010080 <__multiply+0x150>)
 800ff6c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800ff70:	f7ff f872 	bl	800f058 <__assert_func>
 800ff74:	f100 0514 	add.w	r5, r0, #20
 800ff78:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ff7c:	462b      	mov	r3, r5
 800ff7e:	2200      	movs	r2, #0
 800ff80:	4543      	cmp	r3, r8
 800ff82:	d321      	bcc.n	800ffc8 <__multiply+0x98>
 800ff84:	f104 0314 	add.w	r3, r4, #20
 800ff88:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ff8c:	f109 0314 	add.w	r3, r9, #20
 800ff90:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ff94:	9202      	str	r2, [sp, #8]
 800ff96:	1b3a      	subs	r2, r7, r4
 800ff98:	3a15      	subs	r2, #21
 800ff9a:	f022 0203 	bic.w	r2, r2, #3
 800ff9e:	3204      	adds	r2, #4
 800ffa0:	f104 0115 	add.w	r1, r4, #21
 800ffa4:	428f      	cmp	r7, r1
 800ffa6:	bf38      	it	cc
 800ffa8:	2204      	movcc	r2, #4
 800ffaa:	9201      	str	r2, [sp, #4]
 800ffac:	9a02      	ldr	r2, [sp, #8]
 800ffae:	9303      	str	r3, [sp, #12]
 800ffb0:	429a      	cmp	r2, r3
 800ffb2:	d80c      	bhi.n	800ffce <__multiply+0x9e>
 800ffb4:	2e00      	cmp	r6, #0
 800ffb6:	dd03      	ble.n	800ffc0 <__multiply+0x90>
 800ffb8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d05b      	beq.n	8010078 <__multiply+0x148>
 800ffc0:	6106      	str	r6, [r0, #16]
 800ffc2:	b005      	add	sp, #20
 800ffc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffc8:	f843 2b04 	str.w	r2, [r3], #4
 800ffcc:	e7d8      	b.n	800ff80 <__multiply+0x50>
 800ffce:	f8b3 a000 	ldrh.w	sl, [r3]
 800ffd2:	f1ba 0f00 	cmp.w	sl, #0
 800ffd6:	d024      	beq.n	8010022 <__multiply+0xf2>
 800ffd8:	f104 0e14 	add.w	lr, r4, #20
 800ffdc:	46a9      	mov	r9, r5
 800ffde:	f04f 0c00 	mov.w	ip, #0
 800ffe2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ffe6:	f8d9 1000 	ldr.w	r1, [r9]
 800ffea:	fa1f fb82 	uxth.w	fp, r2
 800ffee:	b289      	uxth	r1, r1
 800fff0:	fb0a 110b 	mla	r1, sl, fp, r1
 800fff4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800fff8:	f8d9 2000 	ldr.w	r2, [r9]
 800fffc:	4461      	add	r1, ip
 800fffe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010002:	fb0a c20b 	mla	r2, sl, fp, ip
 8010006:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801000a:	b289      	uxth	r1, r1
 801000c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010010:	4577      	cmp	r7, lr
 8010012:	f849 1b04 	str.w	r1, [r9], #4
 8010016:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801001a:	d8e2      	bhi.n	800ffe2 <__multiply+0xb2>
 801001c:	9a01      	ldr	r2, [sp, #4]
 801001e:	f845 c002 	str.w	ip, [r5, r2]
 8010022:	9a03      	ldr	r2, [sp, #12]
 8010024:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010028:	3304      	adds	r3, #4
 801002a:	f1b9 0f00 	cmp.w	r9, #0
 801002e:	d021      	beq.n	8010074 <__multiply+0x144>
 8010030:	6829      	ldr	r1, [r5, #0]
 8010032:	f104 0c14 	add.w	ip, r4, #20
 8010036:	46ae      	mov	lr, r5
 8010038:	f04f 0a00 	mov.w	sl, #0
 801003c:	f8bc b000 	ldrh.w	fp, [ip]
 8010040:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010044:	fb09 220b 	mla	r2, r9, fp, r2
 8010048:	4452      	add	r2, sl
 801004a:	b289      	uxth	r1, r1
 801004c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010050:	f84e 1b04 	str.w	r1, [lr], #4
 8010054:	f85c 1b04 	ldr.w	r1, [ip], #4
 8010058:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801005c:	f8be 1000 	ldrh.w	r1, [lr]
 8010060:	fb09 110a 	mla	r1, r9, sl, r1
 8010064:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8010068:	4567      	cmp	r7, ip
 801006a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801006e:	d8e5      	bhi.n	801003c <__multiply+0x10c>
 8010070:	9a01      	ldr	r2, [sp, #4]
 8010072:	50a9      	str	r1, [r5, r2]
 8010074:	3504      	adds	r5, #4
 8010076:	e799      	b.n	800ffac <__multiply+0x7c>
 8010078:	3e01      	subs	r6, #1
 801007a:	e79b      	b.n	800ffb4 <__multiply+0x84>
 801007c:	08011266 	.word	0x08011266
 8010080:	08011277 	.word	0x08011277

08010084 <__pow5mult>:
 8010084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010088:	4615      	mov	r5, r2
 801008a:	f012 0203 	ands.w	r2, r2, #3
 801008e:	4606      	mov	r6, r0
 8010090:	460f      	mov	r7, r1
 8010092:	d007      	beq.n	80100a4 <__pow5mult+0x20>
 8010094:	4c25      	ldr	r4, [pc, #148]	; (801012c <__pow5mult+0xa8>)
 8010096:	3a01      	subs	r2, #1
 8010098:	2300      	movs	r3, #0
 801009a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801009e:	f7ff fe9d 	bl	800fddc <__multadd>
 80100a2:	4607      	mov	r7, r0
 80100a4:	10ad      	asrs	r5, r5, #2
 80100a6:	d03d      	beq.n	8010124 <__pow5mult+0xa0>
 80100a8:	69f4      	ldr	r4, [r6, #28]
 80100aa:	b97c      	cbnz	r4, 80100cc <__pow5mult+0x48>
 80100ac:	2010      	movs	r0, #16
 80100ae:	f7fd ff57 	bl	800df60 <malloc>
 80100b2:	4602      	mov	r2, r0
 80100b4:	61f0      	str	r0, [r6, #28]
 80100b6:	b928      	cbnz	r0, 80100c4 <__pow5mult+0x40>
 80100b8:	4b1d      	ldr	r3, [pc, #116]	; (8010130 <__pow5mult+0xac>)
 80100ba:	481e      	ldr	r0, [pc, #120]	; (8010134 <__pow5mult+0xb0>)
 80100bc:	f240 11b3 	movw	r1, #435	; 0x1b3
 80100c0:	f7fe ffca 	bl	800f058 <__assert_func>
 80100c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80100c8:	6004      	str	r4, [r0, #0]
 80100ca:	60c4      	str	r4, [r0, #12]
 80100cc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80100d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80100d4:	b94c      	cbnz	r4, 80100ea <__pow5mult+0x66>
 80100d6:	f240 2171 	movw	r1, #625	; 0x271
 80100da:	4630      	mov	r0, r6
 80100dc:	f7ff ff12 	bl	800ff04 <__i2b>
 80100e0:	2300      	movs	r3, #0
 80100e2:	f8c8 0008 	str.w	r0, [r8, #8]
 80100e6:	4604      	mov	r4, r0
 80100e8:	6003      	str	r3, [r0, #0]
 80100ea:	f04f 0900 	mov.w	r9, #0
 80100ee:	07eb      	lsls	r3, r5, #31
 80100f0:	d50a      	bpl.n	8010108 <__pow5mult+0x84>
 80100f2:	4639      	mov	r1, r7
 80100f4:	4622      	mov	r2, r4
 80100f6:	4630      	mov	r0, r6
 80100f8:	f7ff ff1a 	bl	800ff30 <__multiply>
 80100fc:	4639      	mov	r1, r7
 80100fe:	4680      	mov	r8, r0
 8010100:	4630      	mov	r0, r6
 8010102:	f7ff fe49 	bl	800fd98 <_Bfree>
 8010106:	4647      	mov	r7, r8
 8010108:	106d      	asrs	r5, r5, #1
 801010a:	d00b      	beq.n	8010124 <__pow5mult+0xa0>
 801010c:	6820      	ldr	r0, [r4, #0]
 801010e:	b938      	cbnz	r0, 8010120 <__pow5mult+0x9c>
 8010110:	4622      	mov	r2, r4
 8010112:	4621      	mov	r1, r4
 8010114:	4630      	mov	r0, r6
 8010116:	f7ff ff0b 	bl	800ff30 <__multiply>
 801011a:	6020      	str	r0, [r4, #0]
 801011c:	f8c0 9000 	str.w	r9, [r0]
 8010120:	4604      	mov	r4, r0
 8010122:	e7e4      	b.n	80100ee <__pow5mult+0x6a>
 8010124:	4638      	mov	r0, r7
 8010126:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801012a:	bf00      	nop
 801012c:	080113c0 	.word	0x080113c0
 8010130:	080111f7 	.word	0x080111f7
 8010134:	08011277 	.word	0x08011277

08010138 <__lshift>:
 8010138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801013c:	460c      	mov	r4, r1
 801013e:	6849      	ldr	r1, [r1, #4]
 8010140:	6923      	ldr	r3, [r4, #16]
 8010142:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010146:	68a3      	ldr	r3, [r4, #8]
 8010148:	4607      	mov	r7, r0
 801014a:	4691      	mov	r9, r2
 801014c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010150:	f108 0601 	add.w	r6, r8, #1
 8010154:	42b3      	cmp	r3, r6
 8010156:	db0b      	blt.n	8010170 <__lshift+0x38>
 8010158:	4638      	mov	r0, r7
 801015a:	f7ff fddd 	bl	800fd18 <_Balloc>
 801015e:	4605      	mov	r5, r0
 8010160:	b948      	cbnz	r0, 8010176 <__lshift+0x3e>
 8010162:	4602      	mov	r2, r0
 8010164:	4b28      	ldr	r3, [pc, #160]	; (8010208 <__lshift+0xd0>)
 8010166:	4829      	ldr	r0, [pc, #164]	; (801020c <__lshift+0xd4>)
 8010168:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801016c:	f7fe ff74 	bl	800f058 <__assert_func>
 8010170:	3101      	adds	r1, #1
 8010172:	005b      	lsls	r3, r3, #1
 8010174:	e7ee      	b.n	8010154 <__lshift+0x1c>
 8010176:	2300      	movs	r3, #0
 8010178:	f100 0114 	add.w	r1, r0, #20
 801017c:	f100 0210 	add.w	r2, r0, #16
 8010180:	4618      	mov	r0, r3
 8010182:	4553      	cmp	r3, sl
 8010184:	db33      	blt.n	80101ee <__lshift+0xb6>
 8010186:	6920      	ldr	r0, [r4, #16]
 8010188:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801018c:	f104 0314 	add.w	r3, r4, #20
 8010190:	f019 091f 	ands.w	r9, r9, #31
 8010194:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010198:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801019c:	d02b      	beq.n	80101f6 <__lshift+0xbe>
 801019e:	f1c9 0e20 	rsb	lr, r9, #32
 80101a2:	468a      	mov	sl, r1
 80101a4:	2200      	movs	r2, #0
 80101a6:	6818      	ldr	r0, [r3, #0]
 80101a8:	fa00 f009 	lsl.w	r0, r0, r9
 80101ac:	4310      	orrs	r0, r2
 80101ae:	f84a 0b04 	str.w	r0, [sl], #4
 80101b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80101b6:	459c      	cmp	ip, r3
 80101b8:	fa22 f20e 	lsr.w	r2, r2, lr
 80101bc:	d8f3      	bhi.n	80101a6 <__lshift+0x6e>
 80101be:	ebac 0304 	sub.w	r3, ip, r4
 80101c2:	3b15      	subs	r3, #21
 80101c4:	f023 0303 	bic.w	r3, r3, #3
 80101c8:	3304      	adds	r3, #4
 80101ca:	f104 0015 	add.w	r0, r4, #21
 80101ce:	4584      	cmp	ip, r0
 80101d0:	bf38      	it	cc
 80101d2:	2304      	movcc	r3, #4
 80101d4:	50ca      	str	r2, [r1, r3]
 80101d6:	b10a      	cbz	r2, 80101dc <__lshift+0xa4>
 80101d8:	f108 0602 	add.w	r6, r8, #2
 80101dc:	3e01      	subs	r6, #1
 80101de:	4638      	mov	r0, r7
 80101e0:	612e      	str	r6, [r5, #16]
 80101e2:	4621      	mov	r1, r4
 80101e4:	f7ff fdd8 	bl	800fd98 <_Bfree>
 80101e8:	4628      	mov	r0, r5
 80101ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101ee:	f842 0f04 	str.w	r0, [r2, #4]!
 80101f2:	3301      	adds	r3, #1
 80101f4:	e7c5      	b.n	8010182 <__lshift+0x4a>
 80101f6:	3904      	subs	r1, #4
 80101f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80101fc:	f841 2f04 	str.w	r2, [r1, #4]!
 8010200:	459c      	cmp	ip, r3
 8010202:	d8f9      	bhi.n	80101f8 <__lshift+0xc0>
 8010204:	e7ea      	b.n	80101dc <__lshift+0xa4>
 8010206:	bf00      	nop
 8010208:	08011266 	.word	0x08011266
 801020c:	08011277 	.word	0x08011277

08010210 <__mcmp>:
 8010210:	b530      	push	{r4, r5, lr}
 8010212:	6902      	ldr	r2, [r0, #16]
 8010214:	690c      	ldr	r4, [r1, #16]
 8010216:	1b12      	subs	r2, r2, r4
 8010218:	d10e      	bne.n	8010238 <__mcmp+0x28>
 801021a:	f100 0314 	add.w	r3, r0, #20
 801021e:	3114      	adds	r1, #20
 8010220:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010224:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010228:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801022c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010230:	42a5      	cmp	r5, r4
 8010232:	d003      	beq.n	801023c <__mcmp+0x2c>
 8010234:	d305      	bcc.n	8010242 <__mcmp+0x32>
 8010236:	2201      	movs	r2, #1
 8010238:	4610      	mov	r0, r2
 801023a:	bd30      	pop	{r4, r5, pc}
 801023c:	4283      	cmp	r3, r0
 801023e:	d3f3      	bcc.n	8010228 <__mcmp+0x18>
 8010240:	e7fa      	b.n	8010238 <__mcmp+0x28>
 8010242:	f04f 32ff 	mov.w	r2, #4294967295
 8010246:	e7f7      	b.n	8010238 <__mcmp+0x28>

08010248 <__mdiff>:
 8010248:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801024c:	460c      	mov	r4, r1
 801024e:	4606      	mov	r6, r0
 8010250:	4611      	mov	r1, r2
 8010252:	4620      	mov	r0, r4
 8010254:	4690      	mov	r8, r2
 8010256:	f7ff ffdb 	bl	8010210 <__mcmp>
 801025a:	1e05      	subs	r5, r0, #0
 801025c:	d110      	bne.n	8010280 <__mdiff+0x38>
 801025e:	4629      	mov	r1, r5
 8010260:	4630      	mov	r0, r6
 8010262:	f7ff fd59 	bl	800fd18 <_Balloc>
 8010266:	b930      	cbnz	r0, 8010276 <__mdiff+0x2e>
 8010268:	4b3a      	ldr	r3, [pc, #232]	; (8010354 <__mdiff+0x10c>)
 801026a:	4602      	mov	r2, r0
 801026c:	f240 2137 	movw	r1, #567	; 0x237
 8010270:	4839      	ldr	r0, [pc, #228]	; (8010358 <__mdiff+0x110>)
 8010272:	f7fe fef1 	bl	800f058 <__assert_func>
 8010276:	2301      	movs	r3, #1
 8010278:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801027c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010280:	bfa4      	itt	ge
 8010282:	4643      	movge	r3, r8
 8010284:	46a0      	movge	r8, r4
 8010286:	4630      	mov	r0, r6
 8010288:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801028c:	bfa6      	itte	ge
 801028e:	461c      	movge	r4, r3
 8010290:	2500      	movge	r5, #0
 8010292:	2501      	movlt	r5, #1
 8010294:	f7ff fd40 	bl	800fd18 <_Balloc>
 8010298:	b920      	cbnz	r0, 80102a4 <__mdiff+0x5c>
 801029a:	4b2e      	ldr	r3, [pc, #184]	; (8010354 <__mdiff+0x10c>)
 801029c:	4602      	mov	r2, r0
 801029e:	f240 2145 	movw	r1, #581	; 0x245
 80102a2:	e7e5      	b.n	8010270 <__mdiff+0x28>
 80102a4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80102a8:	6926      	ldr	r6, [r4, #16]
 80102aa:	60c5      	str	r5, [r0, #12]
 80102ac:	f104 0914 	add.w	r9, r4, #20
 80102b0:	f108 0514 	add.w	r5, r8, #20
 80102b4:	f100 0e14 	add.w	lr, r0, #20
 80102b8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80102bc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80102c0:	f108 0210 	add.w	r2, r8, #16
 80102c4:	46f2      	mov	sl, lr
 80102c6:	2100      	movs	r1, #0
 80102c8:	f859 3b04 	ldr.w	r3, [r9], #4
 80102cc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80102d0:	fa11 f88b 	uxtah	r8, r1, fp
 80102d4:	b299      	uxth	r1, r3
 80102d6:	0c1b      	lsrs	r3, r3, #16
 80102d8:	eba8 0801 	sub.w	r8, r8, r1
 80102dc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80102e0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80102e4:	fa1f f888 	uxth.w	r8, r8
 80102e8:	1419      	asrs	r1, r3, #16
 80102ea:	454e      	cmp	r6, r9
 80102ec:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80102f0:	f84a 3b04 	str.w	r3, [sl], #4
 80102f4:	d8e8      	bhi.n	80102c8 <__mdiff+0x80>
 80102f6:	1b33      	subs	r3, r6, r4
 80102f8:	3b15      	subs	r3, #21
 80102fa:	f023 0303 	bic.w	r3, r3, #3
 80102fe:	3304      	adds	r3, #4
 8010300:	3415      	adds	r4, #21
 8010302:	42a6      	cmp	r6, r4
 8010304:	bf38      	it	cc
 8010306:	2304      	movcc	r3, #4
 8010308:	441d      	add	r5, r3
 801030a:	4473      	add	r3, lr
 801030c:	469e      	mov	lr, r3
 801030e:	462e      	mov	r6, r5
 8010310:	4566      	cmp	r6, ip
 8010312:	d30e      	bcc.n	8010332 <__mdiff+0xea>
 8010314:	f10c 0203 	add.w	r2, ip, #3
 8010318:	1b52      	subs	r2, r2, r5
 801031a:	f022 0203 	bic.w	r2, r2, #3
 801031e:	3d03      	subs	r5, #3
 8010320:	45ac      	cmp	ip, r5
 8010322:	bf38      	it	cc
 8010324:	2200      	movcc	r2, #0
 8010326:	4413      	add	r3, r2
 8010328:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801032c:	b17a      	cbz	r2, 801034e <__mdiff+0x106>
 801032e:	6107      	str	r7, [r0, #16]
 8010330:	e7a4      	b.n	801027c <__mdiff+0x34>
 8010332:	f856 8b04 	ldr.w	r8, [r6], #4
 8010336:	fa11 f288 	uxtah	r2, r1, r8
 801033a:	1414      	asrs	r4, r2, #16
 801033c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010340:	b292      	uxth	r2, r2
 8010342:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010346:	f84e 2b04 	str.w	r2, [lr], #4
 801034a:	1421      	asrs	r1, r4, #16
 801034c:	e7e0      	b.n	8010310 <__mdiff+0xc8>
 801034e:	3f01      	subs	r7, #1
 8010350:	e7ea      	b.n	8010328 <__mdiff+0xe0>
 8010352:	bf00      	nop
 8010354:	08011266 	.word	0x08011266
 8010358:	08011277 	.word	0x08011277

0801035c <__d2b>:
 801035c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010360:	460f      	mov	r7, r1
 8010362:	2101      	movs	r1, #1
 8010364:	ec59 8b10 	vmov	r8, r9, d0
 8010368:	4616      	mov	r6, r2
 801036a:	f7ff fcd5 	bl	800fd18 <_Balloc>
 801036e:	4604      	mov	r4, r0
 8010370:	b930      	cbnz	r0, 8010380 <__d2b+0x24>
 8010372:	4602      	mov	r2, r0
 8010374:	4b24      	ldr	r3, [pc, #144]	; (8010408 <__d2b+0xac>)
 8010376:	4825      	ldr	r0, [pc, #148]	; (801040c <__d2b+0xb0>)
 8010378:	f240 310f 	movw	r1, #783	; 0x30f
 801037c:	f7fe fe6c 	bl	800f058 <__assert_func>
 8010380:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010384:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010388:	bb2d      	cbnz	r5, 80103d6 <__d2b+0x7a>
 801038a:	9301      	str	r3, [sp, #4]
 801038c:	f1b8 0300 	subs.w	r3, r8, #0
 8010390:	d026      	beq.n	80103e0 <__d2b+0x84>
 8010392:	4668      	mov	r0, sp
 8010394:	9300      	str	r3, [sp, #0]
 8010396:	f7ff fd87 	bl	800fea8 <__lo0bits>
 801039a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801039e:	b1e8      	cbz	r0, 80103dc <__d2b+0x80>
 80103a0:	f1c0 0320 	rsb	r3, r0, #32
 80103a4:	fa02 f303 	lsl.w	r3, r2, r3
 80103a8:	430b      	orrs	r3, r1
 80103aa:	40c2      	lsrs	r2, r0
 80103ac:	6163      	str	r3, [r4, #20]
 80103ae:	9201      	str	r2, [sp, #4]
 80103b0:	9b01      	ldr	r3, [sp, #4]
 80103b2:	61a3      	str	r3, [r4, #24]
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	bf14      	ite	ne
 80103b8:	2202      	movne	r2, #2
 80103ba:	2201      	moveq	r2, #1
 80103bc:	6122      	str	r2, [r4, #16]
 80103be:	b1bd      	cbz	r5, 80103f0 <__d2b+0x94>
 80103c0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80103c4:	4405      	add	r5, r0
 80103c6:	603d      	str	r5, [r7, #0]
 80103c8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80103cc:	6030      	str	r0, [r6, #0]
 80103ce:	4620      	mov	r0, r4
 80103d0:	b003      	add	sp, #12
 80103d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80103d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80103da:	e7d6      	b.n	801038a <__d2b+0x2e>
 80103dc:	6161      	str	r1, [r4, #20]
 80103de:	e7e7      	b.n	80103b0 <__d2b+0x54>
 80103e0:	a801      	add	r0, sp, #4
 80103e2:	f7ff fd61 	bl	800fea8 <__lo0bits>
 80103e6:	9b01      	ldr	r3, [sp, #4]
 80103e8:	6163      	str	r3, [r4, #20]
 80103ea:	3020      	adds	r0, #32
 80103ec:	2201      	movs	r2, #1
 80103ee:	e7e5      	b.n	80103bc <__d2b+0x60>
 80103f0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80103f4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80103f8:	6038      	str	r0, [r7, #0]
 80103fa:	6918      	ldr	r0, [r3, #16]
 80103fc:	f7ff fd34 	bl	800fe68 <__hi0bits>
 8010400:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010404:	e7e2      	b.n	80103cc <__d2b+0x70>
 8010406:	bf00      	nop
 8010408:	08011266 	.word	0x08011266
 801040c:	08011277 	.word	0x08011277

08010410 <__ssputs_r>:
 8010410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010414:	688e      	ldr	r6, [r1, #8]
 8010416:	461f      	mov	r7, r3
 8010418:	42be      	cmp	r6, r7
 801041a:	680b      	ldr	r3, [r1, #0]
 801041c:	4682      	mov	sl, r0
 801041e:	460c      	mov	r4, r1
 8010420:	4690      	mov	r8, r2
 8010422:	d82c      	bhi.n	801047e <__ssputs_r+0x6e>
 8010424:	898a      	ldrh	r2, [r1, #12]
 8010426:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801042a:	d026      	beq.n	801047a <__ssputs_r+0x6a>
 801042c:	6965      	ldr	r5, [r4, #20]
 801042e:	6909      	ldr	r1, [r1, #16]
 8010430:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010434:	eba3 0901 	sub.w	r9, r3, r1
 8010438:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801043c:	1c7b      	adds	r3, r7, #1
 801043e:	444b      	add	r3, r9
 8010440:	106d      	asrs	r5, r5, #1
 8010442:	429d      	cmp	r5, r3
 8010444:	bf38      	it	cc
 8010446:	461d      	movcc	r5, r3
 8010448:	0553      	lsls	r3, r2, #21
 801044a:	d527      	bpl.n	801049c <__ssputs_r+0x8c>
 801044c:	4629      	mov	r1, r5
 801044e:	f7fd fdb7 	bl	800dfc0 <_malloc_r>
 8010452:	4606      	mov	r6, r0
 8010454:	b360      	cbz	r0, 80104b0 <__ssputs_r+0xa0>
 8010456:	6921      	ldr	r1, [r4, #16]
 8010458:	464a      	mov	r2, r9
 801045a:	f7fe fdee 	bl	800f03a <memcpy>
 801045e:	89a3      	ldrh	r3, [r4, #12]
 8010460:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010468:	81a3      	strh	r3, [r4, #12]
 801046a:	6126      	str	r6, [r4, #16]
 801046c:	6165      	str	r5, [r4, #20]
 801046e:	444e      	add	r6, r9
 8010470:	eba5 0509 	sub.w	r5, r5, r9
 8010474:	6026      	str	r6, [r4, #0]
 8010476:	60a5      	str	r5, [r4, #8]
 8010478:	463e      	mov	r6, r7
 801047a:	42be      	cmp	r6, r7
 801047c:	d900      	bls.n	8010480 <__ssputs_r+0x70>
 801047e:	463e      	mov	r6, r7
 8010480:	6820      	ldr	r0, [r4, #0]
 8010482:	4632      	mov	r2, r6
 8010484:	4641      	mov	r1, r8
 8010486:	f7fe fccd 	bl	800ee24 <memmove>
 801048a:	68a3      	ldr	r3, [r4, #8]
 801048c:	1b9b      	subs	r3, r3, r6
 801048e:	60a3      	str	r3, [r4, #8]
 8010490:	6823      	ldr	r3, [r4, #0]
 8010492:	4433      	add	r3, r6
 8010494:	6023      	str	r3, [r4, #0]
 8010496:	2000      	movs	r0, #0
 8010498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801049c:	462a      	mov	r2, r5
 801049e:	f000 fbc6 	bl	8010c2e <_realloc_r>
 80104a2:	4606      	mov	r6, r0
 80104a4:	2800      	cmp	r0, #0
 80104a6:	d1e0      	bne.n	801046a <__ssputs_r+0x5a>
 80104a8:	6921      	ldr	r1, [r4, #16]
 80104aa:	4650      	mov	r0, sl
 80104ac:	f7ff fbe8 	bl	800fc80 <_free_r>
 80104b0:	230c      	movs	r3, #12
 80104b2:	f8ca 3000 	str.w	r3, [sl]
 80104b6:	89a3      	ldrh	r3, [r4, #12]
 80104b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80104bc:	81a3      	strh	r3, [r4, #12]
 80104be:	f04f 30ff 	mov.w	r0, #4294967295
 80104c2:	e7e9      	b.n	8010498 <__ssputs_r+0x88>

080104c4 <_svfiprintf_r>:
 80104c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104c8:	4698      	mov	r8, r3
 80104ca:	898b      	ldrh	r3, [r1, #12]
 80104cc:	061b      	lsls	r3, r3, #24
 80104ce:	b09d      	sub	sp, #116	; 0x74
 80104d0:	4607      	mov	r7, r0
 80104d2:	460d      	mov	r5, r1
 80104d4:	4614      	mov	r4, r2
 80104d6:	d50e      	bpl.n	80104f6 <_svfiprintf_r+0x32>
 80104d8:	690b      	ldr	r3, [r1, #16]
 80104da:	b963      	cbnz	r3, 80104f6 <_svfiprintf_r+0x32>
 80104dc:	2140      	movs	r1, #64	; 0x40
 80104de:	f7fd fd6f 	bl	800dfc0 <_malloc_r>
 80104e2:	6028      	str	r0, [r5, #0]
 80104e4:	6128      	str	r0, [r5, #16]
 80104e6:	b920      	cbnz	r0, 80104f2 <_svfiprintf_r+0x2e>
 80104e8:	230c      	movs	r3, #12
 80104ea:	603b      	str	r3, [r7, #0]
 80104ec:	f04f 30ff 	mov.w	r0, #4294967295
 80104f0:	e0d0      	b.n	8010694 <_svfiprintf_r+0x1d0>
 80104f2:	2340      	movs	r3, #64	; 0x40
 80104f4:	616b      	str	r3, [r5, #20]
 80104f6:	2300      	movs	r3, #0
 80104f8:	9309      	str	r3, [sp, #36]	; 0x24
 80104fa:	2320      	movs	r3, #32
 80104fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010500:	f8cd 800c 	str.w	r8, [sp, #12]
 8010504:	2330      	movs	r3, #48	; 0x30
 8010506:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80106ac <_svfiprintf_r+0x1e8>
 801050a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801050e:	f04f 0901 	mov.w	r9, #1
 8010512:	4623      	mov	r3, r4
 8010514:	469a      	mov	sl, r3
 8010516:	f813 2b01 	ldrb.w	r2, [r3], #1
 801051a:	b10a      	cbz	r2, 8010520 <_svfiprintf_r+0x5c>
 801051c:	2a25      	cmp	r2, #37	; 0x25
 801051e:	d1f9      	bne.n	8010514 <_svfiprintf_r+0x50>
 8010520:	ebba 0b04 	subs.w	fp, sl, r4
 8010524:	d00b      	beq.n	801053e <_svfiprintf_r+0x7a>
 8010526:	465b      	mov	r3, fp
 8010528:	4622      	mov	r2, r4
 801052a:	4629      	mov	r1, r5
 801052c:	4638      	mov	r0, r7
 801052e:	f7ff ff6f 	bl	8010410 <__ssputs_r>
 8010532:	3001      	adds	r0, #1
 8010534:	f000 80a9 	beq.w	801068a <_svfiprintf_r+0x1c6>
 8010538:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801053a:	445a      	add	r2, fp
 801053c:	9209      	str	r2, [sp, #36]	; 0x24
 801053e:	f89a 3000 	ldrb.w	r3, [sl]
 8010542:	2b00      	cmp	r3, #0
 8010544:	f000 80a1 	beq.w	801068a <_svfiprintf_r+0x1c6>
 8010548:	2300      	movs	r3, #0
 801054a:	f04f 32ff 	mov.w	r2, #4294967295
 801054e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010552:	f10a 0a01 	add.w	sl, sl, #1
 8010556:	9304      	str	r3, [sp, #16]
 8010558:	9307      	str	r3, [sp, #28]
 801055a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801055e:	931a      	str	r3, [sp, #104]	; 0x68
 8010560:	4654      	mov	r4, sl
 8010562:	2205      	movs	r2, #5
 8010564:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010568:	4850      	ldr	r0, [pc, #320]	; (80106ac <_svfiprintf_r+0x1e8>)
 801056a:	f7ef fed1 	bl	8000310 <memchr>
 801056e:	9a04      	ldr	r2, [sp, #16]
 8010570:	b9d8      	cbnz	r0, 80105aa <_svfiprintf_r+0xe6>
 8010572:	06d0      	lsls	r0, r2, #27
 8010574:	bf44      	itt	mi
 8010576:	2320      	movmi	r3, #32
 8010578:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801057c:	0711      	lsls	r1, r2, #28
 801057e:	bf44      	itt	mi
 8010580:	232b      	movmi	r3, #43	; 0x2b
 8010582:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010586:	f89a 3000 	ldrb.w	r3, [sl]
 801058a:	2b2a      	cmp	r3, #42	; 0x2a
 801058c:	d015      	beq.n	80105ba <_svfiprintf_r+0xf6>
 801058e:	9a07      	ldr	r2, [sp, #28]
 8010590:	4654      	mov	r4, sl
 8010592:	2000      	movs	r0, #0
 8010594:	f04f 0c0a 	mov.w	ip, #10
 8010598:	4621      	mov	r1, r4
 801059a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801059e:	3b30      	subs	r3, #48	; 0x30
 80105a0:	2b09      	cmp	r3, #9
 80105a2:	d94d      	bls.n	8010640 <_svfiprintf_r+0x17c>
 80105a4:	b1b0      	cbz	r0, 80105d4 <_svfiprintf_r+0x110>
 80105a6:	9207      	str	r2, [sp, #28]
 80105a8:	e014      	b.n	80105d4 <_svfiprintf_r+0x110>
 80105aa:	eba0 0308 	sub.w	r3, r0, r8
 80105ae:	fa09 f303 	lsl.w	r3, r9, r3
 80105b2:	4313      	orrs	r3, r2
 80105b4:	9304      	str	r3, [sp, #16]
 80105b6:	46a2      	mov	sl, r4
 80105b8:	e7d2      	b.n	8010560 <_svfiprintf_r+0x9c>
 80105ba:	9b03      	ldr	r3, [sp, #12]
 80105bc:	1d19      	adds	r1, r3, #4
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	9103      	str	r1, [sp, #12]
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	bfbb      	ittet	lt
 80105c6:	425b      	neglt	r3, r3
 80105c8:	f042 0202 	orrlt.w	r2, r2, #2
 80105cc:	9307      	strge	r3, [sp, #28]
 80105ce:	9307      	strlt	r3, [sp, #28]
 80105d0:	bfb8      	it	lt
 80105d2:	9204      	strlt	r2, [sp, #16]
 80105d4:	7823      	ldrb	r3, [r4, #0]
 80105d6:	2b2e      	cmp	r3, #46	; 0x2e
 80105d8:	d10c      	bne.n	80105f4 <_svfiprintf_r+0x130>
 80105da:	7863      	ldrb	r3, [r4, #1]
 80105dc:	2b2a      	cmp	r3, #42	; 0x2a
 80105de:	d134      	bne.n	801064a <_svfiprintf_r+0x186>
 80105e0:	9b03      	ldr	r3, [sp, #12]
 80105e2:	1d1a      	adds	r2, r3, #4
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	9203      	str	r2, [sp, #12]
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	bfb8      	it	lt
 80105ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80105f0:	3402      	adds	r4, #2
 80105f2:	9305      	str	r3, [sp, #20]
 80105f4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80106bc <_svfiprintf_r+0x1f8>
 80105f8:	7821      	ldrb	r1, [r4, #0]
 80105fa:	2203      	movs	r2, #3
 80105fc:	4650      	mov	r0, sl
 80105fe:	f7ef fe87 	bl	8000310 <memchr>
 8010602:	b138      	cbz	r0, 8010614 <_svfiprintf_r+0x150>
 8010604:	9b04      	ldr	r3, [sp, #16]
 8010606:	eba0 000a 	sub.w	r0, r0, sl
 801060a:	2240      	movs	r2, #64	; 0x40
 801060c:	4082      	lsls	r2, r0
 801060e:	4313      	orrs	r3, r2
 8010610:	3401      	adds	r4, #1
 8010612:	9304      	str	r3, [sp, #16]
 8010614:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010618:	4825      	ldr	r0, [pc, #148]	; (80106b0 <_svfiprintf_r+0x1ec>)
 801061a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801061e:	2206      	movs	r2, #6
 8010620:	f7ef fe76 	bl	8000310 <memchr>
 8010624:	2800      	cmp	r0, #0
 8010626:	d038      	beq.n	801069a <_svfiprintf_r+0x1d6>
 8010628:	4b22      	ldr	r3, [pc, #136]	; (80106b4 <_svfiprintf_r+0x1f0>)
 801062a:	bb1b      	cbnz	r3, 8010674 <_svfiprintf_r+0x1b0>
 801062c:	9b03      	ldr	r3, [sp, #12]
 801062e:	3307      	adds	r3, #7
 8010630:	f023 0307 	bic.w	r3, r3, #7
 8010634:	3308      	adds	r3, #8
 8010636:	9303      	str	r3, [sp, #12]
 8010638:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801063a:	4433      	add	r3, r6
 801063c:	9309      	str	r3, [sp, #36]	; 0x24
 801063e:	e768      	b.n	8010512 <_svfiprintf_r+0x4e>
 8010640:	fb0c 3202 	mla	r2, ip, r2, r3
 8010644:	460c      	mov	r4, r1
 8010646:	2001      	movs	r0, #1
 8010648:	e7a6      	b.n	8010598 <_svfiprintf_r+0xd4>
 801064a:	2300      	movs	r3, #0
 801064c:	3401      	adds	r4, #1
 801064e:	9305      	str	r3, [sp, #20]
 8010650:	4619      	mov	r1, r3
 8010652:	f04f 0c0a 	mov.w	ip, #10
 8010656:	4620      	mov	r0, r4
 8010658:	f810 2b01 	ldrb.w	r2, [r0], #1
 801065c:	3a30      	subs	r2, #48	; 0x30
 801065e:	2a09      	cmp	r2, #9
 8010660:	d903      	bls.n	801066a <_svfiprintf_r+0x1a6>
 8010662:	2b00      	cmp	r3, #0
 8010664:	d0c6      	beq.n	80105f4 <_svfiprintf_r+0x130>
 8010666:	9105      	str	r1, [sp, #20]
 8010668:	e7c4      	b.n	80105f4 <_svfiprintf_r+0x130>
 801066a:	fb0c 2101 	mla	r1, ip, r1, r2
 801066e:	4604      	mov	r4, r0
 8010670:	2301      	movs	r3, #1
 8010672:	e7f0      	b.n	8010656 <_svfiprintf_r+0x192>
 8010674:	ab03      	add	r3, sp, #12
 8010676:	9300      	str	r3, [sp, #0]
 8010678:	462a      	mov	r2, r5
 801067a:	4b0f      	ldr	r3, [pc, #60]	; (80106b8 <_svfiprintf_r+0x1f4>)
 801067c:	a904      	add	r1, sp, #16
 801067e:	4638      	mov	r0, r7
 8010680:	f7fd fdba 	bl	800e1f8 <_printf_float>
 8010684:	1c42      	adds	r2, r0, #1
 8010686:	4606      	mov	r6, r0
 8010688:	d1d6      	bne.n	8010638 <_svfiprintf_r+0x174>
 801068a:	89ab      	ldrh	r3, [r5, #12]
 801068c:	065b      	lsls	r3, r3, #25
 801068e:	f53f af2d 	bmi.w	80104ec <_svfiprintf_r+0x28>
 8010692:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010694:	b01d      	add	sp, #116	; 0x74
 8010696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801069a:	ab03      	add	r3, sp, #12
 801069c:	9300      	str	r3, [sp, #0]
 801069e:	462a      	mov	r2, r5
 80106a0:	4b05      	ldr	r3, [pc, #20]	; (80106b8 <_svfiprintf_r+0x1f4>)
 80106a2:	a904      	add	r1, sp, #16
 80106a4:	4638      	mov	r0, r7
 80106a6:	f7fe f82f 	bl	800e708 <_printf_i>
 80106aa:	e7eb      	b.n	8010684 <_svfiprintf_r+0x1c0>
 80106ac:	080113cc 	.word	0x080113cc
 80106b0:	080113d6 	.word	0x080113d6
 80106b4:	0800e1f9 	.word	0x0800e1f9
 80106b8:	08010411 	.word	0x08010411
 80106bc:	080113d2 	.word	0x080113d2

080106c0 <__sfputc_r>:
 80106c0:	6893      	ldr	r3, [r2, #8]
 80106c2:	3b01      	subs	r3, #1
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	b410      	push	{r4}
 80106c8:	6093      	str	r3, [r2, #8]
 80106ca:	da08      	bge.n	80106de <__sfputc_r+0x1e>
 80106cc:	6994      	ldr	r4, [r2, #24]
 80106ce:	42a3      	cmp	r3, r4
 80106d0:	db01      	blt.n	80106d6 <__sfputc_r+0x16>
 80106d2:	290a      	cmp	r1, #10
 80106d4:	d103      	bne.n	80106de <__sfputc_r+0x1e>
 80106d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80106da:	f7fe bafe 	b.w	800ecda <__swbuf_r>
 80106de:	6813      	ldr	r3, [r2, #0]
 80106e0:	1c58      	adds	r0, r3, #1
 80106e2:	6010      	str	r0, [r2, #0]
 80106e4:	7019      	strb	r1, [r3, #0]
 80106e6:	4608      	mov	r0, r1
 80106e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80106ec:	4770      	bx	lr

080106ee <__sfputs_r>:
 80106ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106f0:	4606      	mov	r6, r0
 80106f2:	460f      	mov	r7, r1
 80106f4:	4614      	mov	r4, r2
 80106f6:	18d5      	adds	r5, r2, r3
 80106f8:	42ac      	cmp	r4, r5
 80106fa:	d101      	bne.n	8010700 <__sfputs_r+0x12>
 80106fc:	2000      	movs	r0, #0
 80106fe:	e007      	b.n	8010710 <__sfputs_r+0x22>
 8010700:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010704:	463a      	mov	r2, r7
 8010706:	4630      	mov	r0, r6
 8010708:	f7ff ffda 	bl	80106c0 <__sfputc_r>
 801070c:	1c43      	adds	r3, r0, #1
 801070e:	d1f3      	bne.n	80106f8 <__sfputs_r+0xa>
 8010710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010714 <_vfiprintf_r>:
 8010714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010718:	460d      	mov	r5, r1
 801071a:	b09d      	sub	sp, #116	; 0x74
 801071c:	4614      	mov	r4, r2
 801071e:	4698      	mov	r8, r3
 8010720:	4606      	mov	r6, r0
 8010722:	b118      	cbz	r0, 801072c <_vfiprintf_r+0x18>
 8010724:	6a03      	ldr	r3, [r0, #32]
 8010726:	b90b      	cbnz	r3, 801072c <_vfiprintf_r+0x18>
 8010728:	f7fe f99c 	bl	800ea64 <__sinit>
 801072c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801072e:	07d9      	lsls	r1, r3, #31
 8010730:	d405      	bmi.n	801073e <_vfiprintf_r+0x2a>
 8010732:	89ab      	ldrh	r3, [r5, #12]
 8010734:	059a      	lsls	r2, r3, #22
 8010736:	d402      	bmi.n	801073e <_vfiprintf_r+0x2a>
 8010738:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801073a:	f7fe fc7c 	bl	800f036 <__retarget_lock_acquire_recursive>
 801073e:	89ab      	ldrh	r3, [r5, #12]
 8010740:	071b      	lsls	r3, r3, #28
 8010742:	d501      	bpl.n	8010748 <_vfiprintf_r+0x34>
 8010744:	692b      	ldr	r3, [r5, #16]
 8010746:	b99b      	cbnz	r3, 8010770 <_vfiprintf_r+0x5c>
 8010748:	4629      	mov	r1, r5
 801074a:	4630      	mov	r0, r6
 801074c:	f7fe fb02 	bl	800ed54 <__swsetup_r>
 8010750:	b170      	cbz	r0, 8010770 <_vfiprintf_r+0x5c>
 8010752:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010754:	07dc      	lsls	r4, r3, #31
 8010756:	d504      	bpl.n	8010762 <_vfiprintf_r+0x4e>
 8010758:	f04f 30ff 	mov.w	r0, #4294967295
 801075c:	b01d      	add	sp, #116	; 0x74
 801075e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010762:	89ab      	ldrh	r3, [r5, #12]
 8010764:	0598      	lsls	r0, r3, #22
 8010766:	d4f7      	bmi.n	8010758 <_vfiprintf_r+0x44>
 8010768:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801076a:	f7fe fc65 	bl	800f038 <__retarget_lock_release_recursive>
 801076e:	e7f3      	b.n	8010758 <_vfiprintf_r+0x44>
 8010770:	2300      	movs	r3, #0
 8010772:	9309      	str	r3, [sp, #36]	; 0x24
 8010774:	2320      	movs	r3, #32
 8010776:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801077a:	f8cd 800c 	str.w	r8, [sp, #12]
 801077e:	2330      	movs	r3, #48	; 0x30
 8010780:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8010934 <_vfiprintf_r+0x220>
 8010784:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010788:	f04f 0901 	mov.w	r9, #1
 801078c:	4623      	mov	r3, r4
 801078e:	469a      	mov	sl, r3
 8010790:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010794:	b10a      	cbz	r2, 801079a <_vfiprintf_r+0x86>
 8010796:	2a25      	cmp	r2, #37	; 0x25
 8010798:	d1f9      	bne.n	801078e <_vfiprintf_r+0x7a>
 801079a:	ebba 0b04 	subs.w	fp, sl, r4
 801079e:	d00b      	beq.n	80107b8 <_vfiprintf_r+0xa4>
 80107a0:	465b      	mov	r3, fp
 80107a2:	4622      	mov	r2, r4
 80107a4:	4629      	mov	r1, r5
 80107a6:	4630      	mov	r0, r6
 80107a8:	f7ff ffa1 	bl	80106ee <__sfputs_r>
 80107ac:	3001      	adds	r0, #1
 80107ae:	f000 80a9 	beq.w	8010904 <_vfiprintf_r+0x1f0>
 80107b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80107b4:	445a      	add	r2, fp
 80107b6:	9209      	str	r2, [sp, #36]	; 0x24
 80107b8:	f89a 3000 	ldrb.w	r3, [sl]
 80107bc:	2b00      	cmp	r3, #0
 80107be:	f000 80a1 	beq.w	8010904 <_vfiprintf_r+0x1f0>
 80107c2:	2300      	movs	r3, #0
 80107c4:	f04f 32ff 	mov.w	r2, #4294967295
 80107c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80107cc:	f10a 0a01 	add.w	sl, sl, #1
 80107d0:	9304      	str	r3, [sp, #16]
 80107d2:	9307      	str	r3, [sp, #28]
 80107d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80107d8:	931a      	str	r3, [sp, #104]	; 0x68
 80107da:	4654      	mov	r4, sl
 80107dc:	2205      	movs	r2, #5
 80107de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80107e2:	4854      	ldr	r0, [pc, #336]	; (8010934 <_vfiprintf_r+0x220>)
 80107e4:	f7ef fd94 	bl	8000310 <memchr>
 80107e8:	9a04      	ldr	r2, [sp, #16]
 80107ea:	b9d8      	cbnz	r0, 8010824 <_vfiprintf_r+0x110>
 80107ec:	06d1      	lsls	r1, r2, #27
 80107ee:	bf44      	itt	mi
 80107f0:	2320      	movmi	r3, #32
 80107f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80107f6:	0713      	lsls	r3, r2, #28
 80107f8:	bf44      	itt	mi
 80107fa:	232b      	movmi	r3, #43	; 0x2b
 80107fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010800:	f89a 3000 	ldrb.w	r3, [sl]
 8010804:	2b2a      	cmp	r3, #42	; 0x2a
 8010806:	d015      	beq.n	8010834 <_vfiprintf_r+0x120>
 8010808:	9a07      	ldr	r2, [sp, #28]
 801080a:	4654      	mov	r4, sl
 801080c:	2000      	movs	r0, #0
 801080e:	f04f 0c0a 	mov.w	ip, #10
 8010812:	4621      	mov	r1, r4
 8010814:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010818:	3b30      	subs	r3, #48	; 0x30
 801081a:	2b09      	cmp	r3, #9
 801081c:	d94d      	bls.n	80108ba <_vfiprintf_r+0x1a6>
 801081e:	b1b0      	cbz	r0, 801084e <_vfiprintf_r+0x13a>
 8010820:	9207      	str	r2, [sp, #28]
 8010822:	e014      	b.n	801084e <_vfiprintf_r+0x13a>
 8010824:	eba0 0308 	sub.w	r3, r0, r8
 8010828:	fa09 f303 	lsl.w	r3, r9, r3
 801082c:	4313      	orrs	r3, r2
 801082e:	9304      	str	r3, [sp, #16]
 8010830:	46a2      	mov	sl, r4
 8010832:	e7d2      	b.n	80107da <_vfiprintf_r+0xc6>
 8010834:	9b03      	ldr	r3, [sp, #12]
 8010836:	1d19      	adds	r1, r3, #4
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	9103      	str	r1, [sp, #12]
 801083c:	2b00      	cmp	r3, #0
 801083e:	bfbb      	ittet	lt
 8010840:	425b      	neglt	r3, r3
 8010842:	f042 0202 	orrlt.w	r2, r2, #2
 8010846:	9307      	strge	r3, [sp, #28]
 8010848:	9307      	strlt	r3, [sp, #28]
 801084a:	bfb8      	it	lt
 801084c:	9204      	strlt	r2, [sp, #16]
 801084e:	7823      	ldrb	r3, [r4, #0]
 8010850:	2b2e      	cmp	r3, #46	; 0x2e
 8010852:	d10c      	bne.n	801086e <_vfiprintf_r+0x15a>
 8010854:	7863      	ldrb	r3, [r4, #1]
 8010856:	2b2a      	cmp	r3, #42	; 0x2a
 8010858:	d134      	bne.n	80108c4 <_vfiprintf_r+0x1b0>
 801085a:	9b03      	ldr	r3, [sp, #12]
 801085c:	1d1a      	adds	r2, r3, #4
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	9203      	str	r2, [sp, #12]
 8010862:	2b00      	cmp	r3, #0
 8010864:	bfb8      	it	lt
 8010866:	f04f 33ff 	movlt.w	r3, #4294967295
 801086a:	3402      	adds	r4, #2
 801086c:	9305      	str	r3, [sp, #20]
 801086e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8010944 <_vfiprintf_r+0x230>
 8010872:	7821      	ldrb	r1, [r4, #0]
 8010874:	2203      	movs	r2, #3
 8010876:	4650      	mov	r0, sl
 8010878:	f7ef fd4a 	bl	8000310 <memchr>
 801087c:	b138      	cbz	r0, 801088e <_vfiprintf_r+0x17a>
 801087e:	9b04      	ldr	r3, [sp, #16]
 8010880:	eba0 000a 	sub.w	r0, r0, sl
 8010884:	2240      	movs	r2, #64	; 0x40
 8010886:	4082      	lsls	r2, r0
 8010888:	4313      	orrs	r3, r2
 801088a:	3401      	adds	r4, #1
 801088c:	9304      	str	r3, [sp, #16]
 801088e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010892:	4829      	ldr	r0, [pc, #164]	; (8010938 <_vfiprintf_r+0x224>)
 8010894:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010898:	2206      	movs	r2, #6
 801089a:	f7ef fd39 	bl	8000310 <memchr>
 801089e:	2800      	cmp	r0, #0
 80108a0:	d03f      	beq.n	8010922 <_vfiprintf_r+0x20e>
 80108a2:	4b26      	ldr	r3, [pc, #152]	; (801093c <_vfiprintf_r+0x228>)
 80108a4:	bb1b      	cbnz	r3, 80108ee <_vfiprintf_r+0x1da>
 80108a6:	9b03      	ldr	r3, [sp, #12]
 80108a8:	3307      	adds	r3, #7
 80108aa:	f023 0307 	bic.w	r3, r3, #7
 80108ae:	3308      	adds	r3, #8
 80108b0:	9303      	str	r3, [sp, #12]
 80108b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80108b4:	443b      	add	r3, r7
 80108b6:	9309      	str	r3, [sp, #36]	; 0x24
 80108b8:	e768      	b.n	801078c <_vfiprintf_r+0x78>
 80108ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80108be:	460c      	mov	r4, r1
 80108c0:	2001      	movs	r0, #1
 80108c2:	e7a6      	b.n	8010812 <_vfiprintf_r+0xfe>
 80108c4:	2300      	movs	r3, #0
 80108c6:	3401      	adds	r4, #1
 80108c8:	9305      	str	r3, [sp, #20]
 80108ca:	4619      	mov	r1, r3
 80108cc:	f04f 0c0a 	mov.w	ip, #10
 80108d0:	4620      	mov	r0, r4
 80108d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80108d6:	3a30      	subs	r2, #48	; 0x30
 80108d8:	2a09      	cmp	r2, #9
 80108da:	d903      	bls.n	80108e4 <_vfiprintf_r+0x1d0>
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d0c6      	beq.n	801086e <_vfiprintf_r+0x15a>
 80108e0:	9105      	str	r1, [sp, #20]
 80108e2:	e7c4      	b.n	801086e <_vfiprintf_r+0x15a>
 80108e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80108e8:	4604      	mov	r4, r0
 80108ea:	2301      	movs	r3, #1
 80108ec:	e7f0      	b.n	80108d0 <_vfiprintf_r+0x1bc>
 80108ee:	ab03      	add	r3, sp, #12
 80108f0:	9300      	str	r3, [sp, #0]
 80108f2:	462a      	mov	r2, r5
 80108f4:	4b12      	ldr	r3, [pc, #72]	; (8010940 <_vfiprintf_r+0x22c>)
 80108f6:	a904      	add	r1, sp, #16
 80108f8:	4630      	mov	r0, r6
 80108fa:	f7fd fc7d 	bl	800e1f8 <_printf_float>
 80108fe:	4607      	mov	r7, r0
 8010900:	1c78      	adds	r0, r7, #1
 8010902:	d1d6      	bne.n	80108b2 <_vfiprintf_r+0x19e>
 8010904:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010906:	07d9      	lsls	r1, r3, #31
 8010908:	d405      	bmi.n	8010916 <_vfiprintf_r+0x202>
 801090a:	89ab      	ldrh	r3, [r5, #12]
 801090c:	059a      	lsls	r2, r3, #22
 801090e:	d402      	bmi.n	8010916 <_vfiprintf_r+0x202>
 8010910:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010912:	f7fe fb91 	bl	800f038 <__retarget_lock_release_recursive>
 8010916:	89ab      	ldrh	r3, [r5, #12]
 8010918:	065b      	lsls	r3, r3, #25
 801091a:	f53f af1d 	bmi.w	8010758 <_vfiprintf_r+0x44>
 801091e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010920:	e71c      	b.n	801075c <_vfiprintf_r+0x48>
 8010922:	ab03      	add	r3, sp, #12
 8010924:	9300      	str	r3, [sp, #0]
 8010926:	462a      	mov	r2, r5
 8010928:	4b05      	ldr	r3, [pc, #20]	; (8010940 <_vfiprintf_r+0x22c>)
 801092a:	a904      	add	r1, sp, #16
 801092c:	4630      	mov	r0, r6
 801092e:	f7fd feeb 	bl	800e708 <_printf_i>
 8010932:	e7e4      	b.n	80108fe <_vfiprintf_r+0x1ea>
 8010934:	080113cc 	.word	0x080113cc
 8010938:	080113d6 	.word	0x080113d6
 801093c:	0800e1f9 	.word	0x0800e1f9
 8010940:	080106ef 	.word	0x080106ef
 8010944:	080113d2 	.word	0x080113d2

08010948 <__sflush_r>:
 8010948:	898a      	ldrh	r2, [r1, #12]
 801094a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801094e:	4605      	mov	r5, r0
 8010950:	0710      	lsls	r0, r2, #28
 8010952:	460c      	mov	r4, r1
 8010954:	d458      	bmi.n	8010a08 <__sflush_r+0xc0>
 8010956:	684b      	ldr	r3, [r1, #4]
 8010958:	2b00      	cmp	r3, #0
 801095a:	dc05      	bgt.n	8010968 <__sflush_r+0x20>
 801095c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801095e:	2b00      	cmp	r3, #0
 8010960:	dc02      	bgt.n	8010968 <__sflush_r+0x20>
 8010962:	2000      	movs	r0, #0
 8010964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010968:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801096a:	2e00      	cmp	r6, #0
 801096c:	d0f9      	beq.n	8010962 <__sflush_r+0x1a>
 801096e:	2300      	movs	r3, #0
 8010970:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010974:	682f      	ldr	r7, [r5, #0]
 8010976:	6a21      	ldr	r1, [r4, #32]
 8010978:	602b      	str	r3, [r5, #0]
 801097a:	d032      	beq.n	80109e2 <__sflush_r+0x9a>
 801097c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801097e:	89a3      	ldrh	r3, [r4, #12]
 8010980:	075a      	lsls	r2, r3, #29
 8010982:	d505      	bpl.n	8010990 <__sflush_r+0x48>
 8010984:	6863      	ldr	r3, [r4, #4]
 8010986:	1ac0      	subs	r0, r0, r3
 8010988:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801098a:	b10b      	cbz	r3, 8010990 <__sflush_r+0x48>
 801098c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801098e:	1ac0      	subs	r0, r0, r3
 8010990:	2300      	movs	r3, #0
 8010992:	4602      	mov	r2, r0
 8010994:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010996:	6a21      	ldr	r1, [r4, #32]
 8010998:	4628      	mov	r0, r5
 801099a:	47b0      	blx	r6
 801099c:	1c43      	adds	r3, r0, #1
 801099e:	89a3      	ldrh	r3, [r4, #12]
 80109a0:	d106      	bne.n	80109b0 <__sflush_r+0x68>
 80109a2:	6829      	ldr	r1, [r5, #0]
 80109a4:	291d      	cmp	r1, #29
 80109a6:	d82b      	bhi.n	8010a00 <__sflush_r+0xb8>
 80109a8:	4a29      	ldr	r2, [pc, #164]	; (8010a50 <__sflush_r+0x108>)
 80109aa:	410a      	asrs	r2, r1
 80109ac:	07d6      	lsls	r6, r2, #31
 80109ae:	d427      	bmi.n	8010a00 <__sflush_r+0xb8>
 80109b0:	2200      	movs	r2, #0
 80109b2:	6062      	str	r2, [r4, #4]
 80109b4:	04d9      	lsls	r1, r3, #19
 80109b6:	6922      	ldr	r2, [r4, #16]
 80109b8:	6022      	str	r2, [r4, #0]
 80109ba:	d504      	bpl.n	80109c6 <__sflush_r+0x7e>
 80109bc:	1c42      	adds	r2, r0, #1
 80109be:	d101      	bne.n	80109c4 <__sflush_r+0x7c>
 80109c0:	682b      	ldr	r3, [r5, #0]
 80109c2:	b903      	cbnz	r3, 80109c6 <__sflush_r+0x7e>
 80109c4:	6560      	str	r0, [r4, #84]	; 0x54
 80109c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80109c8:	602f      	str	r7, [r5, #0]
 80109ca:	2900      	cmp	r1, #0
 80109cc:	d0c9      	beq.n	8010962 <__sflush_r+0x1a>
 80109ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80109d2:	4299      	cmp	r1, r3
 80109d4:	d002      	beq.n	80109dc <__sflush_r+0x94>
 80109d6:	4628      	mov	r0, r5
 80109d8:	f7ff f952 	bl	800fc80 <_free_r>
 80109dc:	2000      	movs	r0, #0
 80109de:	6360      	str	r0, [r4, #52]	; 0x34
 80109e0:	e7c0      	b.n	8010964 <__sflush_r+0x1c>
 80109e2:	2301      	movs	r3, #1
 80109e4:	4628      	mov	r0, r5
 80109e6:	47b0      	blx	r6
 80109e8:	1c41      	adds	r1, r0, #1
 80109ea:	d1c8      	bne.n	801097e <__sflush_r+0x36>
 80109ec:	682b      	ldr	r3, [r5, #0]
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d0c5      	beq.n	801097e <__sflush_r+0x36>
 80109f2:	2b1d      	cmp	r3, #29
 80109f4:	d001      	beq.n	80109fa <__sflush_r+0xb2>
 80109f6:	2b16      	cmp	r3, #22
 80109f8:	d101      	bne.n	80109fe <__sflush_r+0xb6>
 80109fa:	602f      	str	r7, [r5, #0]
 80109fc:	e7b1      	b.n	8010962 <__sflush_r+0x1a>
 80109fe:	89a3      	ldrh	r3, [r4, #12]
 8010a00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010a04:	81a3      	strh	r3, [r4, #12]
 8010a06:	e7ad      	b.n	8010964 <__sflush_r+0x1c>
 8010a08:	690f      	ldr	r7, [r1, #16]
 8010a0a:	2f00      	cmp	r7, #0
 8010a0c:	d0a9      	beq.n	8010962 <__sflush_r+0x1a>
 8010a0e:	0793      	lsls	r3, r2, #30
 8010a10:	680e      	ldr	r6, [r1, #0]
 8010a12:	bf08      	it	eq
 8010a14:	694b      	ldreq	r3, [r1, #20]
 8010a16:	600f      	str	r7, [r1, #0]
 8010a18:	bf18      	it	ne
 8010a1a:	2300      	movne	r3, #0
 8010a1c:	eba6 0807 	sub.w	r8, r6, r7
 8010a20:	608b      	str	r3, [r1, #8]
 8010a22:	f1b8 0f00 	cmp.w	r8, #0
 8010a26:	dd9c      	ble.n	8010962 <__sflush_r+0x1a>
 8010a28:	6a21      	ldr	r1, [r4, #32]
 8010a2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010a2c:	4643      	mov	r3, r8
 8010a2e:	463a      	mov	r2, r7
 8010a30:	4628      	mov	r0, r5
 8010a32:	47b0      	blx	r6
 8010a34:	2800      	cmp	r0, #0
 8010a36:	dc06      	bgt.n	8010a46 <__sflush_r+0xfe>
 8010a38:	89a3      	ldrh	r3, [r4, #12]
 8010a3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010a3e:	81a3      	strh	r3, [r4, #12]
 8010a40:	f04f 30ff 	mov.w	r0, #4294967295
 8010a44:	e78e      	b.n	8010964 <__sflush_r+0x1c>
 8010a46:	4407      	add	r7, r0
 8010a48:	eba8 0800 	sub.w	r8, r8, r0
 8010a4c:	e7e9      	b.n	8010a22 <__sflush_r+0xda>
 8010a4e:	bf00      	nop
 8010a50:	dfbffffe 	.word	0xdfbffffe

08010a54 <_fflush_r>:
 8010a54:	b538      	push	{r3, r4, r5, lr}
 8010a56:	690b      	ldr	r3, [r1, #16]
 8010a58:	4605      	mov	r5, r0
 8010a5a:	460c      	mov	r4, r1
 8010a5c:	b913      	cbnz	r3, 8010a64 <_fflush_r+0x10>
 8010a5e:	2500      	movs	r5, #0
 8010a60:	4628      	mov	r0, r5
 8010a62:	bd38      	pop	{r3, r4, r5, pc}
 8010a64:	b118      	cbz	r0, 8010a6e <_fflush_r+0x1a>
 8010a66:	6a03      	ldr	r3, [r0, #32]
 8010a68:	b90b      	cbnz	r3, 8010a6e <_fflush_r+0x1a>
 8010a6a:	f7fd fffb 	bl	800ea64 <__sinit>
 8010a6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d0f3      	beq.n	8010a5e <_fflush_r+0xa>
 8010a76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010a78:	07d0      	lsls	r0, r2, #31
 8010a7a:	d404      	bmi.n	8010a86 <_fflush_r+0x32>
 8010a7c:	0599      	lsls	r1, r3, #22
 8010a7e:	d402      	bmi.n	8010a86 <_fflush_r+0x32>
 8010a80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010a82:	f7fe fad8 	bl	800f036 <__retarget_lock_acquire_recursive>
 8010a86:	4628      	mov	r0, r5
 8010a88:	4621      	mov	r1, r4
 8010a8a:	f7ff ff5d 	bl	8010948 <__sflush_r>
 8010a8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010a90:	07da      	lsls	r2, r3, #31
 8010a92:	4605      	mov	r5, r0
 8010a94:	d4e4      	bmi.n	8010a60 <_fflush_r+0xc>
 8010a96:	89a3      	ldrh	r3, [r4, #12]
 8010a98:	059b      	lsls	r3, r3, #22
 8010a9a:	d4e1      	bmi.n	8010a60 <_fflush_r+0xc>
 8010a9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010a9e:	f7fe facb 	bl	800f038 <__retarget_lock_release_recursive>
 8010aa2:	e7dd      	b.n	8010a60 <_fflush_r+0xc>

08010aa4 <fiprintf>:
 8010aa4:	b40e      	push	{r1, r2, r3}
 8010aa6:	b503      	push	{r0, r1, lr}
 8010aa8:	4601      	mov	r1, r0
 8010aaa:	ab03      	add	r3, sp, #12
 8010aac:	4805      	ldr	r0, [pc, #20]	; (8010ac4 <fiprintf+0x20>)
 8010aae:	f853 2b04 	ldr.w	r2, [r3], #4
 8010ab2:	6800      	ldr	r0, [r0, #0]
 8010ab4:	9301      	str	r3, [sp, #4]
 8010ab6:	f7ff fe2d 	bl	8010714 <_vfiprintf_r>
 8010aba:	b002      	add	sp, #8
 8010abc:	f85d eb04 	ldr.w	lr, [sp], #4
 8010ac0:	b003      	add	sp, #12
 8010ac2:	4770      	bx	lr
 8010ac4:	2400006c 	.word	0x2400006c

08010ac8 <__swhatbuf_r>:
 8010ac8:	b570      	push	{r4, r5, r6, lr}
 8010aca:	460c      	mov	r4, r1
 8010acc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ad0:	2900      	cmp	r1, #0
 8010ad2:	b096      	sub	sp, #88	; 0x58
 8010ad4:	4615      	mov	r5, r2
 8010ad6:	461e      	mov	r6, r3
 8010ad8:	da0d      	bge.n	8010af6 <__swhatbuf_r+0x2e>
 8010ada:	89a3      	ldrh	r3, [r4, #12]
 8010adc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8010ae0:	f04f 0100 	mov.w	r1, #0
 8010ae4:	bf0c      	ite	eq
 8010ae6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8010aea:	2340      	movne	r3, #64	; 0x40
 8010aec:	2000      	movs	r0, #0
 8010aee:	6031      	str	r1, [r6, #0]
 8010af0:	602b      	str	r3, [r5, #0]
 8010af2:	b016      	add	sp, #88	; 0x58
 8010af4:	bd70      	pop	{r4, r5, r6, pc}
 8010af6:	466a      	mov	r2, sp
 8010af8:	f000 f848 	bl	8010b8c <_fstat_r>
 8010afc:	2800      	cmp	r0, #0
 8010afe:	dbec      	blt.n	8010ada <__swhatbuf_r+0x12>
 8010b00:	9901      	ldr	r1, [sp, #4]
 8010b02:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8010b06:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8010b0a:	4259      	negs	r1, r3
 8010b0c:	4159      	adcs	r1, r3
 8010b0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010b12:	e7eb      	b.n	8010aec <__swhatbuf_r+0x24>

08010b14 <__smakebuf_r>:
 8010b14:	898b      	ldrh	r3, [r1, #12]
 8010b16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010b18:	079d      	lsls	r5, r3, #30
 8010b1a:	4606      	mov	r6, r0
 8010b1c:	460c      	mov	r4, r1
 8010b1e:	d507      	bpl.n	8010b30 <__smakebuf_r+0x1c>
 8010b20:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010b24:	6023      	str	r3, [r4, #0]
 8010b26:	6123      	str	r3, [r4, #16]
 8010b28:	2301      	movs	r3, #1
 8010b2a:	6163      	str	r3, [r4, #20]
 8010b2c:	b002      	add	sp, #8
 8010b2e:	bd70      	pop	{r4, r5, r6, pc}
 8010b30:	ab01      	add	r3, sp, #4
 8010b32:	466a      	mov	r2, sp
 8010b34:	f7ff ffc8 	bl	8010ac8 <__swhatbuf_r>
 8010b38:	9900      	ldr	r1, [sp, #0]
 8010b3a:	4605      	mov	r5, r0
 8010b3c:	4630      	mov	r0, r6
 8010b3e:	f7fd fa3f 	bl	800dfc0 <_malloc_r>
 8010b42:	b948      	cbnz	r0, 8010b58 <__smakebuf_r+0x44>
 8010b44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010b48:	059a      	lsls	r2, r3, #22
 8010b4a:	d4ef      	bmi.n	8010b2c <__smakebuf_r+0x18>
 8010b4c:	f023 0303 	bic.w	r3, r3, #3
 8010b50:	f043 0302 	orr.w	r3, r3, #2
 8010b54:	81a3      	strh	r3, [r4, #12]
 8010b56:	e7e3      	b.n	8010b20 <__smakebuf_r+0xc>
 8010b58:	89a3      	ldrh	r3, [r4, #12]
 8010b5a:	6020      	str	r0, [r4, #0]
 8010b5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010b60:	81a3      	strh	r3, [r4, #12]
 8010b62:	9b00      	ldr	r3, [sp, #0]
 8010b64:	6163      	str	r3, [r4, #20]
 8010b66:	9b01      	ldr	r3, [sp, #4]
 8010b68:	6120      	str	r0, [r4, #16]
 8010b6a:	b15b      	cbz	r3, 8010b84 <__smakebuf_r+0x70>
 8010b6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010b70:	4630      	mov	r0, r6
 8010b72:	f000 f81d 	bl	8010bb0 <_isatty_r>
 8010b76:	b128      	cbz	r0, 8010b84 <__smakebuf_r+0x70>
 8010b78:	89a3      	ldrh	r3, [r4, #12]
 8010b7a:	f023 0303 	bic.w	r3, r3, #3
 8010b7e:	f043 0301 	orr.w	r3, r3, #1
 8010b82:	81a3      	strh	r3, [r4, #12]
 8010b84:	89a3      	ldrh	r3, [r4, #12]
 8010b86:	431d      	orrs	r5, r3
 8010b88:	81a5      	strh	r5, [r4, #12]
 8010b8a:	e7cf      	b.n	8010b2c <__smakebuf_r+0x18>

08010b8c <_fstat_r>:
 8010b8c:	b538      	push	{r3, r4, r5, lr}
 8010b8e:	4d07      	ldr	r5, [pc, #28]	; (8010bac <_fstat_r+0x20>)
 8010b90:	2300      	movs	r3, #0
 8010b92:	4604      	mov	r4, r0
 8010b94:	4608      	mov	r0, r1
 8010b96:	4611      	mov	r1, r2
 8010b98:	602b      	str	r3, [r5, #0]
 8010b9a:	f7f0 ffa8 	bl	8001aee <_fstat>
 8010b9e:	1c43      	adds	r3, r0, #1
 8010ba0:	d102      	bne.n	8010ba8 <_fstat_r+0x1c>
 8010ba2:	682b      	ldr	r3, [r5, #0]
 8010ba4:	b103      	cbz	r3, 8010ba8 <_fstat_r+0x1c>
 8010ba6:	6023      	str	r3, [r4, #0]
 8010ba8:	bd38      	pop	{r3, r4, r5, pc}
 8010baa:	bf00      	nop
 8010bac:	240035cc 	.word	0x240035cc

08010bb0 <_isatty_r>:
 8010bb0:	b538      	push	{r3, r4, r5, lr}
 8010bb2:	4d06      	ldr	r5, [pc, #24]	; (8010bcc <_isatty_r+0x1c>)
 8010bb4:	2300      	movs	r3, #0
 8010bb6:	4604      	mov	r4, r0
 8010bb8:	4608      	mov	r0, r1
 8010bba:	602b      	str	r3, [r5, #0]
 8010bbc:	f7f0 ffa7 	bl	8001b0e <_isatty>
 8010bc0:	1c43      	adds	r3, r0, #1
 8010bc2:	d102      	bne.n	8010bca <_isatty_r+0x1a>
 8010bc4:	682b      	ldr	r3, [r5, #0]
 8010bc6:	b103      	cbz	r3, 8010bca <_isatty_r+0x1a>
 8010bc8:	6023      	str	r3, [r4, #0]
 8010bca:	bd38      	pop	{r3, r4, r5, pc}
 8010bcc:	240035cc 	.word	0x240035cc

08010bd0 <abort>:
 8010bd0:	b508      	push	{r3, lr}
 8010bd2:	2006      	movs	r0, #6
 8010bd4:	f000 f890 	bl	8010cf8 <raise>
 8010bd8:	2001      	movs	r0, #1
 8010bda:	f7f0 ff39 	bl	8001a50 <_exit>

08010bde <_calloc_r>:
 8010bde:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010be0:	fba1 2402 	umull	r2, r4, r1, r2
 8010be4:	b94c      	cbnz	r4, 8010bfa <_calloc_r+0x1c>
 8010be6:	4611      	mov	r1, r2
 8010be8:	9201      	str	r2, [sp, #4]
 8010bea:	f7fd f9e9 	bl	800dfc0 <_malloc_r>
 8010bee:	9a01      	ldr	r2, [sp, #4]
 8010bf0:	4605      	mov	r5, r0
 8010bf2:	b930      	cbnz	r0, 8010c02 <_calloc_r+0x24>
 8010bf4:	4628      	mov	r0, r5
 8010bf6:	b003      	add	sp, #12
 8010bf8:	bd30      	pop	{r4, r5, pc}
 8010bfa:	220c      	movs	r2, #12
 8010bfc:	6002      	str	r2, [r0, #0]
 8010bfe:	2500      	movs	r5, #0
 8010c00:	e7f8      	b.n	8010bf4 <_calloc_r+0x16>
 8010c02:	4621      	mov	r1, r4
 8010c04:	f7fe f928 	bl	800ee58 <memset>
 8010c08:	e7f4      	b.n	8010bf4 <_calloc_r+0x16>

08010c0a <__ascii_mbtowc>:
 8010c0a:	b082      	sub	sp, #8
 8010c0c:	b901      	cbnz	r1, 8010c10 <__ascii_mbtowc+0x6>
 8010c0e:	a901      	add	r1, sp, #4
 8010c10:	b142      	cbz	r2, 8010c24 <__ascii_mbtowc+0x1a>
 8010c12:	b14b      	cbz	r3, 8010c28 <__ascii_mbtowc+0x1e>
 8010c14:	7813      	ldrb	r3, [r2, #0]
 8010c16:	600b      	str	r3, [r1, #0]
 8010c18:	7812      	ldrb	r2, [r2, #0]
 8010c1a:	1e10      	subs	r0, r2, #0
 8010c1c:	bf18      	it	ne
 8010c1e:	2001      	movne	r0, #1
 8010c20:	b002      	add	sp, #8
 8010c22:	4770      	bx	lr
 8010c24:	4610      	mov	r0, r2
 8010c26:	e7fb      	b.n	8010c20 <__ascii_mbtowc+0x16>
 8010c28:	f06f 0001 	mvn.w	r0, #1
 8010c2c:	e7f8      	b.n	8010c20 <__ascii_mbtowc+0x16>

08010c2e <_realloc_r>:
 8010c2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c32:	4680      	mov	r8, r0
 8010c34:	4614      	mov	r4, r2
 8010c36:	460e      	mov	r6, r1
 8010c38:	b921      	cbnz	r1, 8010c44 <_realloc_r+0x16>
 8010c3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010c3e:	4611      	mov	r1, r2
 8010c40:	f7fd b9be 	b.w	800dfc0 <_malloc_r>
 8010c44:	b92a      	cbnz	r2, 8010c52 <_realloc_r+0x24>
 8010c46:	f7ff f81b 	bl	800fc80 <_free_r>
 8010c4a:	4625      	mov	r5, r4
 8010c4c:	4628      	mov	r0, r5
 8010c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c52:	f000 f86d 	bl	8010d30 <_malloc_usable_size_r>
 8010c56:	4284      	cmp	r4, r0
 8010c58:	4607      	mov	r7, r0
 8010c5a:	d802      	bhi.n	8010c62 <_realloc_r+0x34>
 8010c5c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010c60:	d812      	bhi.n	8010c88 <_realloc_r+0x5a>
 8010c62:	4621      	mov	r1, r4
 8010c64:	4640      	mov	r0, r8
 8010c66:	f7fd f9ab 	bl	800dfc0 <_malloc_r>
 8010c6a:	4605      	mov	r5, r0
 8010c6c:	2800      	cmp	r0, #0
 8010c6e:	d0ed      	beq.n	8010c4c <_realloc_r+0x1e>
 8010c70:	42bc      	cmp	r4, r7
 8010c72:	4622      	mov	r2, r4
 8010c74:	4631      	mov	r1, r6
 8010c76:	bf28      	it	cs
 8010c78:	463a      	movcs	r2, r7
 8010c7a:	f7fe f9de 	bl	800f03a <memcpy>
 8010c7e:	4631      	mov	r1, r6
 8010c80:	4640      	mov	r0, r8
 8010c82:	f7fe fffd 	bl	800fc80 <_free_r>
 8010c86:	e7e1      	b.n	8010c4c <_realloc_r+0x1e>
 8010c88:	4635      	mov	r5, r6
 8010c8a:	e7df      	b.n	8010c4c <_realloc_r+0x1e>

08010c8c <__ascii_wctomb>:
 8010c8c:	b149      	cbz	r1, 8010ca2 <__ascii_wctomb+0x16>
 8010c8e:	2aff      	cmp	r2, #255	; 0xff
 8010c90:	bf85      	ittet	hi
 8010c92:	238a      	movhi	r3, #138	; 0x8a
 8010c94:	6003      	strhi	r3, [r0, #0]
 8010c96:	700a      	strbls	r2, [r1, #0]
 8010c98:	f04f 30ff 	movhi.w	r0, #4294967295
 8010c9c:	bf98      	it	ls
 8010c9e:	2001      	movls	r0, #1
 8010ca0:	4770      	bx	lr
 8010ca2:	4608      	mov	r0, r1
 8010ca4:	4770      	bx	lr

08010ca6 <_raise_r>:
 8010ca6:	291f      	cmp	r1, #31
 8010ca8:	b538      	push	{r3, r4, r5, lr}
 8010caa:	4604      	mov	r4, r0
 8010cac:	460d      	mov	r5, r1
 8010cae:	d904      	bls.n	8010cba <_raise_r+0x14>
 8010cb0:	2316      	movs	r3, #22
 8010cb2:	6003      	str	r3, [r0, #0]
 8010cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8010cb8:	bd38      	pop	{r3, r4, r5, pc}
 8010cba:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8010cbc:	b112      	cbz	r2, 8010cc4 <_raise_r+0x1e>
 8010cbe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010cc2:	b94b      	cbnz	r3, 8010cd8 <_raise_r+0x32>
 8010cc4:	4620      	mov	r0, r4
 8010cc6:	f000 f831 	bl	8010d2c <_getpid_r>
 8010cca:	462a      	mov	r2, r5
 8010ccc:	4601      	mov	r1, r0
 8010cce:	4620      	mov	r0, r4
 8010cd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010cd4:	f000 b818 	b.w	8010d08 <_kill_r>
 8010cd8:	2b01      	cmp	r3, #1
 8010cda:	d00a      	beq.n	8010cf2 <_raise_r+0x4c>
 8010cdc:	1c59      	adds	r1, r3, #1
 8010cde:	d103      	bne.n	8010ce8 <_raise_r+0x42>
 8010ce0:	2316      	movs	r3, #22
 8010ce2:	6003      	str	r3, [r0, #0]
 8010ce4:	2001      	movs	r0, #1
 8010ce6:	e7e7      	b.n	8010cb8 <_raise_r+0x12>
 8010ce8:	2400      	movs	r4, #0
 8010cea:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010cee:	4628      	mov	r0, r5
 8010cf0:	4798      	blx	r3
 8010cf2:	2000      	movs	r0, #0
 8010cf4:	e7e0      	b.n	8010cb8 <_raise_r+0x12>
	...

08010cf8 <raise>:
 8010cf8:	4b02      	ldr	r3, [pc, #8]	; (8010d04 <raise+0xc>)
 8010cfa:	4601      	mov	r1, r0
 8010cfc:	6818      	ldr	r0, [r3, #0]
 8010cfe:	f7ff bfd2 	b.w	8010ca6 <_raise_r>
 8010d02:	bf00      	nop
 8010d04:	2400006c 	.word	0x2400006c

08010d08 <_kill_r>:
 8010d08:	b538      	push	{r3, r4, r5, lr}
 8010d0a:	4d07      	ldr	r5, [pc, #28]	; (8010d28 <_kill_r+0x20>)
 8010d0c:	2300      	movs	r3, #0
 8010d0e:	4604      	mov	r4, r0
 8010d10:	4608      	mov	r0, r1
 8010d12:	4611      	mov	r1, r2
 8010d14:	602b      	str	r3, [r5, #0]
 8010d16:	f7f0 fe89 	bl	8001a2c <_kill>
 8010d1a:	1c43      	adds	r3, r0, #1
 8010d1c:	d102      	bne.n	8010d24 <_kill_r+0x1c>
 8010d1e:	682b      	ldr	r3, [r5, #0]
 8010d20:	b103      	cbz	r3, 8010d24 <_kill_r+0x1c>
 8010d22:	6023      	str	r3, [r4, #0]
 8010d24:	bd38      	pop	{r3, r4, r5, pc}
 8010d26:	bf00      	nop
 8010d28:	240035cc 	.word	0x240035cc

08010d2c <_getpid_r>:
 8010d2c:	f7f0 be76 	b.w	8001a1c <_getpid>

08010d30 <_malloc_usable_size_r>:
 8010d30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010d34:	1f18      	subs	r0, r3, #4
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	bfbc      	itt	lt
 8010d3a:	580b      	ldrlt	r3, [r1, r0]
 8010d3c:	18c0      	addlt	r0, r0, r3
 8010d3e:	4770      	bx	lr

08010d40 <_init>:
 8010d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d42:	bf00      	nop
 8010d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010d46:	bc08      	pop	{r3}
 8010d48:	469e      	mov	lr, r3
 8010d4a:	4770      	bx	lr

08010d4c <_fini>:
 8010d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d4e:	bf00      	nop
 8010d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010d52:	bc08      	pop	{r3}
 8010d54:	469e      	mov	lr, r3
 8010d56:	4770      	bx	lr
